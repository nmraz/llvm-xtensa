# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=xtensa -run-pass=branch-folder -verify-machineinstrs %s -o - | FileCheck %s
---
|
  declare void @func1()
  declare void @func2()

  define void @reverse_bbc() { ret void }
  define void @reverse_bbci() { ret void }
  define void @reverse_bbs() { ret void }
  define void @reverse_bbsi() { ret void }
  define void @reverse_beq() { ret void }
  define void @reverse_beqi() { ret void }
  define void @reverse_bge() { ret void }
  define void @reverse_bgei() { ret void }
  define void @reverse_bgeu() { ret void }
  define void @reverse_bgeui() { ret void }
  define void @reverse_blt() { ret void }
  define void @reverse_blti() { ret void }
  define void @reverse_bltu() { ret void }
  define void @reverse_bltui() { ret void }
  define void @reverse_bne() { ret void }
  define void @reverse_bnei() { ret void }
  define void @reverse_beqz() { ret void }
  define void @reverse_bgez() { ret void }
  define void @reverse_bltz() { ret void }
  define void @reverse_bnez() { ret void }
---
name: reverse_bbc
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bbc
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BBS killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BBC killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bbci
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bbci
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BBSI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BBCI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bbs
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bbs
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BBC killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BBS killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bbsi
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bbsi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BBCI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BBSI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_beq
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_beq
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BNE killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BEQ killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_beqi
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_beqi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BNEI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BEQI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bge
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bge
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BLT killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BGE killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bgei
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bgei
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BLTI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BGEI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bgeu
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bgeu
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BLTU killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BGEU killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bgeui
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bgeui
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BLTUI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BGEUI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_blt
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_blt
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BGE killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BLT killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_blti
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_blti
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BGEI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BLTI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bltu
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bltu
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BGEU killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BLTU killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bltui
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bltui
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BGEUI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BLTUI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bne
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bne
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BEQ killed renamable $a2, killed renamable $a3, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BNE killed renamable $a2, killed renamable $a3, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bnei
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bnei
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BEQI killed renamable $a2, 5, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BNEI killed renamable $a2, 5, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_beqz
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_beqz
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BNEZ killed renamable $a2, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BEQZ killed renamable $a2, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bgez
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bgez
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BLTZ killed renamable $a2, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BGEZ killed renamable $a2, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bltz
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bltz
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BGEZ killed renamable $a2, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BLTZ killed renamable $a2, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
---
name: reverse_bnez
stack:
  - { id: 0, name: "", type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: "$a0", callee-saved-restored: true,
      debug-info-variable: "", debug-info-expression: "", debug-info-location: "" }
body: |
  ; CHECK-LABEL: name: reverse_bnez
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, -16
  ; CHECK-NEXT:   S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
  ; CHECK-NEXT:   BEQZ killed renamable $a2, %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func1, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   J %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   CALL0 @func2, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   $a1 = ADDI killed $a1, 16
  ; CHECK-NEXT:   RETN implicit $a0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $a2

    $a1 = ADDI killed $a1, -16
    S32I killed $a0, $a1, 12 :: (store (s32) into %stack.0)
    BNEZ killed renamable $a2, %bb.1
    J %bb.2

  bb.1:
    successors: %bb.3(0x80000000)

    CALL0 @func1, csr_xtensa_call0, implicit-def $a0
    J %bb.3

  bb.2:
    successors: %bb.3(0x80000000)

    CALL0 @func2, csr_xtensa_call0, implicit-def $a0

  bb.3:
    $a0 = L32I $a1, 12 :: (load (s32) from %stack.0)
    $a1 = ADDI killed $a1, 16
    RETN implicit $a0
...
