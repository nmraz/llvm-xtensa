# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'icmp.ll'
  source_filename = "icmp.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i1 @icmp_eq_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp eq i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ne_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp ne i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eqz_i8(i8 %a) {
  entry:
    %icmp = icmp eq i8 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_nez_i8(i8 %a) {
  entry:
    %icmp = icmp ne i8 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slt_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp slt i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sle_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp sle i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sgt_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp sgt i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sge_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp sge i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sltz_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp slt i8 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slez_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp slt i8 %a, 1
    ret i1 %icmp
  }

  define i1 @icmp_sgtz_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp sgt i8 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_sgez_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp sgt i8 %a, -1
    ret i1 %icmp
  }

  define i1 @icmp_ult_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp ult i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ule_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp ule i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ugt_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp ugt i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_uge_i8(i8 %a, i8 %b) {
  entry:
    %icmp = icmp uge i8 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eq_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp eq i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ne_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp ne i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eqz_i16(i16 %a) {
  entry:
    %icmp = icmp eq i16 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_nez_i16(i16 %a) {
  entry:
    %icmp = icmp ne i16 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slt_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp slt i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sle_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp sle i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sgt_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp sgt i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sge_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp sge i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sltz_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp slt i16 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slez_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp slt i16 %a, 1
    ret i1 %icmp
  }

  define i1 @icmp_sgtz_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp sgt i16 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_sgez_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp sgt i16 %a, -1
    ret i1 %icmp
  }

  define i1 @icmp_ult_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp ult i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ule_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp ule i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ugt_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp ugt i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_uge_i16(i16 %a, i16 %b) {
  entry:
    %icmp = icmp uge i16 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eq_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp eq i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ne_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp ne i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eqz_i32(i32 %a) {
  entry:
    %icmp = icmp eq i32 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_nez_i32(i32 %a) {
  entry:
    %icmp = icmp ne i32 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slt_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp slt i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sle_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp sle i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sgt_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp sgt i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sge_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp sge i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sltz_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp slt i32 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slez_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp slt i32 %a, 1
    ret i1 %icmp
  }

  define i1 @icmp_sgtz_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp sgt i32 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_sgez_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp sgt i32 %a, -1
    ret i1 %icmp
  }

  define i1 @icmp_ult_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp ult i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ule_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp ule i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ugt_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp ugt i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_uge_i32(i32 %a, i32 %b) {
  entry:
    %icmp = icmp uge i32 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eq_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp eq i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ne_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp ne i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eqz_i64(i64 %a) {
  entry:
    %icmp = icmp eq i64 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_nez_i64(i64 %a) {
  entry:
    %icmp = icmp ne i64 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slt_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp slt i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sle_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp sle i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sgt_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp sgt i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sge_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp sge i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sltz_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp slt i64 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_slez_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp slt i64 %a, 1
    ret i1 %icmp
  }

  define i1 @icmp_sgtz_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp sgt i64 %a, 0
    ret i1 %icmp
  }

  define i1 @icmp_sgez_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp sgt i64 %a, -1
    ret i1 %icmp
  }

  define i1 @icmp_ult_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp ult i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ule_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp ule i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ugt_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp ugt i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_uge_i64(i64 %a, i64 %b) {
  entry:
    %icmp = icmp uge i64 %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eq_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp eq ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ne_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp ne ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_eqz_ptr(ptr %a) {
  entry:
    %icmp = icmp eq ptr %a, null
    ret i1 %icmp
  }

  define i1 @icmp_nez_ptr(ptr %a) {
  entry:
    %icmp = icmp ne ptr %a, null
    ret i1 %icmp
  }

  define i1 @icmp_slt_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp slt ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sle_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp sle ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sgt_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp sgt ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_sge_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp sge ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ult_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp ult ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ule_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp ule ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_ugt_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp ugt ptr %a, %b
    ret i1 %icmp
  }

  define i1 @icmp_uge_ptr(ptr %a, ptr %b) {
  entry:
    %icmp = icmp uge ptr %a, %b
    ret i1 %icmp
  }

...
---
name:            icmp_eq_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_eq_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(eq), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ne_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ne_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ne), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eqz_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_eqz_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s1) = G_ICMP intpred(eq), %0(s8), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_nez_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_nez_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[AND]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CONSTANT i8 0
    %3:_(s1) = G_ICMP intpred(ne), %0(s8), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slt_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slt_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(slt), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sle_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sle_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sle), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgt_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgt_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sgt), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sge_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sge_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sge), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sltz_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sltz_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_CONSTANT i8 0
    %5:_(s1) = G_ICMP intpred(slt), %0(s8), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slez_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slez_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_CONSTANT i8 1
    %5:_(s1) = G_ICMP intpred(slt), %0(s8), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgtz_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgtz_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_CONSTANT i8 0
    %5:_(s1) = G_ICMP intpred(sgt), %0(s8), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgez_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgez_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_CONSTANT i8 -1
    %5:_(s1) = G_ICMP intpred(sgt), %0(s8), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ult_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ult_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ult), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ule_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ule_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ule), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ugt_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ugt_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ugt), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_uge_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_uge_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(uge), %0(s8), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eq_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_eq_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(eq), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ne_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ne_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ne), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eqz_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_eqz_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AND]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CONSTANT i16 0
    %3:_(s1) = G_ICMP intpred(eq), %0(s16), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_nez_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_nez_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[AND]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CONSTANT i16 0
    %3:_(s1) = G_ICMP intpred(ne), %0(s16), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slt_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slt_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(slt), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sle_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sle_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sle), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgt_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgt_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sgt), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sge_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sge_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[ASHR]](s32), [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(sge), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sltz_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sltz_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_CONSTANT i16 0
    %5:_(s1) = G_ICMP intpred(slt), %0(s16), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slez_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slez_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_CONSTANT i16 1
    %5:_(s1) = G_ICMP intpred(slt), %0(s16), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgtz_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgtz_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_CONSTANT i16 0
    %5:_(s1) = G_ICMP intpred(sgt), %0(s16), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgez_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgez_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[ASHR]](s32), [[C1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_CONSTANT i16 -1
    %5:_(s1) = G_ICMP intpred(sgt), %0(s16), %4
    %6:_(s32) = G_ANYEXT %5(s1)
    $a2 = COPY %6(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ult_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ult_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ult), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ule_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ule_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ule), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ugt_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ugt_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(ugt), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_uge_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_uge_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s1) = G_ICMP intpred(uge), %0(s16), %1
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eq_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_eq_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(eq), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ne_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ne_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ne), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eqz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_eqz_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s1) = G_ICMP intpred(eq), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_nez_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_nez_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s1) = G_ICMP intpred(ne), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slt_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(slt), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sle_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sle_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sle), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgt_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sgt), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sge_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sge_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sge), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sltz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sltz_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(slt), %0(s32), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slez_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slez_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_CONSTANT i32 1
    %3:_(s1) = G_ICMP intpred(slt), %0(s32), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgtz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgtz_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_CONSTANT i32 0
    %3:_(s1) = G_ICMP intpred(sgt), %0(s32), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgez_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgez_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_CONSTANT i32 -1
    %3:_(s1) = G_ICMP intpred(sgt), %0(s32), %2
    %4:_(s32) = G_ANYEXT %3(s1)
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ult_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ult_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ult), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ule_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ule_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ule), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ugt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ugt_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ugt), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_uge_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_uge_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s1) = G_ICMP intpred(uge), %0(s32), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eq_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_eq_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[OR]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(eq), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ne_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_ne_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[OR]](s32), [[C]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(ne), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eqz_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_eqz_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[OR]](s32), [[C2]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CONSTANT i64 0
    %4:_(s1) = G_ICMP intpred(eq), %0(s64), %3
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_nez_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_nez_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[OR]](s32), [[C2]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CONSTANT i64 0
    %4:_(s1) = G_ICMP intpred(ne), %0(s64), %3
    %5:_(s32) = G_ANYEXT %4(s1)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slt_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_slt_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(slt), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sle_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sle_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(sle), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgt_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sgt_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(sgt), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sge_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sge_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(sge), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sltz_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sltz_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_CONSTANT i64 0
    %7:_(s1) = G_ICMP intpred(slt), %0(s64), %6
    %8:_(s32) = G_ANYEXT %7(s1)
    $a2 = COPY %8(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slez_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_slez_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_CONSTANT i64 1
    %7:_(s1) = G_ICMP intpred(slt), %0(s64), %6
    %8:_(s32) = G_ANYEXT %7(s1)
    $a2 = COPY %8(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgtz_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sgtz_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_CONSTANT i64 0
    %7:_(s1) = G_ICMP intpred(sgt), %0(s64), %6
    %8:_(s32) = G_ANYEXT %7(s1)
    $a2 = COPY %8(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgez_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_sgez_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_CONSTANT i64 -1
    %7:_(s1) = G_ICMP intpred(sgt), %0(s64), %6
    %8:_(s32) = G_ANYEXT %7(s1)
    $a2 = COPY %8(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ult_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_ult_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(ult), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ule_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_ule_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(ule), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ugt_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_ugt_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(ugt), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_uge_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: icmp_uge_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s1) = G_ICMP intpred(uge), %0(s64), %1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eq_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_eq_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(eq), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ne_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ne_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ne), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_eqz_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_eqz_ptr
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[C]](s32)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = G_CONSTANT i32 0
    %2:_(s1) = G_ICMP intpred(eq), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_nez_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: icmp_nez_ptr
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[C]](s32)
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = G_CONSTANT i32 0
    %2:_(s1) = G_ICMP intpred(ne), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_slt_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_slt_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(slt), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sle_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sle_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sle), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sgt_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sgt_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sgt), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_sge_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_sge_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(sge), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ult_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ult_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ult), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ule_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ule_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ule), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ule), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_ugt_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_ugt_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(ugt), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            icmp_uge_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: icmp_uge_ptr
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY]](p0)
    ; CHECK-NEXT: [[PTRTOINT1:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(uge), [[PTRTOINT]](s32), [[PTRTOINT1]]
    ; CHECK-NEXT: $a2 = COPY [[ICMP]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(p0) = COPY $a3
    %2:_(s1) = G_ICMP intpred(uge), %0(p0), %1
    %3:_(s32) = G_ANYEXT %2(s1)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
