# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'phi.ll'
  source_filename = "phi.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i1 @phi_i1(i1 %cnd, i1 %a, i1 %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi i1 [ %b, %cond.false ], [ %a, %entry ]
    ret i1 %cond
  }

  define i8 @phi_i8(i1 %cnd, i8 %a, i8 %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi i8 [ %b, %cond.false ], [ %a, %entry ]
    ret i8 %cond
  }

  define i16 @phi_i16(i1 %cnd, i16 %a, i16 %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi i16 [ %b, %cond.false ], [ %a, %entry ]
    ret i16 %cond
  }

  define i32 @phi_i32(i1 %cnd, i32 %a, i32 %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi i32 [ %b, %cond.false ], [ %a, %entry ]
    ret i32 %cond
  }

  define i64 @phi_i64(i1 %cnd, i64 %a, i64 %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi i64 [ %b, %cond.false ], [ %a, %entry ]
    ret i64 %cond
  }

  define ptr @phi_ptr(i1 %cnd, ptr %a, ptr %b) {
  entry:
    br i1 %cnd, label %cond.end, label %cond.false

  cond.false:                                       ; preds = %entry
    br label %cond.end

  cond.end:                                         ; preds = %entry, %cond.false
    %cond = phi ptr [ %b, %cond.false ], [ %a, %entry ]
    ret ptr %cond
  }

...
---
name:            phi_i1
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_i1
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY2]](s32), %bb.1, [[COPY1]](s32), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3, $a4

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %4:_(s32) = COPY $a3
    %1:_(s1) = G_TRUNC %4(s32)
    %5:_(s32) = COPY $a4
    %2:_(s1) = G_TRUNC %5(s32)
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %6:_(s1) = G_PHI %2(s1), %bb.2, %1(s1), %bb.1
    %7:_(s32) = G_ANYEXT %6(s1)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            phi_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_i8
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY2]](s32), %bb.1, [[COPY1]](s32), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3, $a4

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %4:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %4(s32)
    %5:_(s32) = COPY $a4
    %2:_(s8) = G_TRUNC %5(s32)
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %6:_(s8) = G_PHI %2(s8), %bb.2, %1(s8), %bb.1
    %7:_(s32) = G_ANYEXT %6(s8)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            phi_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_i16
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY2]](s32), %bb.1, [[COPY1]](s32), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3, $a4

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %4:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %4(s32)
    %5:_(s32) = COPY $a4
    %2:_(s16) = G_TRUNC %5(s32)
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %6:_(s16) = G_PHI %2(s16), %bb.2, %1(s16), %bb.1
    %7:_(s32) = G_ANYEXT %6(s16)
    $a2 = COPY %7(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            phi_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_i32
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY2]](s32), %bb.1, [[COPY1]](s32), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3, $a4

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %1:_(s32) = COPY $a3
    %2:_(s32) = COPY $a4
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %4:_(s32) = G_PHI %2(s32), %bb.2, %1(s32), %bb.1
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            phi_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
  - { reg: '$a6', virtual-reg: '' }
  - { reg: '$a7', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_i64
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[COPY3]](s32), %bb.1, [[COPY1]](s32), %bb.0
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:_(s32) = G_PHI [[COPY4]](s32), %bb.1, [[COPY2]](s32), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   $a3 = COPY [[PHI1]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2, implicit $a3
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a4, $a5, $a6, $a7

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s32) = COPY $a6
    %7:_(s32) = COPY $a7
    %2:_(s64) = G_MERGE_VALUES %6(s32), %7(s32)
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %8:_(s64) = G_PHI %2(s64), %bb.2, %1(s64), %bb.1
    %9:_(s32), %10:_(s32) = G_UNMERGE_VALUES %8(s64)
    $a2 = COPY %9(s32)
    $a3 = COPY %10(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            phi_ptr
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: phi_ptr
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(p0) = COPY $a4
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.cond.false:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.cond.end:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(p0) = G_PHI [[COPY2]](p0), %bb.1, [[COPY1]](p0), %bb.0
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](p0)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3, $a4

    %3:_(s32) = COPY $a2
    %0:_(s1) = G_TRUNC %3(s32)
    %1:_(p0) = COPY $a3
    %2:_(p0) = COPY $a4
    G_BRCOND %0(s1), %bb.3
    G_BR %bb.2

  bb.2.cond.false:
    successors: %bb.3(0x80000000)


  bb.3.cond.end:
    %4:_(p0) = G_PHI %2(p0), %bb.2, %1(p0), %bb.1
    $a2 = COPY %4(p0)
    RETN implicit $a0, implicit $a2

...
