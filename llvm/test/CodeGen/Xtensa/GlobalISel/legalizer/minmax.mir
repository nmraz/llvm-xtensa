# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -mattr=+minmax -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=MINMAX
# RUN: llc -O0 -mtriple=xtensa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'minmax.ll'
  source_filename = "minmax.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.smin.i8(i8, i8) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.umin.i8(i8, i8) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.smax.i8(i8, i8) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.umax.i8(i8, i8) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.smin.i16(i16, i16) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.umin.i16(i16, i16) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.smax.i16(i16, i16) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.umax.i16(i16, i16) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.smin.i32(i32, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.umin.i32(i32, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.smax.i32(i32, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.umax.i32(i32, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.smin.i64(i64, i64) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.umin.i64(i64, i64) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.smax.i64(i64, i64) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.umax.i64(i64, i64) #0

  define i8 @smin_i8(i8 %a, i8 %b) {
    %smin = call i8 @llvm.smin.i8(i8 %a, i8 %b)
    ret i8 %smin
  }

  define i8 @umin_i8(i8 %a, i8 %b) {
    %umin = call i8 @llvm.umin.i8(i8 %a, i8 %b)
    ret i8 %umin
  }

  define i8 @smax_i8(i8 %a, i8 %b) {
    %smax = call i8 @llvm.smax.i8(i8 %a, i8 %b)
    ret i8 %smax
  }

  define i8 @umax_i8(i8 %a, i8 %b) {
    %umax = call i8 @llvm.umax.i8(i8 %a, i8 %b)
    ret i8 %umax
  }

  define i16 @smin_i16(i16 %a, i16 %b) {
    %smin = call i16 @llvm.smin.i16(i16 %a, i16 %b)
    ret i16 %smin
  }

  define i16 @umin_i16(i16 %a, i16 %b) {
    %umin = call i16 @llvm.umin.i16(i16 %a, i16 %b)
    ret i16 %umin
  }

  define i16 @smax_i16(i16 %a, i16 %b) {
    %smax = call i16 @llvm.smax.i16(i16 %a, i16 %b)
    ret i16 %smax
  }

  define i16 @umax_i16(i16 %a, i16 %b) {
    %umax = call i16 @llvm.umax.i16(i16 %a, i16 %b)
    ret i16 %umax
  }

  define i32 @smin_i32(i32 %a, i32 %b) {
    %smin = call i32 @llvm.smin.i32(i32 %a, i32 %b)
    ret i32 %smin
  }

  define i32 @umin_i32(i32 %a, i32 %b) {
    %umin = call i32 @llvm.umin.i32(i32 %a, i32 %b)
    ret i32 %umin
  }

  define i32 @smax_i32(i32 %a, i32 %b) {
    %smax = call i32 @llvm.smax.i32(i32 %a, i32 %b)
    ret i32 %smax
  }

  define i32 @umax_i32(i32 %a, i32 %b) {
    %umax = call i32 @llvm.umax.i32(i32 %a, i32 %b)
    ret i32 %umax
  }

  define i64 @smin_i64(i64 %a, i64 %b) {
    %smin = call i64 @llvm.smin.i64(i64 %a, i64 %b)
    ret i64 %smin
  }

  define i64 @umin_i64(i64 %a, i64 %b) {
    %umin = call i64 @llvm.umin.i64(i64 %a, i64 %b)
    ret i64 %umin
  }

  define i64 @smax_i64(i64 %a, i64 %b) {
    %smax = call i64 @llvm.smax.i64(i64 %a, i64 %b)
    ret i64 %smax
  }

  define i64 @umax_i64(i64 %a, i64 %b) {
    %umax = call i64 @llvm.umax.i64(i64 %a, i64 %b)
    ret i64 %umax
  }

  attributes #0 = { nocallback nofree nosync nounwind readnone speculatable willreturn }

...
---
name:            smin_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smin_i8
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; MINMAX-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; MINMAX-NEXT: [[SMIN:%[0-9]+]]:_(s32) = G_SMIN [[SEXT_INREG]], [[SEXT_INREG1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smin_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[SEXT_INREG]](s32), [[SEXT_INREG1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_SMIN %0, %1
    %5:_(s32) = G_ANYEXT %4(s8)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umin_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umin_i8
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; MINMAX-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; MINMAX-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; MINMAX-NEXT: [[UMIN:%[0-9]+]]:_(s32) = G_UMIN [[AND]], [[AND1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umin_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_UMIN %0, %1
    %5:_(s32) = G_ANYEXT %4(s8)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smax_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smax_i8
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; MINMAX-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; MINMAX-NEXT: [[SMAX:%[0-9]+]]:_(s32) = G_SMAX [[SEXT_INREG]], [[SEXT_INREG1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smax_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[SEXT_INREG]](s32), [[SEXT_INREG1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_SMAX %0, %1
    %5:_(s32) = G_ANYEXT %4(s8)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umax_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umax_i8
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; MINMAX-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; MINMAX-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; MINMAX-NEXT: [[UMAX:%[0-9]+]]:_(s32) = G_UMAX [[AND]], [[AND1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umax_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_UMAX %0, %1
    %5:_(s32) = G_ANYEXT %4(s8)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smin_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smin_i16
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; MINMAX-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; MINMAX-NEXT: [[SMIN:%[0-9]+]]:_(s32) = G_SMIN [[SEXT_INREG]], [[SEXT_INREG1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smin_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[SEXT_INREG]](s32), [[SEXT_INREG1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_SMIN %0, %1
    %5:_(s32) = G_ANYEXT %4(s16)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umin_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umin_i16
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; MINMAX-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; MINMAX-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; MINMAX-NEXT: [[UMIN:%[0-9]+]]:_(s32) = G_UMIN [[AND]], [[AND1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umin_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_UMIN %0, %1
    %5:_(s32) = G_ANYEXT %4(s16)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smax_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smax_i16
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; MINMAX-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; MINMAX-NEXT: [[SMAX:%[0-9]+]]:_(s32) = G_SMAX [[SEXT_INREG]], [[SEXT_INREG1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smax_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[SEXT_INREG]](s32), [[SEXT_INREG1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_SMAX %0, %1
    %5:_(s32) = G_ANYEXT %4(s16)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umax_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umax_i16
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; MINMAX-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; MINMAX-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; MINMAX-NEXT: [[UMAX:%[0-9]+]]:_(s32) = G_UMAX [[AND]], [[AND1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umax_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[AND]](s32), [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %2:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a3
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_UMAX %0, %1
    %5:_(s32) = G_ANYEXT %4(s16)
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smin_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smin_i32
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SMIN:%[0-9]+]]:_(s32) = G_SMIN [[COPY]], [[COPY1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smin_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_SMIN %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umin_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umin_i32
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[UMIN:%[0-9]+]]:_(s32) = G_UMIN [[COPY]], [[COPY1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMIN]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umin_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_UMIN %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smax_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: smax_i32
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[SMAX:%[0-9]+]]:_(s32) = G_SMAX [[COPY]], [[COPY1]]
    ; MINMAX-NEXT: $a2 = COPY [[SMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: smax_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_SMAX %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            umax_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; MINMAX-LABEL: name: umax_i32
    ; MINMAX: liveins: $a2, $a3
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[UMAX:%[0-9]+]]:_(s32) = G_UMAX [[COPY]], [[COPY1]]
    ; MINMAX-NEXT: $a2 = COPY [[UMAX]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2
    ; CHECK-LABEL: name: umax_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = G_UMAX %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            smin_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3, $a4, $a5

    ; MINMAX-LABEL: name: smin_i64
    ; MINMAX: liveins: $a2, $a3, $a4, $a5
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; MINMAX-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; MINMAX-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; MINMAX-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; MINMAX-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; MINMAX-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; MINMAX-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; MINMAX-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    ; CHECK-LABEL: name: smin_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_SMIN %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $a2 = COPY %7(s32)
    $a3 = COPY %8(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            umin_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3, $a4, $a5

    ; MINMAX-LABEL: name: umin_i64
    ; MINMAX: liveins: $a2, $a3, $a4, $a5
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; MINMAX-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; MINMAX-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; MINMAX-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; MINMAX-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; MINMAX-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; MINMAX-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; MINMAX-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    ; CHECK-LABEL: name: umin_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_UMIN %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $a2 = COPY %7(s32)
    $a3 = COPY %8(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            smax_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3, $a4, $a5

    ; MINMAX-LABEL: name: smax_i64
    ; MINMAX: liveins: $a2, $a3, $a4, $a5
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; MINMAX-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; MINMAX-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; MINMAX-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; MINMAX-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; MINMAX-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; MINMAX-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; MINMAX-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    ; CHECK-LABEL: name: smax_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_SMAX %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $a2 = COPY %7(s32)
    $a3 = COPY %8(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            umax_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3, $a4, $a5

    ; MINMAX-LABEL: name: umax_i64
    ; MINMAX: liveins: $a2, $a3, $a4, $a5
    ; MINMAX-NEXT: {{  $}}
    ; MINMAX-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; MINMAX-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; MINMAX-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; MINMAX-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; MINMAX-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; MINMAX-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; MINMAX-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; MINMAX-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MINMAX-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; MINMAX-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; MINMAX-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; MINMAX-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; MINMAX-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; MINMAX-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    ; CHECK-LABEL: name: umax_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[COPY3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY]](s32), [[COPY2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[ICMP1]](s32), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[SELECT]], [[C]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY]], [[COPY2]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[COPY1]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a4
    %5:_(s32) = COPY $a5
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_UMAX %0, %1
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $a2 = COPY %7(s32)
    $a3 = COPY %8(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
