# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -mattr=+nsa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = './llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/ctz.ll'
  source_filename = "./llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/ctz.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.ctlz.i8(i8, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.ctlz.i16(i16, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.ctlz.i32(i32, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.ctlz.i64(i64, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i8 @llvm.cttz.i8(i8, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i16 @llvm.cttz.i16(i16, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i32 @llvm.cttz.i32(i32, i1 immarg) #0

  ; Function Attrs: nocallback nofree nosync nounwind readnone speculatable willreturn
  declare i64 @llvm.cttz.i64(i64, i1 immarg) #0

  define i8 @ctlz_i8(i8 %a) #1 {
    %ctz = call i8 @llvm.ctlz.i8(i8 %a, i1 false)
    ret i8 %ctz
  }

  define i8 @ctlz_zundef_i8(i8 %a) #1 {
    %ctz = call i8 @llvm.ctlz.i8(i8 %a, i1 true)
    ret i8 %ctz
  }

  define i8 @cttz_i8(i8 %a) #1 {
    %ctz = call i8 @llvm.cttz.i8(i8 %a, i1 false)
    ret i8 %ctz
  }

  define i8 @cttz_zundef_i8(i8 %a) #1 {
    %ctz = call i8 @llvm.cttz.i8(i8 %a, i1 true)
    ret i8 %ctz
  }

  define i16 @ctlz_i16(i16 %a) #1 {
    %ctz = call i16 @llvm.ctlz.i16(i16 %a, i1 false)
    ret i16 %ctz
  }

  define i16 @ctlz_zundef_i16(i16 %a) #1 {
    %ctz = call i16 @llvm.ctlz.i16(i16 %a, i1 true)
    ret i16 %ctz
  }

  define i16 @cttz_i16(i16 %a) #1 {
    %ctz = call i16 @llvm.cttz.i16(i16 %a, i1 false)
    ret i16 %ctz
  }

  define i16 @cttz_zundef_i16(i16 %a) #1 {
    %ctz = call i16 @llvm.cttz.i16(i16 %a, i1 true)
    ret i16 %ctz
  }

  define i32 @ctlz_i32(i32 %a) #1 {
    %ctz = call i32 @llvm.ctlz.i32(i32 %a, i1 false)
    ret i32 %ctz
  }

  define i32 @ctlz_zundef_i32(i32 %a) #1 {
    %ctz = call i32 @llvm.ctlz.i32(i32 %a, i1 true)
    ret i32 %ctz
  }

  define i32 @cttz_i32(i32 %a) #1 {
    %ctz = call i32 @llvm.cttz.i32(i32 %a, i1 false)
    ret i32 %ctz
  }

  define i32 @cttz_zundef_i32(i32 %a) #1 {
    %ctz = call i32 @llvm.cttz.i32(i32 %a, i1 true)
    ret i32 %ctz
  }

  define i64 @ctlz_i64(i64 %a) #1 {
    %ctz = call i64 @llvm.ctlz.i64(i64 %a, i1 false)
    ret i64 %ctz
  }

  define i64 @ctlz_zundef_i64(i64 %a) #1 {
    %ctz = call i64 @llvm.ctlz.i64(i64 %a, i1 true)
    ret i64 %ctz
  }

  define i64 @cttz_i64(i64 %a) #1 {
    %ctz = call i64 @llvm.cttz.i64(i64 %a, i1 false)
    ret i64 %ctz
  }

  define i64 @cttz_zundef_i64(i64 %a) #1 {
    %ctz = call i64 @llvm.cttz.i64(i64 %a, i1 true)
    ret i64 %ctz
  }

  attributes #0 = { nocallback nofree nosync nounwind readnone speculatable willreturn "target-features"="+nsa" }
  attributes #1 = { "target-features"="+nsa" }

...
---
name:            ctlz_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CTLZ %0(s8)
    %3:_(s32) = G_ANYEXT %2(s8)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_zundef_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_zundef_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CTLZ_ZERO_UNDEF %0(s8)
    %3:_(s32) = G_ANYEXT %2(s8)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 256
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[OR]], [[C1]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[OR]], [[C1]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C2]], [[CTLZ]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CTTZ %0(s8)
    %3:_(s32) = G_ANYEXT %2(s8)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_zundef_i8
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_zundef_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C1]], [[CTLZ]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s8) = G_TRUNC %1(s32)
    %2:_(s8) = G_CTTZ_ZERO_UNDEF %0(s8)
    %3:_(s32) = G_ANYEXT %2(s8)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CTLZ %0(s16)
    %3:_(s32) = G_ANYEXT %2(s16)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_zundef_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_zundef_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CTLZ_ZERO_UNDEF %0(s16)
    %3:_(s32) = G_ANYEXT %2(s16)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65536
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[OR]], [[C1]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[OR]], [[C1]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C2]], [[CTLZ]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CTTZ %0(s16)
    %3:_(s32) = G_ANYEXT %2(s16)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_zundef_i16
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_zundef_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C1]], [[CTLZ]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
    ; CHECK-NEXT: $a2 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:_(s32) = COPY $a2
    %0:_(s16) = G_TRUNC %1(s32)
    %2:_(s16) = G_CTTZ_ZERO_UNDEF %0(s16)
    %3:_(s32) = G_ANYEXT %2(s16)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[COPY]](s32)
    ; CHECK-NEXT: $a2 = COPY [[CTLZ]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CTLZ %0(s32)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_zundef_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: ctlz_zundef_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[COPY]](s32)
    ; CHECK-NEXT: $a2 = COPY [[CTLZ]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CTLZ_ZERO_UNDEF %0(s32)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C1]], [[CTLZ]]
    ; CHECK-NEXT: $a2 = COPY [[SUB]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CTTZ %0(s32)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            cttz_zundef_i32
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: cttz_zundef_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[AND]](s32)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C1]], [[CTLZ]]
    ; CHECK-NEXT: $a2 = COPY [[SUB]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CTTZ_ZERO_UNDEF %0(s32)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            ctlz_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: ctlz_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[COPY]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[CTLZ1:%[0-9]+]]:_(s32) = G_CTLZ [[COPY1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[ADD]], [[CTLZ1]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: $a3 = COPY [[C3]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CTLZ %0(s64)
    %4:_(s32), %5:_(s32) = G_UNMERGE_VALUES %3(s64)
    $a2 = COPY %4(s32)
    $a3 = COPY %5(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            ctlz_zundef_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: ctlz_zundef_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY1]](s32), [[C]]
    ; CHECK-NEXT: [[CTLZ:%[0-9]+]]:_(s32) = G_CTLZ [[COPY]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[CTLZ]], [[C1]]
    ; CHECK-NEXT: [[CTLZ1:%[0-9]+]]:_(s32) = G_CTLZ [[COPY1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[ADD]], [[CTLZ1]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: $a3 = COPY [[C3]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CTLZ_ZERO_UNDEF %0(s64)
    %4:_(s32), %5:_(s32) = G_UNMERGE_VALUES %3(s64)
    $a2 = COPY %4(s32)
    $a3 = COPY %5(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            cttz_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: cttz_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $a3 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: CALL0 &__ctzdi2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit-def $a2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[OR]](s32), [[C2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 64
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C4]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[C3]], [[COPY2]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: $a3 = COPY [[C5]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CTTZ %0(s64)
    %4:_(s32), %5:_(s32) = G_UNMERGE_VALUES %3(s64)
    $a2 = COPY %4(s32)
    $a3 = COPY %5(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            cttz_zundef_i64
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: cttz_zundef_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]](s32)
    ; CHECK-NEXT: $a3 = COPY [[COPY1]](s32)
    ; CHECK-NEXT: CALL0 &__ctzdi2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit-def $a2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $a2 = COPY [[COPY2]](s32)
    ; CHECK-NEXT: $a3 = COPY [[C]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %1:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %0:_(s64) = G_MERGE_VALUES %1(s32), %2(s32)
    %3:_(s64) = G_CTTZ_ZERO_UNDEF %0(s64)
    %4:_(s32), %5:_(s32) = G_UNMERGE_VALUES %3(s64)
    $a2 = COPY %4(s32)
    $a3 = COPY %5(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
