# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'jumptable.ll'
  source_filename = "jumptable.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare i32 @func(i32 noundef)

  define i32 @test(i32 %a) {
  entry:
    switch i32 %a, label %sw.default [
      i32 0, label %return
      i32 1, label %sw.bb1
      i32 2, label %sw.bb2
      i32 3, label %sw.bb3
      i32 4, label %sw.bb4
      i32 5, label %sw.bb5
      i32 6, label %sw.bb6
      i32 7, label %sw.bb7
      i32 8, label %sw.bb8
      i32 9, label %sw.bb9
      i32 10, label %sw.bb10
      i32 11, label %sw.bb11
      i32 12, label %sw.bb12
      i32 13, label %sw.bb13
      i32 14, label %sw.bb14
    ]

  sw.bb1:                                           ; preds = %entry
    %call = tail call i32 @func(i32 17)
    br label %return

  sw.bb2:                                           ; preds = %entry
    br label %return

  sw.bb3:                                           ; preds = %entry
    br label %return

  sw.bb4:                                           ; preds = %entry
    br label %return

  sw.bb5:                                           ; preds = %entry
    br label %return

  sw.bb6:                                           ; preds = %entry
    br label %return

  sw.bb7:                                           ; preds = %entry
    br label %return

  sw.bb8:                                           ; preds = %entry
    br label %return

  sw.bb9:                                           ; preds = %entry
    br label %return

  sw.bb10:                                          ; preds = %entry
    br label %return

  sw.bb11:                                          ; preds = %entry
    br label %return

  sw.bb12:                                          ; preds = %entry
    br label %return

  sw.bb13:                                          ; preds = %entry
    br label %return

  sw.bb14:                                          ; preds = %entry
    br label %return

  sw.default:                                       ; preds = %entry
    br label %return

  return:                                           ; preds = %sw.default, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %entry
    %retval.0 = phi i32 [ 8, %sw.default ], [ 15, %sw.bb14 ], [ -1, %sw.bb13 ], [ 144, %sw.bb12 ], [ 666, %sw.bb11 ], [ 700, %sw.bb10 ], [ 20, %sw.bb9 ], [ 18, %sw.bb8 ], [ 90, %sw.bb7 ], [ 100, %sw.bb6 ], [ 7, %sw.bb5 ], [ -92, %sw.bb4 ], [ 553, %sw.bb3 ], [ 28, %sw.bb2 ], [ %call, %sw.bb1 ], [ 5, %entry ]
    ret i32 %retval.0
  }

...
---
name:            test
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
jumpTable:
  kind:            block-address
  entries:
    - id:              0
      blocks:          [ '%bb.17', '%bb.2', '%bb.3', '%bb.4', '%bb.5',
                         '%bb.6', '%bb.7', '%bb.8', '%bb.9', '%bb.10',
                         '%bb.11', '%bb.12', '%bb.13', '%bb.14', '%bb.15' ]
body:             |
  ; CHECK-LABEL: name: test
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.16(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 14
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 17
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
  ; CHECK-NEXT:   [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 144
  ; CHECK-NEXT:   [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 666
  ; CHECK-NEXT:   [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 700
  ; CHECK-NEXT:   [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 20
  ; CHECK-NEXT:   [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 18
  ; CHECK-NEXT:   [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 90
  ; CHECK-NEXT:   [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 100
  ; CHECK-NEXT:   [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
  ; CHECK-NEXT:   [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 -92
  ; CHECK-NEXT:   [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 553
  ; CHECK-NEXT:   [[C15:%[0-9]+]]:_(s32) = G_CONSTANT i32 28
  ; CHECK-NEXT:   [[C16:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
  ; CHECK-NEXT:   [[C17:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[C17]]
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY2]]
  ; CHECK-NEXT:   [[C18:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C18]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.16
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.entry:
  ; CHECK-NEXT:   successors: %bb.17(0x08888889), %bb.2(0x08888889), %bb.3(0x08888889), %bb.4(0x08888889), %bb.5(0x08888889), %bb.6(0x08888889), %bb.7(0x08888889), %bb.8(0x08888889), %bb.9(0x08888889), %bb.10(0x08888889), %bb.11(0x08888889), %bb.12(0x08888889), %bb.13(0x08888889), %bb.14(0x08888889), %bb.15(0x08888889)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[JUMP_TABLE:%[0-9]+]]:_(p0) = G_JUMP_TABLE %jump-table.0
  ; CHECK-NEXT:   G_BRJT [[JUMP_TABLE]](p0), %jump-table.0, [[COPY1]](s32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.sw.bb1:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   $a2 = COPY [[C1]](s32)
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit-def $a2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3.sw.bb2:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4.sw.bb3:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5.sw.bb4:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6.sw.bb5:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.7.sw.bb6:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.8.sw.bb7:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.9.sw.bb8:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.10.sw.bb9:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.11.sw.bb10:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.12.sw.bb11:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.13.sw.bb12:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.14.sw.bb13:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.15.sw.bb14:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.16.sw.default:
  ; CHECK-NEXT:   successors: %bb.17(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   G_BR %bb.17
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.17.return:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:_(s32) = G_PHI [[C2]](s32), %bb.16, [[C3]](s32), %bb.15, [[C4]](s32), %bb.14, [[C5]](s32), %bb.13, [[C6]](s32), %bb.12, [[C7]](s32), %bb.11, [[C8]](s32), %bb.10, [[C9]](s32), %bb.9, [[C10]](s32), %bb.8, [[C11]](s32), %bb.7, [[C12]](s32), %bb.6, [[C13]](s32), %bb.5, [[C14]](s32), %bb.4, [[C15]](s32), %bb.3, [[COPY3]](s32), %bb.2, [[C16]](s32), %bb.1
  ; CHECK-NEXT:   $a2 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  bb.1.entry:
    successors: %bb.16(0x40000000), %bb.18(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %4:_(s32) = G_CONSTANT i32 14
    %9:_(s32) = G_CONSTANT i32 17
    %11:_(s32) = G_CONSTANT i32 8
    %12:_(s32) = G_CONSTANT i32 15
    %13:_(s32) = G_CONSTANT i32 -1
    %14:_(s32) = G_CONSTANT i32 144
    %15:_(s32) = G_CONSTANT i32 666
    %16:_(s32) = G_CONSTANT i32 700
    %17:_(s32) = G_CONSTANT i32 20
    %18:_(s32) = G_CONSTANT i32 18
    %19:_(s32) = G_CONSTANT i32 90
    %20:_(s32) = G_CONSTANT i32 100
    %21:_(s32) = G_CONSTANT i32 7
    %22:_(s32) = G_CONSTANT i32 -92
    %23:_(s32) = G_CONSTANT i32 553
    %24:_(s32) = G_CONSTANT i32 28
    %25:_(s32) = G_CONSTANT i32 5
    %1:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_SUB %0, %1
    %3:_(s32) = COPY %2(s32)
    %5:_(s32) = COPY %4(s32)
    %6:_(s1) = G_ICMP intpred(ugt), %3(s32), %5
    G_BRCOND %6(s1), %bb.16

  bb.18.entry:
    successors: %bb.17(0x08888889), %bb.2(0x08888889), %bb.3(0x08888889), %bb.4(0x08888889), %bb.5(0x08888889), %bb.6(0x08888889), %bb.7(0x08888889), %bb.8(0x08888889), %bb.9(0x08888889), %bb.10(0x08888889), %bb.11(0x08888889), %bb.12(0x08888889), %bb.13(0x08888889), %bb.14(0x08888889), %bb.15(0x08888889)

    %7:_(p0) = G_JUMP_TABLE %jump-table.0
    G_BRJT %7(p0), %jump-table.0, %3(s32)

  bb.2.sw.bb1:
    successors: %bb.17(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %9(s32)
    CALL0 @func, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit-def $a2
    %8:_(s32) = COPY $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.17

  bb.3.sw.bb2:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.4.sw.bb3:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.5.sw.bb4:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.6.sw.bb5:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.7.sw.bb6:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.8.sw.bb7:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.9.sw.bb8:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.10.sw.bb9:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.11.sw.bb10:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.12.sw.bb11:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.13.sw.bb12:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.14.sw.bb13:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.15.sw.bb14:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.16.sw.default:
    successors: %bb.17(0x80000000)

    G_BR %bb.17

  bb.17.return:
    %10:_(s32) = G_PHI %11(s32), %bb.16, %12(s32), %bb.15, %13(s32), %bb.14, %14(s32), %bb.13, %15(s32), %bb.12, %16(s32), %bb.11, %17(s32), %bb.10, %18(s32), %bb.9, %19(s32), %bb.8, %20(s32), %bb.7, %21(s32), %bb.6, %22(s32), %bb.5, %23(s32), %bb.4, %24(s32), %bb.3, %8(s32), %bb.2, %25(s32), %bb.18
    $a2 = COPY %10(s32)
    RETN implicit $a0, implicit $a2

...
