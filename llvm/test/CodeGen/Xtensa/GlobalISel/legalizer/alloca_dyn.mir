# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'alloca_dyn.ll'
  source_filename = "alloca_dyn.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare void @f(ptr)

  declare void @f2(i32, i32, i32, i32, i32, i32, ptr)

  define void @alloca_variable(i32 %size, i8 %x) {
    %p = alloca i8, i32 %size, align 1
    store i8 %x, ptr %p, align 1
    ret void
  }

  define void @alloca_variable_int(i32 %size, i32 %x) {
    %p = alloca i32, i32 %size, align 4
    store i32 %x, ptr %p, align 4
    ret void
  }

  define void @alloca_variable_call(i32 %size) {
    %p = alloca i8, i32 %size, align 1
    call void @f(ptr %p)
    ret void
  }

  define void @alloca_variable_call_stack(i32 %size) {
    %p = alloca i8, i32 %size, align 1
    call void @f2(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p)
    ret void
  }

...
---
name:            alloca_variable
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_variable
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = nuw G_ADD [[MUL]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -16
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $a1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY2]](p0)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[PTRTOINT]], [[AND]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[SUB]](s32)
    ; CHECK-NEXT: $a1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY3]](p0) :: (store (s8) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(s32) = COPY $a2
    %2:_(s32) = COPY $a3
    %1:_(s8) = G_TRUNC %2(s32)
    %4:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_MUL %0, %4
    %5:_(s32) = G_CONSTANT i32 15
    %6:_(s32) = nuw G_ADD %3, %5
    %7:_(s32) = G_CONSTANT i32 -16
    %8:_(s32) = G_AND %6, %7
    %9:_(p0) = G_DYN_STACKALLOC %8(s32), 1
    G_STORE %1(s8), %9(p0) :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_variable_int
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_variable_int
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = nuw G_ADD [[MUL]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -16
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C2]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $a1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY2]](p0)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[PTRTOINT]], [[AND]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[SUB]](s32)
    ; CHECK-NEXT: $a1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY3]](p0) :: (store (s32) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %3:_(s32) = G_CONSTANT i32 4
    %2:_(s32) = G_MUL %0, %3
    %4:_(s32) = G_CONSTANT i32 15
    %5:_(s32) = nuw G_ADD %2, %4
    %6:_(s32) = G_CONSTANT i32 -16
    %7:_(s32) = G_AND %5, %6
    %8:_(p0) = G_DYN_STACKALLOC %7(s32), 1
    G_STORE %1(s32), %8(p0) :: (store (s32) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_variable_call
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_call
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = nuw G_ADD [[MUL]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -16
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[PTRTOINT]], [[AND]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[SUB]](s32)
    ; CHECK-NEXT: $a1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY2]](p0)
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(s32) = COPY $a2
    %2:_(s32) = G_CONSTANT i32 1
    %1:_(s32) = G_MUL %0, %2
    %3:_(s32) = G_CONSTANT i32 15
    %4:_(s32) = nuw G_ADD %1, %3
    %5:_(s32) = G_CONSTANT i32 -16
    %6:_(s32) = G_AND %4, %5
    %7:_(p0) = G_DYN_STACKALLOC %6(s32), 1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %7(p0)
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_call_stack
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = nuw G_ADD [[MUL]], [[C2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 -16
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ADD]], [[C3]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $a1
    ; CHECK-NEXT: [[PTRTOINT:%[0-9]+]]:_(s32) = G_PTRTOINT [[COPY1]](p0)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[PTRTOINT]], [[AND]]
    ; CHECK-NEXT: [[INTTOPTR:%[0-9]+]]:_(p0) = G_INTTOPTR [[SUB]](s32)
    ; CHECK-NEXT: $a1 = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY [[INTTOPTR]](p0)
    ; CHECK-NEXT: ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(p0) = COPY $a1
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY3]], [[C4]](s32)
    ; CHECK-NEXT: G_STORE [[COPY2]](p0), [[PTR_ADD]](p0) :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = COPY [[C1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[C1]](s32)
    ; CHECK-NEXT: $a4 = COPY [[C1]](s32)
    ; CHECK-NEXT: $a5 = COPY [[C1]](s32)
    ; CHECK-NEXT: $a6 = COPY [[C1]](s32)
    ; CHECK-NEXT: $a7 = COPY [[C1]](s32)
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
    ; CHECK-NEXT: ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(s32) = COPY $a2
    %2:_(s32) = G_CONSTANT i32 1
    %8:_(s32) = G_CONSTANT i32 0
    %1:_(s32) = G_MUL %0, %2
    %3:_(s32) = G_CONSTANT i32 15
    %4:_(s32) = nuw G_ADD %1, %3
    %5:_(s32) = G_CONSTANT i32 -16
    %6:_(s32) = G_AND %4, %5
    %7:_(p0) = G_DYN_STACKALLOC %6(s32), 1
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    %9:_(p0) = COPY $a1
    %10:_(s32) = G_CONSTANT i32 0
    %11:_(p0) = G_PTR_ADD %9, %10(s32)
    G_STORE %7(p0), %11(p0) :: (store (p0) into stack)
    $a2 = COPY %8(s32)
    $a3 = COPY %8(s32)
    $a4 = COPY %8(s32)
    $a5 = COPY %8(s32)
    $a6 = COPY %8(s32)
    $a7 = COPY %8(s32)
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
