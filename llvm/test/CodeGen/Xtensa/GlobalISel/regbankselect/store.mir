# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=regbankselect -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'llvm/test/CodeGen/Xtensa/GlobalISel/legalizer/store.mir'
  source_filename = "store.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define void @store_i8(ptr %p, i8 %val) {
  entry:
    store i8 %val, ptr %p, align 1
    ret void
  }

  define void @store_i16(ptr %p, i16 %val) {
  entry:
    store i16 %val, ptr %p, align 2
    ret void
  }

  define void @store_i16_unaligned_1(ptr %p, i16 %val) {
  entry:
    store i16 %val, ptr %p, align 1
    ret void
  }

  define void @store_i32(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 4
    ret void
  }

  define void @store_i32_unaligned_1(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 1
    ret void
  }

  define void @store_i32_unaligned_2(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 2
    ret void
  }

  define void @store_i64(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 8
    ret void
  }

  define void @store_i64_unaligned_1(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 1
    ret void
  }

  define void @store_i64_unaligned_2(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 2
    ret void
  }

  define void @store_i64_unaligned_4(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 4
    ret void
  }

...
---
name:            store_i8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s8) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a3
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s16) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a3
    G_STORE %2(s32), %0(p0) :: (store (s16) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i16_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i16_unaligned_1
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gprb(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[AND]], [[C]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s8) into %ir.p)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a3
    %11:_(s32) = G_CONSTANT i32 8
    %15:_(s32) = G_CONSTANT i32 65535
    %12:_(s32) = G_AND %2, %15
    %13:_(s32) = G_LSHR %12, %11(s32)
    %7:_(s32) = G_CONSTANT i32 1
    %8:_(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %13(s32), %8(p0) :: (store (s8) into %ir.p + 1)
    RETN implicit $a0

...
---
name:            store_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %1:_(s32) = COPY $a3
    G_STORE %1(s32), %0(p0) :: (store (s32) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i32_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32_unaligned_1
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY2]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gprb(s32) = G_AND [[COPY2]], [[C3]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:gprb(s32) = G_LSHR [[AND]], [[C2]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store (s8) into %ir.p)
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD1]](p0) :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C6:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:gprb(s32) = G_AND [[LSHR]], [[C6]]
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:gprb(s32) = G_LSHR [[AND1]], [[C5]](s32)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD]], [[C7]](s32)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into %ir.p + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s32), [[PTR_ADD2]](p0) :: (store (s8) into %ir.p + 3)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = COPY %1(s32)
    %3:_(s32) = G_CONSTANT i32 16
    %4:_(s32) = G_LSHR %2, %3(s32)
    %5:_(s32) = G_CONSTANT i32 2
    %6:_(p0) = G_PTR_ADD %0, %5(s32)
    %25:_(s32) = G_CONSTANT i32 8
    %29:_(s32) = G_CONSTANT i32 65535
    %26:_(s32) = G_AND %2, %29
    %27:_(s32) = G_LSHR %26, %25(s32)
    %21:_(s32) = G_CONSTANT i32 1
    %22:_(p0) = G_PTR_ADD %0, %21(s32)
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %27(s32), %22(p0) :: (store (s8) into %ir.p + 1)
    %14:_(s32) = G_CONSTANT i32 8
    %31:_(s32) = G_CONSTANT i32 65535
    %15:_(s32) = G_AND %4, %31
    %16:_(s32) = G_LSHR %15, %14(s32)
    %10:_(s32) = G_CONSTANT i32 1
    %11:_(p0) = G_PTR_ADD %6, %10(s32)
    G_STORE %4(s32), %6(p0) :: (store (s8) into %ir.p + 2)
    G_STORE %16(s32), %11(p0) :: (store (s8) into %ir.p + 3)
    RETN implicit $a0

...
---
name:            store_i32_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32_unaligned_2
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY2]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store (s16) into %ir.p)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s16) into %ir.p + 2)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = COPY %1(s32)
    %3:_(s32) = G_CONSTANT i32 16
    %4:_(s32) = G_LSHR %2, %3(s32)
    %5:_(s32) = G_CONSTANT i32 2
    %6:_(p0) = G_PTR_ADD %0, %5(s32)
    G_STORE %2(s32), %0(p0) :: (store (s16) into %ir.p)
    G_STORE %4(s32), %6(p0) :: (store (s16) into %ir.p + 2)
    RETN implicit $a0

...
---
name:            store_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY $a5
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32) into %ir.p, align 8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[PTR_ADD]](p0) :: (store (s32) into %ir.p + 4, basealign 8)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a4
    %3:_(s32) = COPY $a5
    G_STORE %2(s32), %0(p0) :: (store (s32) into %ir.p, align 8)
    %7:_(s32) = G_CONSTANT i32 4
    %6:_(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %3(s32), %6(p0) :: (store (s32) into %ir.p + 4, basealign 8)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
  - { id: 36, class: _, preferred-register: '' }
  - { id: 37, class: _, preferred-register: '' }
  - { id: 38, class: _, preferred-register: '' }
  - { id: 39, class: _, preferred-register: '' }
  - { id: 40, class: _, preferred-register: '' }
  - { id: 41, class: _, preferred-register: '' }
  - { id: 42, class: _, preferred-register: '' }
  - { id: 43, class: _, preferred-register: '' }
  - { id: 44, class: _, preferred-register: '' }
  - { id: 45, class: _, preferred-register: '' }
  - { id: 46, class: _, preferred-register: '' }
  - { id: 47, class: _, preferred-register: '' }
  - { id: 48, class: _, preferred-register: '' }
  - { id: 49, class: _, preferred-register: '' }
  - { id: 50, class: _, preferred-register: '' }
  - { id: 51, class: _, preferred-register: '' }
  - { id: 52, class: _, preferred-register: '' }
  - { id: 53, class: _, preferred-register: '' }
  - { id: 54, class: _, preferred-register: '' }
  - { id: 55, class: _, preferred-register: '' }
  - { id: 56, class: _, preferred-register: '' }
  - { id: 57, class: _, preferred-register: '' }
  - { id: 58, class: _, preferred-register: '' }
  - { id: 59, class: _, preferred-register: '' }
  - { id: 60, class: _, preferred-register: '' }
  - { id: 61, class: _, preferred-register: '' }
  - { id: 62, class: _, preferred-register: '' }
  - { id: 63, class: _, preferred-register: '' }
  - { id: 64, class: _, preferred-register: '' }
  - { id: 65, class: _, preferred-register: '' }
  - { id: 66, class: _, preferred-register: '' }
  - { id: 67, class: _, preferred-register: '' }
  - { id: 68, class: _, preferred-register: '' }
  - { id: 69, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_1
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY $a5
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gprb(s32) = COPY [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY3]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gprb(s32) = G_AND [[COPY3]], [[C3]]
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:gprb(s32) = G_LSHR [[AND]], [[C2]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK-NEXT: G_STORE [[COPY3]](s32), [[COPY]](p0) :: (store (s8) into %ir.p)
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD1]](p0) :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C6:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:gprb(s32) = G_AND [[LSHR]], [[C6]]
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:gprb(s32) = G_LSHR [[AND1]], [[C5]](s32)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD]], [[C7]](s32)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s8) into %ir.p + 2)
    ; CHECK-NEXT: G_STORE [[LSHR2]](s32), [[PTR_ADD2]](p0) :: (store (s8) into %ir.p + 3)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD3:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C8]](s32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gprb(s32) = COPY [[COPY2]](s32)
    ; CHECK-NEXT: [[C9:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY4]], [[C9]](s32)
    ; CHECK-NEXT: [[C10:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD4:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD3]], [[C10]](s32)
    ; CHECK-NEXT: [[C11:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C12:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:gprb(s32) = G_AND [[COPY4]], [[C12]]
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:gprb(s32) = G_LSHR [[AND2]], [[C11]](s32)
    ; CHECK-NEXT: [[C13:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD5:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD3]], [[C13]](s32)
    ; CHECK-NEXT: G_STORE [[COPY4]](s32), [[PTR_ADD3]](p0) :: (store (s8) into %ir.p + 4)
    ; CHECK-NEXT: G_STORE [[LSHR4]](s32), [[PTR_ADD5]](p0) :: (store (s8) into %ir.p + 5)
    ; CHECK-NEXT: [[C14:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[C15:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:gprb(s32) = G_AND [[LSHR3]], [[C15]]
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:gprb(s32) = G_LSHR [[AND3]], [[C14]](s32)
    ; CHECK-NEXT: [[C16:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD6:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD4]], [[C16]](s32)
    ; CHECK-NEXT: G_STORE [[LSHR3]](s32), [[PTR_ADD4]](p0) :: (store (s8) into %ir.p + 6)
    ; CHECK-NEXT: G_STORE [[LSHR5]](s32), [[PTR_ADD6]](p0) :: (store (s8) into %ir.p + 7)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a4
    %3:_(s32) = COPY $a5
    %35:_(s32) = COPY %2(s32)
    %36:_(s32) = G_CONSTANT i32 16
    %37:_(s32) = G_LSHR %35, %36(s32)
    %38:_(s32) = G_CONSTANT i32 2
    %39:_(p0) = G_PTR_ADD %0, %38(s32)
    %58:_(s32) = G_CONSTANT i32 8
    %62:_(s32) = G_CONSTANT i32 65535
    %59:_(s32) = G_AND %35, %62
    %60:_(s32) = G_LSHR %59, %58(s32)
    %54:_(s32) = G_CONSTANT i32 1
    %55:_(p0) = G_PTR_ADD %0, %54(s32)
    G_STORE %35(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %60(s32), %55(p0) :: (store (s8) into %ir.p + 1)
    %47:_(s32) = G_CONSTANT i32 8
    %64:_(s32) = G_CONSTANT i32 65535
    %48:_(s32) = G_AND %37, %64
    %49:_(s32) = G_LSHR %48, %47(s32)
    %43:_(s32) = G_CONSTANT i32 1
    %44:_(p0) = G_PTR_ADD %39, %43(s32)
    G_STORE %37(s32), %39(p0) :: (store (s8) into %ir.p + 2)
    G_STORE %49(s32), %44(p0) :: (store (s8) into %ir.p + 3)
    %7:_(s32) = G_CONSTANT i32 4
    %6:_(p0) = G_PTR_ADD %0, %7(s32)
    %8:_(s32) = COPY %3(s32)
    %9:_(s32) = G_CONSTANT i32 16
    %10:_(s32) = G_LSHR %8, %9(s32)
    %11:_(s32) = G_CONSTANT i32 2
    %12:_(p0) = G_PTR_ADD %6, %11(s32)
    %31:_(s32) = G_CONSTANT i32 8
    %66:_(s32) = G_CONSTANT i32 65535
    %32:_(s32) = G_AND %8, %66
    %33:_(s32) = G_LSHR %32, %31(s32)
    %27:_(s32) = G_CONSTANT i32 1
    %28:_(p0) = G_PTR_ADD %6, %27(s32)
    G_STORE %8(s32), %6(p0) :: (store (s8) into %ir.p + 4)
    G_STORE %33(s32), %28(p0) :: (store (s8) into %ir.p + 5)
    %20:_(s32) = G_CONSTANT i32 8
    %68:_(s32) = G_CONSTANT i32 65535
    %21:_(s32) = G_AND %10, %68
    %22:_(s32) = G_LSHR %21, %20(s32)
    %16:_(s32) = G_CONSTANT i32 1
    %17:_(p0) = G_PTR_ADD %12, %16(s32)
    G_STORE %10(s32), %12(p0) :: (store (s8) into %ir.p + 6)
    G_STORE %22(s32), %17(p0) :: (store (s8) into %ir.p + 7)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_2
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY $a5
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gprb(s32) = COPY [[COPY1]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY3]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK-NEXT: G_STORE [[COPY3]](s32), [[COPY]](p0) :: (store (s16) into %ir.p)
    ; CHECK-NEXT: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store (s16) into %ir.p + 2)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gprb(s32) = COPY [[COPY2]](s32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:gprb(s32) = G_LSHR [[COPY4]], [[C3]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD1]], [[C4]](s32)
    ; CHECK-NEXT: G_STORE [[COPY4]](s32), [[PTR_ADD1]](p0) :: (store (s16) into %ir.p + 4)
    ; CHECK-NEXT: G_STORE [[LSHR1]](s32), [[PTR_ADD2]](p0) :: (store (s16) into %ir.p + 6)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a4
    %3:_(s32) = COPY $a5
    %13:_(s32) = COPY %2(s32)
    %14:_(s32) = G_CONSTANT i32 16
    %15:_(s32) = G_LSHR %13, %14(s32)
    %16:_(s32) = G_CONSTANT i32 2
    %17:_(p0) = G_PTR_ADD %0, %16(s32)
    G_STORE %13(s32), %0(p0) :: (store (s16) into %ir.p)
    G_STORE %15(s32), %17(p0) :: (store (s16) into %ir.p + 2)
    %7:_(s32) = G_CONSTANT i32 4
    %6:_(p0) = G_PTR_ADD %0, %7(s32)
    %8:_(s32) = COPY %3(s32)
    %9:_(s32) = G_CONSTANT i32 16
    %10:_(s32) = G_LSHR %8, %9(s32)
    %11:_(s32) = G_CONSTANT i32 2
    %12:_(p0) = G_PTR_ADD %6, %11(s32)
    G_STORE %8(s32), %6(p0) :: (store (s16) into %ir.p + 4)
    G_STORE %10(s32), %12(p0) :: (store (s16) into %ir.p + 6)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_4
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_4
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gprb(s32) = COPY $a5
    ; CHECK-NEXT: G_STORE [[COPY1]](s32), [[COPY]](p0) :: (store (s32) into %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: G_STORE [[COPY2]](s32), [[PTR_ADD]](p0) :: (store (s32) into %ir.p + 4)
    ; CHECK-NEXT: RETN implicit $a0
    %0:_(p0) = COPY $a2
    %2:_(s32) = COPY $a4
    %3:_(s32) = COPY $a5
    G_STORE %2(s32), %0(p0) :: (store (s32) into %ir.p)
    %7:_(s32) = G_CONSTANT i32 4
    %6:_(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %3(s32), %6(p0) :: (store (s32) into %ir.p + 4)
    RETN implicit $a0

...
