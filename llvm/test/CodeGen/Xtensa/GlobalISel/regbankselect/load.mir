# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=regbankselect -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'llvm/test/CodeGen/Xtensa/GlobalISel/legalizer/load.mir'
  source_filename = "load.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i8 @load_i8(ptr %p) {
  entry:
    %load = load i8, ptr %p, align 1
    ret i8 %load
  }

  define i16 @load_i16(ptr %p) {
  entry:
    %load = load i16, ptr %p, align 2
    ret i16 %load
  }

  define i16 @load_i16_unaligned_1(ptr %p) {
  entry:
    %load = load i16, ptr %p, align 1
    ret i16 %load
  }

  define i32 @load_i32(ptr %p) {
  entry:
    %load = load i32, ptr %p, align 4
    ret i32 %load
  }

  define i32 @load_i32_unaligned_1(ptr %p) {
  entry:
    %load = load i32, ptr %p, align 1
    ret i32 %load
  }

  define i32 @load_i32_unaligned_2(ptr %p) {
  entry:
    %load = load i32, ptr %p, align 2
    ret i32 %load
  }

  define i64 @load_i64(ptr %p) {
  entry:
    %load = load i64, ptr %p, align 8
    ret i64 %load
  }

  define i64 @load_i64_unaligned_1(ptr %p) {
  entry:
    %load = load i64, ptr %p, align 1
    ret i64 %load
  }

  define i64 @load_i64_unaligned_2(ptr %p) {
  entry:
    %load = load i64, ptr %p, align 2
    ret i64 %load
  }

  define i64 @load_i64_unaligned_4(ptr %p) {
  entry:
    %load = load i64, ptr %p, align 4
    ret i64 %load
  }

...
---
name:            load_i8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[COPY]](p0) :: (load (s8) from %ir.p)
    ; CHECK-NEXT: $a2 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %3:_(s32) = G_LOAD %0(p0) :: (load (s8) from %ir.p)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[COPY]](p0) :: (load (s16) from %ir.p)
    ; CHECK-NEXT: $a2 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %3:_(s32) = G_LOAD %0(p0) :: (load (s16) from %ir.p)
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i16_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i16_unaligned_1
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s8) from %ir.p + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gprb(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: $a2 = COPY [[OR]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %4:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s8) from %ir.p)
    %5:_(s32) = G_CONSTANT i32 1
    %6:_(p0) = G_PTR_ADD %0, %5(s32)
    %7:_(s32) = G_LOAD %6(p0) :: (load (s8) from %ir.p + 1)
    %8:_(s32) = G_CONSTANT i32 8
    %9:_(s32) = G_SHL %7, %8(s32)
    %3:_(s32) = G_OR %9, %4
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.p)
    ; CHECK-NEXT: $a2 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %1:_(s32) = G_LOAD %0(p0) :: (load (s32) from %ir.p)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i32_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i32_unaligned_1
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD1:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD]](p0) :: (load (s8) from %ir.p + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[ZEXTLOAD1]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gprb(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD2:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD1]](p0) :: (load (s8) from %ir.p + 2)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD1]], [[C3]](s32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD2]](p0) :: (load (s8) from %ir.p + 3)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:gprb(s32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:gprb(s32) = G_SHL [[OR1]], [[C5]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:gprb(s32) = G_OR [[SHL2]], [[OR]]
    ; CHECK-NEXT: $a2 = COPY [[OR2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %14:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s8) from %ir.p)
    %15:_(s32) = G_CONSTANT i32 1
    %16:_(p0) = G_PTR_ADD %0, %15(s32)
    %17:_(s32) = G_ZEXTLOAD %16(p0) :: (load (s8) from %ir.p + 1)
    %18:_(s32) = G_CONSTANT i32 8
    %19:_(s32) = G_SHL %17, %18(s32)
    %2:_(s32) = G_OR %19, %14
    %3:_(s32) = G_CONSTANT i32 2
    %4:_(p0) = G_PTR_ADD %0, %3(s32)
    %8:_(s32) = G_ZEXTLOAD %4(p0) :: (load (s8) from %ir.p + 2)
    %9:_(s32) = G_CONSTANT i32 1
    %10:_(p0) = G_PTR_ADD %4, %9(s32)
    %11:_(s32) = G_LOAD %10(p0) :: (load (s8) from %ir.p + 3)
    %12:_(s32) = G_CONSTANT i32 8
    %13:_(s32) = G_SHL %11, %12(s32)
    %5:_(s32) = G_OR %13, %8
    %6:_(s32) = G_CONSTANT i32 16
    %7:_(s32) = G_SHL %5, %6(s32)
    %1:_(s32) = G_OR %7, %2
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i32_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i32_unaligned_2
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s16) from %ir.p + 2)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gprb(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: $a2 = COPY [[OR]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(p0) = COPY $a2
    %2:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s16) from %ir.p)
    %3:_(s32) = G_CONSTANT i32 2
    %4:_(p0) = G_PTR_ADD %0, %3(s32)
    %5:_(s32) = G_LOAD %4(p0) :: (load (s16) from %ir.p + 2)
    %6:_(s32) = G_CONSTANT i32 16
    %7:_(s32) = G_SHL %5, %6(s32)
    %1:_(s32) = G_OR %7, %2
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            load_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i64
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.p, align 8)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s32) from %ir.p + 4, basealign 8)
    ; CHECK-NEXT: $a2 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $a3 = COPY [[LOAD1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %0:_(p0) = COPY $a2
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32) from %ir.p, align 8)
    %6:_(s32) = G_CONSTANT i32 4
    %5:_(p0) = G_PTR_ADD %0, %6(s32)
    %7:_(s32) = G_LOAD %5(p0) :: (load (s32) from %ir.p + 4, basealign 8)
    $a2 = COPY %4(s32)
    $a3 = COPY %7(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            load_i64_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
  - { id: 36, class: _, preferred-register: '' }
  - { id: 37, class: _, preferred-register: '' }
  - { id: 38, class: _, preferred-register: '' }
  - { id: 39, class: _, preferred-register: '' }
  - { id: 40, class: _, preferred-register: '' }
  - { id: 41, class: _, preferred-register: '' }
  - { id: 42, class: _, preferred-register: '' }
  - { id: 43, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i64_unaligned_1
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD1:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD]](p0) :: (load (s8) from %ir.p + 1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[ZEXTLOAD1]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gprb(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD2:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD1]](p0) :: (load (s8) from %ir.p + 2)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD1]], [[C3]](s32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD2]](p0) :: (load (s8) from %ir.p + 3)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:gprb(s32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:gprb(s32) = G_SHL [[OR1]], [[C5]](s32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:gprb(s32) = G_OR [[SHL2]], [[OR]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD3:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C6]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD3:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD3]](p0) :: (load (s8) from %ir.p + 4)
    ; CHECK-NEXT: [[C7:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD4:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD3]], [[C7]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD4:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD4]](p0) :: (load (s8) from %ir.p + 5)
    ; CHECK-NEXT: [[C8:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:gprb(s32) = G_SHL [[ZEXTLOAD4]], [[C8]](s32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:gprb(s32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CHECK-NEXT: [[C9:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD5:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD3]], [[C9]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD5:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD5]](p0) :: (load (s8) from %ir.p + 6)
    ; CHECK-NEXT: [[C10:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[PTR_ADD6:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD5]], [[C10]](s32)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD6]](p0) :: (load (s8) from %ir.p + 7)
    ; CHECK-NEXT: [[C11:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD1]], [[C11]](s32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:gprb(s32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CHECK-NEXT: [[C12:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:gprb(s32) = G_SHL [[OR4]], [[C12]](s32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:gprb(s32) = G_OR [[SHL5]], [[OR3]]
    ; CHECK-NEXT: $a2 = COPY [[OR2]](s32)
    ; CHECK-NEXT: $a3 = COPY [[OR5]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %0:_(p0) = COPY $a2
    %38:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s8) from %ir.p)
    %39:_(s32) = G_CONSTANT i32 1
    %40:_(p0) = G_PTR_ADD %0, %39(s32)
    %41:_(s32) = G_ZEXTLOAD %40(p0) :: (load (s8) from %ir.p + 1)
    %42:_(s32) = G_CONSTANT i32 8
    %43:_(s32) = G_SHL %41, %42(s32)
    %26:_(s32) = G_OR %43, %38
    %27:_(s32) = G_CONSTANT i32 2
    %28:_(p0) = G_PTR_ADD %0, %27(s32)
    %32:_(s32) = G_ZEXTLOAD %28(p0) :: (load (s8) from %ir.p + 2)
    %33:_(s32) = G_CONSTANT i32 1
    %34:_(p0) = G_PTR_ADD %28, %33(s32)
    %35:_(s32) = G_LOAD %34(p0) :: (load (s8) from %ir.p + 3)
    %36:_(s32) = G_CONSTANT i32 8
    %37:_(s32) = G_SHL %35, %36(s32)
    %29:_(s32) = G_OR %37, %32
    %30:_(s32) = G_CONSTANT i32 16
    %31:_(s32) = G_SHL %29, %30(s32)
    %4:_(s32) = G_OR %31, %26
    %6:_(s32) = G_CONSTANT i32 4
    %5:_(p0) = G_PTR_ADD %0, %6(s32)
    %20:_(s32) = G_ZEXTLOAD %5(p0) :: (load (s8) from %ir.p + 4)
    %21:_(s32) = G_CONSTANT i32 1
    %22:_(p0) = G_PTR_ADD %5, %21(s32)
    %23:_(s32) = G_ZEXTLOAD %22(p0) :: (load (s8) from %ir.p + 5)
    %24:_(s32) = G_CONSTANT i32 8
    %25:_(s32) = G_SHL %23, %24(s32)
    %8:_(s32) = G_OR %25, %20
    %9:_(s32) = G_CONSTANT i32 2
    %10:_(p0) = G_PTR_ADD %5, %9(s32)
    %14:_(s32) = G_ZEXTLOAD %10(p0) :: (load (s8) from %ir.p + 6)
    %15:_(s32) = G_CONSTANT i32 1
    %16:_(p0) = G_PTR_ADD %10, %15(s32)
    %17:_(s32) = G_LOAD %16(p0) :: (load (s8) from %ir.p + 7)
    %18:_(s32) = G_CONSTANT i32 8
    %19:_(s32) = G_SHL %17, %18(s32)
    %11:_(s32) = G_OR %19, %14
    %12:_(s32) = G_CONSTANT i32 16
    %13:_(s32) = G_SHL %11, %12(s32)
    %7:_(s32) = G_OR %13, %8
    $a2 = COPY %4(s32)
    $a3 = COPY %7(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            load_i64_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i64_unaligned_2
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s16) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s16) from %ir.p + 2)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD]], [[C1]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gprb(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD1:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: [[ZEXTLOAD1:%[0-9]+]]:gprb(s32) = G_ZEXTLOAD [[PTR_ADD1]](p0) :: (load (s16) from %ir.p + 4)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[PTR_ADD2:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[PTR_ADD1]], [[C3]](s32)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD2]](p0) :: (load (s16) from %ir.p + 6)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:gprb(s32) = G_SHL [[LOAD1]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:gprb(s32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CHECK-NEXT: $a2 = COPY [[OR]](s32)
    ; CHECK-NEXT: $a3 = COPY [[OR1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %0:_(p0) = COPY $a2
    %14:_(s32) = G_ZEXTLOAD %0(p0) :: (load (s16) from %ir.p)
    %15:_(s32) = G_CONSTANT i32 2
    %16:_(p0) = G_PTR_ADD %0, %15(s32)
    %17:_(s32) = G_LOAD %16(p0) :: (load (s16) from %ir.p + 2)
    %18:_(s32) = G_CONSTANT i32 16
    %19:_(s32) = G_SHL %17, %18(s32)
    %4:_(s32) = G_OR %19, %14
    %6:_(s32) = G_CONSTANT i32 4
    %5:_(p0) = G_PTR_ADD %0, %6(s32)
    %8:_(s32) = G_ZEXTLOAD %5(p0) :: (load (s16) from %ir.p + 4)
    %9:_(s32) = G_CONSTANT i32 2
    %10:_(p0) = G_PTR_ADD %5, %9(s32)
    %11:_(s32) = G_LOAD %10(p0) :: (load (s16) from %ir.p + 6)
    %12:_(s32) = G_CONSTANT i32 16
    %13:_(s32) = G_SHL %11, %12(s32)
    %7:_(s32) = G_OR %13, %8
    $a2 = COPY %4(s32)
    $a3 = COPY %7(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            load_i64_unaligned_4
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2

    ; CHECK-LABEL: name: load_i64_unaligned_4
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(p0) = COPY $a2
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:gprb(s32) = G_LOAD [[COPY]](p0) :: (load (s32) from %ir.p)
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[PTR_ADD:%[0-9]+]]:gprb(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[LOAD1:%[0-9]+]]:gprb(s32) = G_LOAD [[PTR_ADD]](p0) :: (load (s32) from %ir.p + 4)
    ; CHECK-NEXT: $a2 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $a3 = COPY [[LOAD1]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %0:_(p0) = COPY $a2
    %4:_(s32) = G_LOAD %0(p0) :: (load (s32) from %ir.p)
    %6:_(s32) = G_CONSTANT i32 4
    %5:_(p0) = G_PTR_ADD %0, %6(s32)
    %7:_(s32) = G_LOAD %5(p0) :: (load (s32) from %ir.p + 4)
    $a2 = COPY %4(s32)
    $a3 = COPY %7(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
