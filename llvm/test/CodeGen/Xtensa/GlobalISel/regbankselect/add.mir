# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=regbankselect -verify-machineinstrs %s -o - | FileCheck %s

---
|
  ; ModuleID = 'test.ll'
  source_filename = "test.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i32 @simple_add(i32 %a, i32 %b) {
  entry:
    %add = add nsw i32 %b, %a
    ret i32 %add
  }
---
name: simple_add
alignment: 4
exposesReturnsTwice: false
legalized: true
regBankSelected: false
selected: false
failedISel: false
tracksRegLiveness: true
hasWinCFI: false
callsEHReturn: false
callsUnwindInit: false
hasEHCatchret: false
hasEHScopes: false
hasEHFunclets: false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: "" }
  - { id: 1, class: _, preferred-register: "" }
  - { id: 2, class: _, preferred-register: "" }
liveins:
  - { reg: "$a2", virtual-reg: "" }
  - { reg: "$a3", virtual-reg: "" }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap: false
  hasPatchPoint: false
  stackSize: 0
  offsetAdjustment: 0
  maxAlignment: 1
  adjustsStack: false
  hasCalls: false
  stackProtector: ""
  functionContext: ""
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart: false
  hasMustTailInVarArgFunc: false
  hasTailCall: false
  localFrameSize: 0
  savePoint: ""
  restorePoint: ""
fixedStack: []
stack: []
callSites: []
debugValueSubstitutions: []
constants: []
machineFunctionInfo: {}
body: |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: simple_add
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gprb(s32) = COPY $a3
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:gprb(s32) = nsw G_ADD [[COPY1]], [[COPY]]
    ; CHECK-NEXT: $a2 = COPY [[ADD]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:_(s32) = COPY $a2
    %1:_(s32) = COPY $a3
    %2:_(s32) = nsw G_ADD %1, %0
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2
