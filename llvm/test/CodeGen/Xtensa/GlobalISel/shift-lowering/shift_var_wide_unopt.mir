# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=xtensa-shift-lowering -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'shift_var_wide.ll'
  source_filename = "shift_var_wide.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i33 @shl_i33(i33 %val, i33 %shamt) {
  entry:
    %shl = shl i33 %val, %shamt
    ret i33 %shl
  }

  define i64 @shl_i64(i64 %val, i64 %shamt) {
  entry:
    %shl = shl i64 %val, %shamt
    ret i64 %shl
  }

  define i33 @lshr_i33(i33 %val, i33 %shamt) {
  entry:
    %lshr = lshr i33 %val, %shamt
    ret i33 %lshr
  }

  define i64 @lshr_i64(i64 %val, i64 %shamt) {
  entry:
    %lshr = lshr i64 %val, %shamt
    ret i64 %lshr
  }

  define i33 @ashr_i33(i33 %val, i33 %shamt) {
  entry:
    %ashr = ashr i33 %val, %shamt
    ret i33 %ashr
  }

  define i64 @ashr_i64(i64 %val, i64 %shamt) {
  entry:
    %ashr = ashr i64 %val, %shamt
    ret i64 %ashr
  }

...
---
name:            shl_i33
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
  - { id: 36, class: _, preferred-register: '' }
  - { id: 37, class: _, preferred-register: '' }
  - { id: 38, class: _, preferred-register: '' }
  - { id: 39, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: shl_i33
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C]], [[COPY2]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[C2]], [[COPY2]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB1]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB3:%[0-9]+]]:_(s32) = G_SUB [[C3]], [[COPY2]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB3]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL1:%[0-9]+]]:gpr(s32) = SLL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SRL]], [[SLL1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB4:%[0-9]+]]:_(s32) = G_SUB [[C5]], [[SUB]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB4]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL2:%[0-9]+]]:gpr(s32) = SLL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C6]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[SLL]], [[C4]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C7]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND1]](s32), [[OR]], [[SLL2]]
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C8]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY1]], [[SELECT1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %5:_(s32) = COPY $a4
    %15:_(s32) = G_CONSTANT i32 32
    %18:_(s32) = G_SUB %5, %15
    %19:_(s32) = G_SUB %15, %5
    %20:_(s32) = G_CONSTANT i32 0
    %36:_(s32) = G_ICMP intpred(ult), %5(s32), %15
    %35:_(s32) = G_ICMP intpred(eq), %5(s32), %20
    %23:_(s32) = G_SHL %2, %5(s32)
    %24:_(s32) = G_LSHR %2, %19(s32)
    %25:_(s32) = G_SHL %3, %5(s32)
    %26:_(s32) = G_OR %24, %25
    %27:_(s32) = G_CONSTANT i32 0
    %28:_(s32) = G_SHL %2, %18(s32)
    %37:_(s32) = G_CONSTANT i32 1
    %34:_(s32) = G_AND %36, %37
    %29:_(s32) = G_SELECT %34(s32), %23, %27
    %38:_(s32) = G_CONSTANT i32 1
    %33:_(s32) = G_AND %36, %38
    %30:_(s32) = G_SELECT %33(s32), %26, %28
    %39:_(s32) = G_CONSTANT i32 1
    %32:_(s32) = G_AND %35, %39
    %31:_(s32) = G_SELECT %32(s32), %3, %30
    $a2 = COPY %29(s32)
    $a3 = COPY %31(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            shl_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: shl_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C]], [[COPY2]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[C2]], [[COPY2]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB1]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB3:%[0-9]+]]:_(s32) = G_SUB [[C3]], [[COPY2]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB3]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL1:%[0-9]+]]:gpr(s32) = SLL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SRL]], [[SLL1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB4:%[0-9]+]]:_(s32) = G_SUB [[C5]], [[SUB]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB4]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL2:%[0-9]+]]:gpr(s32) = SLL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C6]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[SLL]], [[C4]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C7]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND1]](s32), [[OR]], [[SLL2]]
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C8]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[COPY1]], [[SELECT1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %4:_(s32) = COPY $a4
    %10:_(s32) = G_CONSTANT i32 32
    %13:_(s32) = G_SUB %4, %10
    %14:_(s32) = G_SUB %10, %4
    %15:_(s32) = G_CONSTANT i32 0
    %31:_(s32) = G_ICMP intpred(ult), %4(s32), %10
    %30:_(s32) = G_ICMP intpred(eq), %4(s32), %15
    %18:_(s32) = G_SHL %2, %4(s32)
    %19:_(s32) = G_LSHR %2, %14(s32)
    %20:_(s32) = G_SHL %3, %4(s32)
    %21:_(s32) = G_OR %19, %20
    %22:_(s32) = G_CONSTANT i32 0
    %23:_(s32) = G_SHL %2, %13(s32)
    %32:_(s32) = G_CONSTANT i32 1
    %29:_(s32) = G_AND %31, %32
    %24:_(s32) = G_SELECT %29(s32), %18, %22
    %33:_(s32) = G_CONSTANT i32 1
    %28:_(s32) = G_AND %31, %33
    %25:_(s32) = G_SELECT %28(s32), %21, %23
    %34:_(s32) = G_CONSTANT i32 1
    %27:_(s32) = G_AND %30, %34
    %26:_(s32) = G_SELECT %27(s32), %3, %25
    $a2 = COPY %24(s32)
    $a3 = COPY %26(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            lshr_i33
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
  - { id: 36, class: _, preferred-register: '' }
  - { id: 37, class: _, preferred-register: '' }
  - { id: 38, class: _, preferred-register: '' }
  - { id: 39, class: _, preferred-register: '' }
  - { id: 40, class: _, preferred-register: '' }
  - { id: 41, class: _, preferred-register: '' }
  - { id: 42, class: _, preferred-register: '' }
  - { id: 43, class: _, preferred-register: '' }
  - { id: 44, class: _, preferred-register: '' }
  - { id: 45, class: _, preferred-register: '' }
  - { id: 46, class: _, preferred-register: '' }
  - { id: 47, class: _, preferred-register: '' }
  - { id: 48, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: lshr_i33
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gpr(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:gpr(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C2]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C2]], [[COPY2]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C2]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C3]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[AND1]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL1:%[0-9]+]]:gpr(s32) = SRL [[AND]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[AND1]](s32), implicit $sar
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SRL1]], [[SLL]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL2:%[0-9]+]]:gpr(s32) = SRL [[AND1]](s32), implicit $sar
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C5]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[OR]], [[SRL2]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C6]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND3]](s32), [[AND]], [[SELECT]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C7]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND4]](s32), [[SRL]], [[C4]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %5:_(s32) = COPY $a4
    %47:_(s32) = G_CONSTANT i32 -1
    %48:_(s32) = G_CONSTANT i32 1
    %45:_(s32) = G_AND %2, %47
    %46:_(s32) = G_AND %3, %48
    %15:_(s32) = G_CONSTANT i32 32
    %18:_(s32) = G_SUB %5, %15
    %19:_(s32) = G_SUB %15, %5
    %20:_(s32) = G_CONSTANT i32 0
    %36:_(s32) = G_ICMP intpred(ult), %5(s32), %15
    %35:_(s32) = G_ICMP intpred(eq), %5(s32), %20
    %23:_(s32) = G_LSHR %46, %5(s32)
    %24:_(s32) = G_LSHR %45, %5(s32)
    %25:_(s32) = G_SHL %46, %19(s32)
    %26:_(s32) = G_OR %24, %25
    %27:_(s32) = G_CONSTANT i32 0
    %28:_(s32) = G_LSHR %46, %18(s32)
    %37:_(s32) = G_CONSTANT i32 1
    %34:_(s32) = G_AND %36, %37
    %29:_(s32) = G_SELECT %34(s32), %26, %28
    %38:_(s32) = G_CONSTANT i32 1
    %33:_(s32) = G_AND %35, %38
    %30:_(s32) = G_SELECT %33(s32), %45, %29
    %39:_(s32) = G_CONSTANT i32 1
    %32:_(s32) = G_AND %36, %39
    %31:_(s32) = G_SELECT %32(s32), %23, %27
    $a2 = COPY %30(s32)
    $a3 = COPY %31(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            lshr_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: lshr_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C]], [[COPY2]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL1:%[0-9]+]]:gpr(s32) = SRL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SRL1]], [[SLL]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL2:%[0-9]+]]:gpr(s32) = SRL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C3]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[OR]], [[SRL2]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND1]](s32), [[COPY]], [[SELECT]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C5]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[SRL]], [[C2]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %4:_(s32) = COPY $a4
    %10:_(s32) = G_CONSTANT i32 32
    %13:_(s32) = G_SUB %4, %10
    %14:_(s32) = G_SUB %10, %4
    %15:_(s32) = G_CONSTANT i32 0
    %31:_(s32) = G_ICMP intpred(ult), %4(s32), %10
    %30:_(s32) = G_ICMP intpred(eq), %4(s32), %15
    %18:_(s32) = G_LSHR %3, %4(s32)
    %19:_(s32) = G_LSHR %2, %4(s32)
    %20:_(s32) = G_SHL %3, %14(s32)
    %21:_(s32) = G_OR %19, %20
    %22:_(s32) = G_CONSTANT i32 0
    %23:_(s32) = G_LSHR %3, %13(s32)
    %32:_(s32) = G_CONSTANT i32 1
    %29:_(s32) = G_AND %31, %32
    %24:_(s32) = G_SELECT %29(s32), %21, %23
    %33:_(s32) = G_CONSTANT i32 1
    %28:_(s32) = G_AND %30, %33
    %25:_(s32) = G_SELECT %28(s32), %2, %24
    %34:_(s32) = G_CONSTANT i32 1
    %27:_(s32) = G_AND %31, %34
    %26:_(s32) = G_SELECT %27(s32), %18, %22
    $a2 = COPY %25(s32)
    $a3 = COPY %26(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            ashr_i33
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
  - { id: 36, class: _, preferred-register: '' }
  - { id: 37, class: _, preferred-register: '' }
  - { id: 38, class: _, preferred-register: '' }
  - { id: 39, class: _, preferred-register: '' }
  - { id: 40, class: _, preferred-register: '' }
  - { id: 41, class: _, preferred-register: '' }
  - { id: 42, class: _, preferred-register: '' }
  - { id: 43, class: _, preferred-register: '' }
  - { id: 44, class: _, preferred-register: '' }
  - { id: 45, class: _, preferred-register: '' }
  - { id: 46, class: _, preferred-register: '' }
  - { id: 47, class: _, preferred-register: '' }
  - { id: 48, class: _, preferred-register: '' }
  - { id: 49, class: _, preferred-register: '' }
  - { id: 50, class: _, preferred-register: '' }
  - { id: 51, class: _, preferred-register: '' }
  - { id: 52, class: _, preferred-register: '' }
  - { id: 53, class: _, preferred-register: '' }
  - { id: 54, class: _, preferred-register: '' }
  - { id: 55, class: _, preferred-register: '' }
  - { id: 56, class: _, preferred-register: '' }
  - { id: 57, class: _, preferred-register: '' }
  - { id: 58, class: _, preferred-register: '' }
  - { id: 59, class: _, preferred-register: '' }
  - { id: 60, class: _, preferred-register: '' }
  - { id: 61, class: _, preferred-register: '' }
  - { id: 62, class: _, preferred-register: '' }
  - { id: 63, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: ashr_i33
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C1]](s32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C2]](s32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL1]], [[LSHR]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[SHL]], [[C3]](s32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[OR]], [[C4]](s32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:gpr(s32) = G_OR [[LSHR1]], [[SHL2]]
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:gpr(s32) = G_ASHR [[OR]], [[C3]](s32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C5]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C5]], [[COPY2]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C5]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C6]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRA:%[0-9]+]]:gpr(s32) = SRA [[ASHR]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[OR1]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[ASHR]](s32), implicit $sar
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[SRL]], [[SLL]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[ASHR]], [[C7]](s32)
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRA1:%[0-9]+]]:gpr(s32) = SRA [[ASHR]](s32), implicit $sar
    ; CHECK-NEXT: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C8]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[OR2]], [[SRA1]]
    ; CHECK-NEXT: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C9]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND1]](s32), [[OR1]], [[SELECT]]
    ; CHECK-NEXT: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C10]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[SRA]], [[ASHR1]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %5:_(s32) = COPY $a4
    %55:_(s32) = G_CONSTANT i32 31
    %56:_(s32) = G_SHL %2, %55(s32)
    %57:_(s32) = G_CONSTANT i32 31
    %58:_(s32) = G_SHL %3, %57(s32)
    %59:_(s32) = G_CONSTANT i32 1
    %60:_(s32) = G_LSHR %2, %59(s32)
    %61:_(s32) = G_OR %58, %60
    %46:_(s32) = G_CONSTANT i32 31
    %47:_(s32) = G_LSHR %56, %46(s32)
    %48:_(s32) = G_CONSTANT i32 1
    %49:_(s32) = G_SHL %61, %48(s32)
    %50:_(s32) = G_OR %47, %49
    %51:_(s32) = G_ASHR %61, %46(s32)
    %15:_(s32) = G_CONSTANT i32 32
    %18:_(s32) = G_SUB %5, %15
    %19:_(s32) = G_SUB %15, %5
    %20:_(s32) = G_CONSTANT i32 0
    %37:_(s32) = G_ICMP intpred(ult), %5(s32), %15
    %36:_(s32) = G_ICMP intpred(eq), %5(s32), %20
    %23:_(s32) = G_ASHR %51, %5(s32)
    %24:_(s32) = G_LSHR %50, %5(s32)
    %25:_(s32) = G_SHL %51, %19(s32)
    %26:_(s32) = G_OR %24, %25
    %27:_(s32) = G_CONSTANT i32 31
    %28:_(s32) = G_ASHR %51, %27(s32)
    %29:_(s32) = G_ASHR %51, %18(s32)
    %38:_(s32) = G_CONSTANT i32 1
    %35:_(s32) = G_AND %37, %38
    %30:_(s32) = G_SELECT %35(s32), %26, %29
    %39:_(s32) = G_CONSTANT i32 1
    %34:_(s32) = G_AND %36, %39
    %31:_(s32) = G_SELECT %34(s32), %50, %30
    %40:_(s32) = G_CONSTANT i32 1
    %33:_(s32) = G_AND %37, %40
    %32:_(s32) = G_SELECT %33(s32), %23, %28
    $a2 = COPY %31(s32)
    $a3 = COPY %32(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            ashr_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: _, preferred-register: '' }
  - { id: 22, class: _, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: _, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: _, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
  - { id: 33, class: _, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: ashr_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr(s32) = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr(s32) = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY2]], [[C]]
    ; CHECK-NEXT: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C]], [[COPY2]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY2]](s32), [[C]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C1]]
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRA:%[0-9]+]]:gpr(s32) = SRA [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRL:%[0-9]+]]:gpr(s32) = SRL [[COPY]](s32), implicit $sar
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[COPY2]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SLL:%[0-9]+]]:gpr(s32) = SLL [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[SRL]], [[SLL]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY1]], [[C2]](s32)
    ; CHECK-NEXT: G_XTENSA_SET_SAR [[SUB]](s32), implicit-def $sar
    ; CHECK-NEXT: [[SRA1:%[0-9]+]]:gpr(s32) = SRA [[COPY1]](s32), implicit $sar
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C3]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s32), [[OR]], [[SRA1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[AND1]](s32), [[COPY]], [[SELECT]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C5]]
    ; CHECK-NEXT: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[AND2]](s32), [[SRA]], [[ASHR]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT1]](s32)
    ; CHECK-NEXT: $a3 = COPY [[SELECT2]](s32)
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:_(s32) = COPY $a2
    %3:_(s32) = COPY $a3
    %4:_(s32) = COPY $a4
    %10:_(s32) = G_CONSTANT i32 32
    %13:_(s32) = G_SUB %4, %10
    %14:_(s32) = G_SUB %10, %4
    %15:_(s32) = G_CONSTANT i32 0
    %32:_(s32) = G_ICMP intpred(ult), %4(s32), %10
    %31:_(s32) = G_ICMP intpred(eq), %4(s32), %15
    %18:_(s32) = G_ASHR %3, %4(s32)
    %19:_(s32) = G_LSHR %2, %4(s32)
    %20:_(s32) = G_SHL %3, %14(s32)
    %21:_(s32) = G_OR %19, %20
    %22:_(s32) = G_CONSTANT i32 31
    %23:_(s32) = G_ASHR %3, %22(s32)
    %24:_(s32) = G_ASHR %3, %13(s32)
    %33:_(s32) = G_CONSTANT i32 1
    %30:_(s32) = G_AND %32, %33
    %25:_(s32) = G_SELECT %30(s32), %21, %24
    %34:_(s32) = G_CONSTANT i32 1
    %29:_(s32) = G_AND %31, %34
    %26:_(s32) = G_SELECT %29(s32), %2, %25
    %35:_(s32) = G_CONSTANT i32 1
    %28:_(s32) = G_AND %32, %35
    %27:_(s32) = G_SELECT %28(s32), %18, %23
    $a2 = COPY %26(s32)
    $a3 = COPY %27(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
