; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i1 @phi_i1(i1 %cnd, i1 %a, i1 %b) {
; OPT-LABEL: phi_i1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    extui a3, a5, 0, 1
; OPT-NEXT:    bnez a3, .LBB0_2
; OPT-NEXT:    j .LBB0_1
; OPT-NEXT:  .LBB0_1: # %cond.false
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:  .LBB0_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_i1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -12
; UNOPT-NEXT:    s32i a3, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB0_2
; UNOPT-NEXT:    j .LBB0_3
; UNOPT-NEXT:  .LBB0_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB0_4
; UNOPT-NEXT:  .LBB0_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB0_4
; UNOPT-NEXT:  .LBB0_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 12
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i1 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i1 %cond
}

define i8 @phi_i8(i1 %cnd, i8 %a, i8 %b) {
; OPT-LABEL: phi_i8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    extui a3, a5, 0, 1
; OPT-NEXT:    bnez a3, .LBB1_2
; OPT-NEXT:    j .LBB1_1
; OPT-NEXT:  .LBB1_1: # %cond.false
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:  .LBB1_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_i8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -12
; UNOPT-NEXT:    s32i a3, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB1_2
; UNOPT-NEXT:    j .LBB1_3
; UNOPT-NEXT:  .LBB1_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB1_4
; UNOPT-NEXT:  .LBB1_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB1_4
; UNOPT-NEXT:  .LBB1_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 12
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i8 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i8 %cond
}

define i16 @phi_i16(i1 %cnd, i16 %a, i16 %b) {
; OPT-LABEL: phi_i16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    extui a3, a5, 0, 1
; OPT-NEXT:    bnez a3, .LBB2_2
; OPT-NEXT:    j .LBB2_1
; OPT-NEXT:  .LBB2_1: # %cond.false
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:  .LBB2_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_i16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -12
; UNOPT-NEXT:    s32i a3, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB2_2
; UNOPT-NEXT:    j .LBB2_3
; UNOPT-NEXT:  .LBB2_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB2_4
; UNOPT-NEXT:  .LBB2_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB2_4
; UNOPT-NEXT:  .LBB2_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 12
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i16 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i16 %cond
}

define i32 @phi_i32(i1 %cnd, i32 %a, i32 %b) {
; OPT-LABEL: phi_i32:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    extui a3, a5, 0, 1
; OPT-NEXT:    bnez a3, .LBB3_2
; OPT-NEXT:    j .LBB3_1
; OPT-NEXT:  .LBB3_1: # %cond.false
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:  .LBB3_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_i32:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -12
; UNOPT-NEXT:    s32i a3, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB3_2
; UNOPT-NEXT:    j .LBB3_3
; UNOPT-NEXT:  .LBB3_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB3_4
; UNOPT-NEXT:  .LBB3_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB3_4
; UNOPT-NEXT:  .LBB3_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 12
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i32 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i32 %cond
}

define i64 @phi_i64(i1 %cnd, i64 %a, i64 %b) {
; OPT-LABEL: phi_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a8, a2
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    extui a4, a8, 0, 1
; OPT-NEXT:    bnez a4, .LBB4_2
; OPT-NEXT:    j .LBB4_1
; OPT-NEXT:  .LBB4_1: # %cond.false
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    mov.n a3, a7
; OPT-NEXT:  .LBB4_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -24
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a5, a1, 12 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a6, a1, 16 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a7, a1, 20 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB4_2
; UNOPT-NEXT:    j .LBB4_3
; UNOPT-NEXT:  .LBB4_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 12 # 4-byte Folded Reload
; UNOPT-NEXT:    l32i a3, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a3, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a2, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB4_4
; UNOPT-NEXT:  .LBB4_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 20 # 4-byte Folded Reload
; UNOPT-NEXT:    l32i a3, a1, 16 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a3, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a2, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB4_4
; UNOPT-NEXT:  .LBB4_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    l32i a3, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 24
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i64 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i64 %cond
}

define ptr @phi_ptr(i1 %cnd, ptr %a, ptr %b) {
; OPT-LABEL: phi_ptr:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    extui a3, a5, 0, 1
; OPT-NEXT:    bnez a3, .LBB5_2
; OPT-NEXT:    j .LBB5_1
; OPT-NEXT:  .LBB5_1: # %cond.false
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:  .LBB5_2: # %cond.end
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: phi_ptr:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -12
; UNOPT-NEXT:    s32i a3, a1, 4 # 4-byte Folded Spill
; UNOPT-NEXT:    s32i a4, a1, 8 # 4-byte Folded Spill
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    bnez a2, .LBB5_2
; UNOPT-NEXT:    j .LBB5_3
; UNOPT-NEXT:  .LBB5_2: # %cond.true
; UNOPT-NEXT:    l32i a2, a1, 4 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB5_4
; UNOPT-NEXT:  .LBB5_3: # %cond.false
; UNOPT-NEXT:    l32i a2, a1, 8 # 4-byte Folded Reload
; UNOPT-NEXT:    s32i a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    j .LBB5_4
; UNOPT-NEXT:  .LBB5_4: # %cond.end
; UNOPT-NEXT:    l32i a2, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 12
; UNOPT-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi ptr [ %a, %cond.true ], [ %b, %cond.false ]
  ret ptr %cond
}
