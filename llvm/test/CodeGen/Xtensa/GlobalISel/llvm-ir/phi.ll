; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i1 @phi_i1(i1 %cnd, i1 %a, i1 %b) {
; CHECK-LABEL: phi_i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    extui a3, a5, 0, 1
; CHECK-NEXT:    bnez a3, .LBB0_2
; CHECK-NEXT:    j .LBB0_1
; CHECK-NEXT:  .LBB0_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:  .LBB0_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i1 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i1 %cond
}

define i8 @phi_i8(i1 %cnd, i8 %a, i8 %b) {
; CHECK-LABEL: phi_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    extui a3, a5, 0, 1
; CHECK-NEXT:    bnez a3, .LBB1_2
; CHECK-NEXT:    j .LBB1_1
; CHECK-NEXT:  .LBB1_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:  .LBB1_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i8 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i8 %cond
}

define i16 @phi_i16(i1 %cnd, i16 %a, i16 %b) {
; CHECK-LABEL: phi_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    extui a3, a5, 0, 1
; CHECK-NEXT:    bnez a3, .LBB2_2
; CHECK-NEXT:    j .LBB2_1
; CHECK-NEXT:  .LBB2_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:  .LBB2_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i16 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i16 %cond
}

define i32 @phi_i32(i1 %cnd, i32 %a, i32 %b) {
; CHECK-LABEL: phi_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    extui a3, a5, 0, 1
; CHECK-NEXT:    bnez a3, .LBB3_2
; CHECK-NEXT:    j .LBB3_1
; CHECK-NEXT:  .LBB3_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:  .LBB3_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i32 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i32 %cond
}

define i64 @phi_i64(i1 %cnd, i64 %a, i64 %b) {
; CHECK-LABEL: phi_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a8, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    mov.n a3, a5
; CHECK-NEXT:    extui a4, a8, 0, 1
; CHECK-NEXT:    bnez a4, .LBB4_2
; CHECK-NEXT:    j .LBB4_1
; CHECK-NEXT:  .LBB4_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a6
; CHECK-NEXT:    mov.n a3, a7
; CHECK-NEXT:  .LBB4_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi i64 [ %a, %cond.true ], [ %b, %cond.false ]
  ret i64 %cond
}

define ptr @phi_ptr(i1 %cnd, ptr %a, ptr %b) {
; CHECK-LABEL: phi_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    extui a3, a5, 0, 1
; CHECK-NEXT:    bnez a3, .LBB5_2
; CHECK-NEXT:    j .LBB5_1
; CHECK-NEXT:  .LBB5_1: # %cond.false
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:  .LBB5_2: # %cond.end
; CHECK-NEXT:    ret.n
entry:
  br i1 %cnd, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  br label %cond.end

cond.end:
  %cond = phi ptr [ %a, %cond.true ], [ %b, %cond.false ]
  ret ptr %cond
}
