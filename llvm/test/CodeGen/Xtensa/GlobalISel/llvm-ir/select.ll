; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i1 @select_i1(i1 %val, i1 %a, i1 %b) {
; OPT-LABEL: select_i1:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    moveqz a3, a4, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: select_i1:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    addi a5, a1, 0
; UNOPT-NEXT:    s32i a2, a5, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    addi a3, a1, 0
; UNOPT-NEXT:    l32i a3, a3, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a3, a3, 0, 1
; UNOPT-NEXT:    moveqz a2, a4, a3
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
  %select = select i1 %val, i1 %a, i1 %b
  ret i1 %select
}

define i8 @select_i8(i1 %val, i8 %a, i8 %b) {
; OPT-LABEL: select_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    moveqz a3, a4, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: select_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    addi a5, a1, 0
; UNOPT-NEXT:    s32i a2, a5, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    addi a3, a1, 0
; UNOPT-NEXT:    l32i a3, a3, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a3, a3, 0, 1
; UNOPT-NEXT:    moveqz a2, a4, a3
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
  %select = select i1 %val, i8 %a, i8 %b
  ret i8 %select
}

define i16 @select_i16(i1 %val, i16 %a, i16 %b) {
; OPT-LABEL: select_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    moveqz a3, a4, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: select_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    addi a5, a1, 0
; UNOPT-NEXT:    s32i a2, a5, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    addi a3, a1, 0
; UNOPT-NEXT:    l32i a3, a3, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a3, a3, 0, 1
; UNOPT-NEXT:    moveqz a2, a4, a3
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
  %select = select i1 %val, i16 %a, i16 %b
  ret i16 %select
}

define i32 @select_i32(i1 %val, i32 %a, i32 %b) {
; OPT-LABEL: select_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    moveqz a3, a4, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: select_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    addi a5, a1, 0
; UNOPT-NEXT:    s32i a2, a5, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    addi a3, a1, 0
; UNOPT-NEXT:    l32i a3, a3, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a3, a3, 0, 1
; UNOPT-NEXT:    moveqz a2, a4, a3
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
  %select = select i1 %val, i32 %a, i32 %b
  ret i32 %select
}

define ptr @select_ptr(i1 %val, ptr %a, ptr %b) {
; OPT-LABEL: select_ptr:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    moveqz a3, a4, a2
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: select_ptr:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    addi a5, a1, 0
; UNOPT-NEXT:    s32i a2, a5, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    addi a3, a1, 0
; UNOPT-NEXT:    l32i a3, a3, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a3, a3, 0, 1
; UNOPT-NEXT:    moveqz a2, a4, a3
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
  %select = select i1 %val, ptr %a, ptr %b
  ret ptr %select
}
