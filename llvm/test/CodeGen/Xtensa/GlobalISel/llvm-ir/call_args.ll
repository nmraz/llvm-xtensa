; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

declare void @reg_args_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6)
declare void @reg_arg_i1(i1 %arg1)
declare void @reg_arg_i8(i8 %arg1)
declare void @reg_arg_i16(i16 %arg1)
declare void @reg_arg_i64(i64 %arg1)
declare void @reg_arg_i64_packed(i32 %arg1, i32 %arg2, i64 %arg3)
declare void @reg_arg_i64_aligned(i32 %arg1, i64 %arg2)
declare void @mixed_reg_args(i32 %arg1, i1 %arg2, i64 %arg3, i8 %arg4, i16 %arg5)
declare void @stack_arg_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
declare void @stack_arg_i1(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7)
declare void @stack_arg_i8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i8 %arg7)
declare void @stack_arg_i16(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7)
declare void @stack_arg_i64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i64 %arg7)
declare void @stack_arg_i64_reg_unaligned(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i64 %arg6)
declare void @stack_arg_i64_aligned(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i64 %arg8)
declare void @mixed_reg_stack_args(i32 %arg1, i1 %arg2, i8 %arg3, i64 %arg4, i16 %arg5)
declare void @mixed_stack_args(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7, i8 %arg8, i64 %arg9)

define void @call_simple_reg_args() {
; OPT-LABEL: call_simple_reg_args:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 reg_args_i32
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    call0 reg_arg_i1
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    call0 reg_arg_i8
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    call0 reg_arg_i16
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: call_simple_reg_args:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    movi.n a3, 2
; UNOPT-NEXT:    movi.n a4, 3
; UNOPT-NEXT:    movi.n a5, 4
; UNOPT-NEXT:    movi.n a6, 5
; UNOPT-NEXT:    movi.n a7, 6
; UNOPT-NEXT:    call0 reg_args_i32
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    call0 reg_arg_i1
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    call0 reg_arg_i8
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    call0 reg_arg_i16
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
entry:
  call void @reg_args_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6)
  call void @reg_arg_i1(i1 1)
  call void @reg_arg_i8(i8 1)
  call void @reg_arg_i16(i16 1)
  ret void
}

define void @call_reg_i64() {
; OPT-LABEL: call_reg_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    call0 reg_arg_i64
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 0
; OPT-NEXT:    call0 reg_arg_i64_packed
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a4, 2
; OPT-NEXT:    movi.n a5, 0
; OPT-NEXT:    call0 reg_arg_i64_aligned
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: call_reg_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    call0 reg_arg_i64
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    s32i.n a2, a1, 8 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 2
; UNOPT-NEXT:    movi.n a4, 3
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    call0 reg_arg_i64_packed
; UNOPT-NEXT:    l32i.n a2, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    movi.n a4, 2
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    call0 reg_arg_i64_aligned
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
entry:
  call void @reg_arg_i64(i64 1)
  call void @reg_arg_i64_packed(i32 1, i32 2, i64 3)
  call void @reg_arg_i64_aligned(i32 1, i64 2)
  ret void
}

define void @call_mixed_reg_args() {
; OPT-LABEL: call_mixed_reg_args:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 1
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 0
; OPT-NEXT:    movi.n a6, 4
; OPT-NEXT:    movi.n a7, 5
; OPT-NEXT:    call0 mixed_reg_args
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: call_mixed_reg_args:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    movi.n a3, 1
; UNOPT-NEXT:    movi.n a4, 3
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    movi.n a6, 4
; UNOPT-NEXT:    movi.n a7, 5
; UNOPT-NEXT:    call0 mixed_reg_args
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
entry:
  call void @mixed_reg_args(i32 1, i1 1, i64 3, i8 4, i16 5)
  ret void
}

define void @call_stack() {
; OPT-LABEL: call_stack:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; OPT-NEXT:    s32i.n a13, a1, 4 # 4-byte Spill
; OPT-NEXT:    movi.n a12, 7
; OPT-NEXT:    s32i.n a12, a1, 0
; OPT-NEXT:    movi.n a13, 1
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i32
; OPT-NEXT:    s32i.n a13, a1, 0
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i1
; OPT-NEXT:    s32i.n a12, a1, 0
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i8
; OPT-NEXT:    s32i.n a12, a1, 0
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i16
; OPT-NEXT:    l32i.n a13, a1, 4 # 4-byte Reload
; OPT-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: call_stack:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -32
; UNOPT-NEXT:    s32i.n a0, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    mov.n a3, a1
; UNOPT-NEXT:    movi.n a2, 7
; UNOPT-NEXT:    s32i.n a2, a3, 0
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    s32i.n a2, a1, 4 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 2
; UNOPT-NEXT:    s32i.n a3, a1, 8 # 4-byte Spill
; UNOPT-NEXT:    movi.n a4, 3
; UNOPT-NEXT:    s32i.n a4, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 4
; UNOPT-NEXT:    s32i.n a5, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    movi.n a6, 5
; UNOPT-NEXT:    s32i.n a6, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    movi.n a7, 6
; UNOPT-NEXT:    s32i.n a7, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    call0 stack_arg_i32
; UNOPT-NEXT:    l32i.n a2, a1, 4 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a7, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 1
; UNOPT-NEXT:    s32i.n a8, a9, 0
; UNOPT-NEXT:    call0 stack_arg_i1
; UNOPT-NEXT:    l32i.n a2, a1, 4 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a7, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 7
; UNOPT-NEXT:    s32i.n a8, a9, 0
; UNOPT-NEXT:    call0 stack_arg_i8
; UNOPT-NEXT:    l32i.n a2, a1, 4 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a7, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 7
; UNOPT-NEXT:    s32i.n a8, a9, 0
; UNOPT-NEXT:    call0 stack_arg_i16
; UNOPT-NEXT:    l32i.n a0, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 32
; UNOPT-NEXT:    ret.n
entry:
  call void @stack_arg_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7)
  call void @stack_arg_i1(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i1 7)
  call void @stack_arg_i8(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i8 7)
  call void @stack_arg_i16(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i16 7)
  ret void
}

define void @call_stack_i64() {
; OPT-LABEL: call_stack_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; OPT-NEXT:    s32i.n a13, a1, 4 # 4-byte Spill
; OPT-NEXT:    s32i.n a14, a1, 0 # 4-byte Spill
; OPT-NEXT:    movi.n a13, 7
; OPT-NEXT:    s32i.n a13, a1, 0
; OPT-NEXT:    movi.n a12, 0
; OPT-NEXT:    s32i.n a12, a1, 4
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a14, 6
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i64
; OPT-NEXT:    s32i.n a14, a1, 0
; OPT-NEXT:    s32i.n a12, a1, 4
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    call0 stack_arg_i64_reg_unaligned
; OPT-NEXT:    s32i.n a13, a1, 0
; OPT-NEXT:    movi.n a2, 8
; OPT-NEXT:    s32i.n a2, a1, 8
; OPT-NEXT:    s32i.n a12, a1, 12
; OPT-NEXT:    movi.n a2, 1
; OPT-NEXT:    movi.n a3, 2
; OPT-NEXT:    movi.n a4, 3
; OPT-NEXT:    movi.n a5, 4
; OPT-NEXT:    movi.n a6, 5
; OPT-NEXT:    movi.n a7, 6
; OPT-NEXT:    call0 stack_arg_i64_aligned
; OPT-NEXT:    l32i.n a14, a1, 0 # 4-byte Reload
; OPT-NEXT:    l32i.n a13, a1, 4 # 4-byte Reload
; OPT-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: call_stack_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -32
; UNOPT-NEXT:    s32i.n a0, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    mov.n a3, a1
; UNOPT-NEXT:    movi.n a2, 7
; UNOPT-NEXT:    s32i.n a2, a3, 0
; UNOPT-NEXT:    mov.n a3, a1
; UNOPT-NEXT:    movi.n a2, 0
; UNOPT-NEXT:    s32i.n a2, a3, 4
; UNOPT-NEXT:    movi.n a2, 1
; UNOPT-NEXT:    s32i.n a2, a1, 4 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 2
; UNOPT-NEXT:    s32i.n a3, a1, 8 # 4-byte Spill
; UNOPT-NEXT:    movi.n a4, 3
; UNOPT-NEXT:    s32i.n a4, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 4
; UNOPT-NEXT:    s32i.n a5, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    movi.n a6, 5
; UNOPT-NEXT:    s32i.n a6, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    movi.n a7, 6
; UNOPT-NEXT:    s32i.n a7, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    call0 stack_arg_i64
; UNOPT-NEXT:    l32i.n a2, a1, 4 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    mov.n a8, a1
; UNOPT-NEXT:    movi.n a7, 6
; UNOPT-NEXT:    s32i.n a7, a8, 0
; UNOPT-NEXT:    mov.n a8, a1
; UNOPT-NEXT:    movi.n a7, 0
; UNOPT-NEXT:    s32i.n a7, a8, 4
; UNOPT-NEXT:    call0 stack_arg_i64_reg_unaligned
; UNOPT-NEXT:    l32i.n a2, a1, 4 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a7, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 7
; UNOPT-NEXT:    s32i.n a8, a9, 0
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 8
; UNOPT-NEXT:    s32i.n a8, a9, 8
; UNOPT-NEXT:    mov.n a9, a1
; UNOPT-NEXT:    movi.n a8, 0
; UNOPT-NEXT:    s32i.n a8, a9, 12
; UNOPT-NEXT:    call0 stack_arg_i64_aligned
; UNOPT-NEXT:    l32i.n a0, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 32
; UNOPT-NEXT:    ret.n
entry:
  call void @stack_arg_i64(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i64 7)
  call void @stack_arg_i64_reg_unaligned(i32 1, i32 2, i32 3, i32 4, i32 5, i64 6)
  call void @stack_arg_i64_aligned(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i64 8)
  ret void
}
