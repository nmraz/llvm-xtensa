; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define void @offset_store_i8(ptr %base, i8 %val) {
; OPT-LABEL: offset_store_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    s8i a3, a2, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s8i a3, a2, 5
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 5
  store i8 %val, ptr %p
  ret void
}

define void @offset_store_i8_oob(ptr %base, i8 %val) {
; OPT-LABEL: offset_store_i8_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 256
; OPT-NEXT:    s8i a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i8_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 256
; UNOPT-NEXT:    s8i a3, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 256
  store i8 %val, ptr %p
  ret void
}

define void @offset_store_i16(ptr %base, i16 %val) {
; OPT-LABEL: offset_store_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    s16i a3, a2, 10
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s16i a3, a2, 10
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 5
  store i16 %val, ptr %p
  ret void
}

define void @offset_store_i16_unaligned_off(ptr %base, i16 %val) {
; OPT-LABEL: offset_store_i16_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi.n a2, a2, 11
; OPT-NEXT:    s16i a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i16_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi.n a2, a2, 11
; UNOPT-NEXT:    s16i a3, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 11
  store i16 %val, ptr %p
  ret void
}

define void @offset_store_i16_oob(ptr %base, i16 %val) {
; OPT-LABEL: offset_store_i16_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 512
; OPT-NEXT:    s16i a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i16_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 512
; UNOPT-NEXT:    s16i a3, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 256
  store i16 %val, ptr %p
  ret void
}

define void @offset_store_i16_oob2(ptr %base, i16 %val) {
; OPT-LABEL: offset_store_i16_oob2:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 512
; OPT-NEXT:    s16i a3, a2, 88
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i16_oob2:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 512
; UNOPT-NEXT:    s16i a3, a2, 88
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 300
  store i16 %val, ptr %p
  ret void
}

define void @offset_store_i16_unaligned(ptr %base, i16 %val) {
; OPT-LABEL: offset_store_i16_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a4, a3, 0, 16
; OPT-NEXT:    srli a4, a4, 8
; OPT-NEXT:    s8i a3, a2, 10
; OPT-NEXT:    s8i a4, a2, 11
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i16_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    extui a2, a4, 0, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a3, 10
; UNOPT-NEXT:    s8i a2, a3, 11
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 5
  store i16 %val, ptr %p, align 1
  ret void
}

define void @offset_store_i32(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    s32i.n a3, a2, 20
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s32i.n a3, a2, 20
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_narrow_max(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_narrow_max:
; OPT:       # %bb.0:
; OPT-NEXT:    s32i.n a3, a2, 60
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_narrow_max:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s32i.n a3, a2, 60
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 15
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_narrow_oob(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_narrow_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    s32i a3, a2, 64
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_narrow_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s32i a3, a2, 64
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 16
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_unaligned_off(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a2, a2, 22
; OPT-NEXT:    s32i.n a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a2, a2, 22
; UNOPT-NEXT:    s32i.n a3, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 22
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_oob(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 1024
; OPT-NEXT:    s32i.n a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 1024
; UNOPT-NEXT:    s32i.n a3, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 256
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_oob2(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_oob2:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 1024
; OPT-NEXT:    s32i a3, a2, 176
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_oob2:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 1024
; UNOPT-NEXT:    s32i a3, a2, 176
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 300
  store i32 %val, ptr %p
  ret void
}

define void @offset_store_i32_unaligned(ptr %base, i32 %val) {
; OPT-LABEL: offset_store_i32_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    extui a5, a3, 0, 16
; OPT-NEXT:    srli a5, a5, 8
; OPT-NEXT:    s8i a3, a2, 20
; OPT-NEXT:    s8i a5, a2, 21
; OPT-NEXT:    extui a3, a3, 24, 8
; OPT-NEXT:    s8i a4, a2, 22
; OPT-NEXT:    s8i a3, a2, 23
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i32_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    extui a5, a2, 0, 16
; UNOPT-NEXT:    srli a5, a5, 8
; UNOPT-NEXT:    s8i a2, a3, 20
; UNOPT-NEXT:    s8i a5, a3, 21
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a3, 22
; UNOPT-NEXT:    s8i a2, a3, 23
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  store i32 %val, ptr %p, align 1
  ret void
}

define void @offset_store_i64(ptr %base, i64 %val) {
; OPT-LABEL: offset_store_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    s32i.n a4, a2, 40
; OPT-NEXT:    s32i.n a5, a2, 44
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s32i.n a4, a2, 40
; UNOPT-NEXT:    s32i.n a5, a2, 44
; UNOPT-NEXT:    ret.n
  %p = getelementptr i64, ptr %base, i32 5
  store i64 %val, ptr %p
  ret void
}

define void @offset_store_i64_unaligned_off4(ptr %base, i64 %val) {
; OPT-LABEL: offset_store_i64_unaligned_off4:
; OPT:       # %bb.0:
; OPT-NEXT:    s32i.n a4, a2, 20
; OPT-NEXT:    s32i.n a5, a2, 24
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i64_unaligned_off4:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    s32i.n a4, a2, 20
; UNOPT-NEXT:    s32i.n a5, a2, 24
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  store i64 %val, ptr %p
  ret void
}

define void @offset_store_i64_unaligned_off(ptr %base, i64 %val) {
; OPT-LABEL: offset_store_i64_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a3, a2, 21
; OPT-NEXT:    s32i.n a4, a3, 0
; OPT-NEXT:    addi a2, a2, 25
; OPT-NEXT:    s32i.n a5, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i64_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a3, a2, 21
; UNOPT-NEXT:    s32i.n a4, a3, 0
; UNOPT-NEXT:    addi a2, a2, 25
; UNOPT-NEXT:    s32i.n a5, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 21
  store i64 %val, ptr %p
  ret void
}

define void @offset_store_i64_unaligned(ptr %base, i64 %val) {
; OPT-LABEL: offset_store_i64_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a3, a4, 16, 16
; OPT-NEXT:    extui a6, a4, 0, 16
; OPT-NEXT:    srli a6, a6, 8
; OPT-NEXT:    s8i a4, a2, 40
; OPT-NEXT:    s8i a6, a2, 41
; OPT-NEXT:    extui a4, a4, 24, 8
; OPT-NEXT:    s8i a3, a2, 42
; OPT-NEXT:    s8i a4, a2, 43
; OPT-NEXT:    extui a3, a5, 16, 16
; OPT-NEXT:    extui a4, a5, 0, 16
; OPT-NEXT:    srli a4, a4, 8
; OPT-NEXT:    s8i a5, a2, 44
; OPT-NEXT:    s8i a4, a2, 45
; OPT-NEXT:    extui a4, a5, 24, 8
; OPT-NEXT:    s8i a3, a2, 46
; OPT-NEXT:    s8i a4, a2, 47
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_store_i64_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    mov.n a2, a4
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    extui a6, a2, 0, 16
; UNOPT-NEXT:    srli a6, a6, 8
; UNOPT-NEXT:    s8i a2, a3, 40
; UNOPT-NEXT:    s8i a6, a3, 41
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a3, 42
; UNOPT-NEXT:    s8i a2, a3, 43
; UNOPT-NEXT:    extui a4, a5, 16, 16
; UNOPT-NEXT:    extui a2, a5, 0, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a5, a3, 44
; UNOPT-NEXT:    s8i a2, a3, 45
; UNOPT-NEXT:    extui a2, a5, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a3, 46
; UNOPT-NEXT:    s8i a2, a3, 47
; UNOPT-NEXT:    ret.n
  %p = getelementptr i64, ptr %base, i32 5
  store i64 %val, ptr %p, align 1
  ret void
}
