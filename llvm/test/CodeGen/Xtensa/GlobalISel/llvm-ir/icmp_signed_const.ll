; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define i1 @icmp_slt_5(i32 %n) {
; CHECK-LABEL: icmp_slt_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi a2, a2, -5
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 5
  ret i1 %cmp
}

define i1 @icmp_sgt_5(i32 %n) {
; CHECK-LABEL: icmp_sgt_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addi a2, a2, -6
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 5
  ret i1 %cmp
}

define i1 @icmp_sle_5(i32 %n) {
; CHECK-LABEL: icmp_sle_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi a2, a2, -6
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 6
  ret i1 %cmp
}

define i1 @icmp_sge_5(i32 %n) {
; CHECK-LABEL: icmp_sge_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addi a2, a2, -5
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 4
  ret i1 %cmp
}

define i1 @icmp_slt_127(i32 %n) {
; CHECK-LABEL: icmp_slt_127:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi a2, a2, -127
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 127
  ret i1 %cmp
}

define i1 @icmp_sgt_127(i32 %n) {
; CHECK-LABEL: icmp_sgt_127:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addi a2, a2, -128
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 127
  ret i1 %cmp
}

define i1 @icmp_sle_127(i32 %n) {
; CHECK-LABEL: icmp_sle_127:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi a2, a2, -128
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 128
  ret i1 %cmp
}

define i1 @icmp_sge_127(i32 %n) {
; CHECK-LABEL: icmp_sge_127:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addi a2, a2, -127
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 126
  ret i1 %cmp
}

define i1 @icmp_slt_128(i32 %n) {
; CHECK-LABEL: icmp_slt_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi a2, a2, -128
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 128
  ret i1 %cmp
}

define i1 @icmp_sgt_128(i32 %n) {
; CHECK-LABEL: icmp_sgt_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 128
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a4, a2
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 128
  ret i1 %cmp
}

define i1 @icmp_sle_128(i32 %n) {
; CHECK-LABEL: icmp_sle_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 129
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a2, a4
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 129
  ret i1 %cmp
}

define i1 @icmp_sge_128(i32 %n) {
; CHECK-LABEL: icmp_sge_128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addi a2, a2, -128
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 127
  ret i1 %cmp
}

define i1 @icmp_slt_255(i32 %n) {
; CHECK-LABEL: icmp_slt_255:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 255
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a2, a4
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 255
  ret i1 %cmp
}

define i1 @icmp_sgt_255(i32 %n) {
; CHECK-LABEL: icmp_sgt_255:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addmi a2, a2, -256
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 255
  ret i1 %cmp
}

define i1 @icmp_sle_255(i32 %n) {
; CHECK-LABEL: icmp_sle_255:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addmi a2, a2, -256
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 256
  ret i1 %cmp
}

define i1 @icmp_sge_255(i32 %n) {
; CHECK-LABEL: icmp_sge_255:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 254
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a4, a2
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 254
  ret i1 %cmp
}

define i1 @icmp_slt_256(i32 %n) {
; CHECK-LABEL: icmp_slt_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addmi a2, a2, -256
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 256
  ret i1 %cmp
}

define i1 @icmp_sgt_256(i32 %n) {
; CHECK-LABEL: icmp_sgt_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 256
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a4, a2
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 256
  ret i1 %cmp
}

define i1 @icmp_sle_256(i32 %n) {
; CHECK-LABEL: icmp_sle_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a4, 257
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    sub a2, a2, a4
; CHECK-NEXT:    movgez a3, a5, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp slt i32 %n, 257
  ret i1 %cmp
}

define i1 @icmp_sge_256(i32 %n) {
; CHECK-LABEL: icmp_sge_256:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    addmi a2, a2, -256
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
  %cmp = icmp sgt i32 %n, 255
  ret i1 %cmp
}
