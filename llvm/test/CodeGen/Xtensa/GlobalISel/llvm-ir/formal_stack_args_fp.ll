; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

@global32 = global i32 0
@global64 = global i64 0

define void @stack_arg_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) #0 {
; OPT-LABEL: stack_arg_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; OPT-NEXT:    mov.n a15, a1
; OPT-NEXT:    l32i.n a2, a15, 16
; OPT-NEXT:    l32r a3, .LCPI0_0
; OPT-NEXT:    s32i.n a2, a3, 0
; OPT-NEXT:    mov.n a1, a15
; OPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: stack_arg_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a15, a1
; UNOPT-NEXT:    l32i.n a2, a15, 16
; UNOPT-NEXT:    l32r a3, .LCPI0_0
; UNOPT-NEXT:    s32i.n a2, a3, 0
; UNOPT-NEXT:    mov.n a1, a15
; UNOPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  store i32 %arg7, ptr @global32
  ret void
}

define void @stack_arg_i64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i64 %arg7) #0 {
; OPT-LABEL: stack_arg_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; OPT-NEXT:    mov.n a15, a1
; OPT-NEXT:    l32i.n a2, a15, 16
; OPT-NEXT:    l32i.n a3, a15, 20
; OPT-NEXT:    l32r a4, .LCPI1_0
; OPT-NEXT:    s32i.n a2, a4, 0
; OPT-NEXT:    s32i.n a3, a4, 4
; OPT-NEXT:    mov.n a1, a15
; OPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: stack_arg_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a15, a1
; UNOPT-NEXT:    l32i.n a4, a15, 16
; UNOPT-NEXT:    l32i.n a2, a15, 20
; UNOPT-NEXT:    l32r a3, .LCPI1_0
; UNOPT-NEXT:    s32i.n a4, a3, 0
; UNOPT-NEXT:    s32i.n a2, a3, 4
; UNOPT-NEXT:    mov.n a1, a15
; UNOPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  store i64 %arg7, ptr @global64
  ret void
}

define void @stack_arg_i64_aligned(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i64 %arg8) #0 {
; OPT-LABEL: stack_arg_i64_aligned:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; OPT-NEXT:    mov.n a15, a1
; OPT-NEXT:    l32i.n a2, a15, 16
; OPT-NEXT:    l32i.n a3, a15, 24
; OPT-NEXT:    l32i.n a4, a15, 28
; OPT-NEXT:    l32r a5, .LCPI2_1
; OPT-NEXT:    s32i.n a2, a5, 0
; OPT-NEXT:    l32r a2, .LCPI2_0
; OPT-NEXT:    s32i.n a3, a2, 0
; OPT-NEXT:    s32i.n a4, a2, 4
; OPT-NEXT:    mov.n a1, a15
; OPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: stack_arg_i64_aligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a15, a1
; UNOPT-NEXT:    l32i.n a3, a15, 16
; UNOPT-NEXT:    l32i.n a4, a15, 24
; UNOPT-NEXT:    l32i.n a2, a15, 28
; UNOPT-NEXT:    l32r a5, .LCPI2_1
; UNOPT-NEXT:    s32i.n a3, a5, 0
; UNOPT-NEXT:    l32r a3, .LCPI2_0
; UNOPT-NEXT:    s32i.n a4, a3, 0
; UNOPT-NEXT:    s32i.n a2, a3, 4
; UNOPT-NEXT:    mov.n a1, a15
; UNOPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  store i32 %arg7, ptr @global32
  store i64 %arg8, ptr @global64
  ret void
}

define void @mixed_stack_args(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7, i8 %arg8, i64 %arg9) #0 {
; OPT-LABEL: mixed_stack_args:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; OPT-NEXT:    mov.n a15, a1
; OPT-NEXT:    l32i.n a2, a15, 24
; OPT-NEXT:    l32i.n a3, a15, 28
; OPT-NEXT:    l32r a4, .LCPI3_0
; OPT-NEXT:    s32i.n a2, a4, 0
; OPT-NEXT:    s32i.n a3, a4, 4
; OPT-NEXT:    mov.n a1, a15
; OPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mixed_stack_args:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a15, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a15, a1
; UNOPT-NEXT:    l32i.n a4, a15, 24
; UNOPT-NEXT:    l32i.n a2, a15, 28
; UNOPT-NEXT:    l32r a3, .LCPI3_0
; UNOPT-NEXT:    s32i.n a4, a3, 0
; UNOPT-NEXT:    s32i.n a2, a3, 4
; UNOPT-NEXT:    mov.n a1, a15
; UNOPT-NEXT:    l32i.n a15, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  store i64 %arg9, ptr @global64
  ret void
}

attributes #0 = { "frame-pointer"="all" }
