; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

declare i16 @llvm.bswap.i16(i16 %val)
declare i32 @llvm.bswap.i32(i32 %val)
declare i64 @llvm.bswap.i64(i64 %val)

define i16 @bswap16(i16 %val) {
; OPT-LABEL: bswap16:
; OPT:       # %bb.0:
; OPT-NEXT:    slli a3, a2, 8
; OPT-NEXT:    extui a2, a2, 0, 16
; OPT-NEXT:    srli a2, a2, 8
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: bswap16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    slli a3, a2, 8
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
  %bswap = call i16 @llvm.bswap.i16(i16 %val)
  ret i16 %bswap
}

define i32 @bswap32(i32 %val) {
; OPT-LABEL: bswap32:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a3, a2, 16, 16
; OPT-NEXT:    ssai 8
; OPT-NEXT:    src a3, a3, a2
; OPT-NEXT:    src a3, a3, a3
; OPT-NEXT:    src a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: bswap32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a3, a2, 16, 16
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a3, a3, a2
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a3, a3, a3
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a2, a2, a3
; UNOPT-NEXT:    ret.n
  %bswap = call i32 @llvm.bswap.i32(i32 %val)
  ret i32 %bswap
}

define i64 @bswap64(i64 %val) {
; OPT-LABEL: bswap64:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    ssai 8
; OPT-NEXT:    src a4, a4, a3
; OPT-NEXT:    src a4, a4, a4
; OPT-NEXT:    src a4, a3, a4
; OPT-NEXT:    extui a3, a2, 16, 16
; OPT-NEXT:    src a3, a3, a2
; OPT-NEXT:    src a3, a3, a3
; OPT-NEXT:    src a3, a2, a3
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: bswap64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a4, a4, a2
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a4, a4, a4
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a2, a2, a4
; UNOPT-NEXT:    extui a4, a3, 16, 16
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a4, a4, a3
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a4, a4, a4
; UNOPT-NEXT:    ssai 8
; UNOPT-NEXT:    src a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %bswap = call i64 @llvm.bswap.i64(i64 %val)
  ret i64 %bswap
}
