; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i32 @shl_zero(i32 %val) {
; CHECK-LABEL: shl_zero:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 0
  ret i32 %shl
}

define i32 @shl_const(i32 %val) {
; CHECK-LABEL: shl_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a2, a2, 5
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 5
  ret i32 %shl
}

define i32 @shl_const_5bit(i32 %val) {
; CHECK-LABEL: shl_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a2, a2, 17
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 17
  ret i32 %shl
}

define i32 @shl_const_overflow(i32 %val) {
; CHECK-LABEL: shl_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    ssl a3
; CHECK-NEXT:    sll a2, a2
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 32
  ret i32 %shl
}

define i32 @lshr_zero(i32 %val) {
; CHECK-LABEL: lshr_zero:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 0
  ret i32 %lshr
}

define i32 @lshr_const(i32 %val) {
; CHECK-LABEL: lshr_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli a2, a2, 5
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 5
  ret i32 %lshr
}

define i32 @lshr_const_5bit(i32 %val) {
; CHECK-LABEL: lshr_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a2, 17, 15
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 17
  ret i32 %lshr
}

define i32 @lshr_const_overflow(i32 %val) {
; CHECK-LABEL: lshr_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    ssr a3
; CHECK-NEXT:    srl a2, a2
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 32
  ret i32 %lshr
}

define i32 @ashr_zero(i32 %val) {
; CHECK-LABEL: ashr_zero:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 0
  ret i32 %ashr
}

define i32 @ashr_const(i32 %val) {
; CHECK-LABEL: ashr_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srai a2, a2, 5
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 5
  ret i32 %ashr
}

define i32 @ashr_const_5bit(i32 %val) {
; CHECK-LABEL: ashr_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srai a2, a2, 17
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 17
  ret i32 %ashr
}

define i32 @ashr_const_overflow(i32 %val) {
; CHECK-LABEL: ashr_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    ssr a3
; CHECK-NEXT:    sra a2, a2
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 32
  ret i32 %ashr
}
