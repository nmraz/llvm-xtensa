; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i32 @shl_zero(i32 %val) {
; OPT-LABEL: shl_zero:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_zero:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a3, 0
; UNOPT-NEXT:    ssl a3
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 0
  ret i32 %shl
}

define i32 @shl_const(i32 %val) {
; OPT-LABEL: shl_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a2, a2, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    slli a2, a2, 5
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 5
  ret i32 %shl
}

define i32 @shl_const_5bit(i32 %val) {
; OPT-LABEL: shl_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a2, a2, 17
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    slli a2, a2, 17
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 17
  ret i32 %shl
}

define i32 @shl_const_overflow(i32 %val) {
; OPT-LABEL: shl_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    movi a3, 32
; OPT-NEXT:    ssl a3
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a3, 32
; UNOPT-NEXT:    ssl a3
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i32 %val, 32
  ret i32 %shl
}

define i32 @lshr_zero(i32 %val) {
; OPT-LABEL: lshr_zero:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_zero:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srli a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 0
  ret i32 %lshr
}

define i32 @lshr_const(i32 %val) {
; OPT-LABEL: lshr_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srli a2, a2, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srli a2, a2, 5
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 5
  ret i32 %lshr
}

define i32 @lshr_const_5bit(i32 %val) {
; OPT-LABEL: lshr_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 17, 15
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 17, 15
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 17
  ret i32 %lshr
}

define i32 @lshr_const_overflow(i32 %val) {
; OPT-LABEL: lshr_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 0
; OPT-NEXT:    srl a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a3, 32
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    srl a2, a2
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i32 %val, 32
  ret i32 %lshr
}

define i32 @ashr_zero(i32 %val) {
; OPT-LABEL: ashr_zero:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_zero:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 0
  ret i32 %ashr
}

define i32 @ashr_const(i32 %val) {
; OPT-LABEL: ashr_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a2, a2, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a2, 5
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 5
  ret i32 %ashr
}

define i32 @ashr_const_5bit(i32 %val) {
; OPT-LABEL: ashr_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a2, a2, 17
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a2, 17
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 17
  ret i32 %ashr
}

define i32 @ashr_const_overflow(i32 %val) {
; OPT-LABEL: ashr_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 0
; OPT-NEXT:    sra a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a3, 32
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    sra a2, a2
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i32 %val, 32
  ret i32 %ashr
}
