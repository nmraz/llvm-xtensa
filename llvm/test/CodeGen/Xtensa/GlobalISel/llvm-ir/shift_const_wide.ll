; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i64 @shl_const(i64 %val) {
; OPT-LABEL: shl_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a4, a2, 5
; OPT-NEXT:    slli a3, a3, 5
; OPT-NEXT:    extui a2, a2, 27, 5
; OPT-NEXT:    or a3, a3, a2
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    slli a2, a4, 5
; UNOPT-NEXT:    slli a3, a3, 5
; UNOPT-NEXT:    extui a4, a4, 27, 5
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 5
  ret i64 %shl
}

define i64 @shl_const_5bit(i64 %val) {
; OPT-LABEL: shl_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a4, a2, 17
; OPT-NEXT:    slli a3, a3, 17
; OPT-NEXT:    srli a2, a2, 15
; OPT-NEXT:    or a3, a3, a2
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    slli a2, a4, 17
; UNOPT-NEXT:    slli a3, a3, 17
; UNOPT-NEXT:    srli a4, a4, 15
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 17
  ret i64 %shl
}

define i64 @shl_const_6bit(i64 %val) {
; OPT-LABEL: shl_const_6bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a3, a2, 5
; OPT-NEXT:    movi a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const_6bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    slli a3, a2, 5
; UNOPT-NEXT:    movi a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 37
  ret i64 %shl
}

define i64 @shl_const_overflow(i64 %val) {
; OPT-LABEL: shl_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    movi a3, 32
; OPT-NEXT:    ssl a3
; OPT-NEXT:    sll a3, a2
; OPT-NEXT:    movi a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a3, 32
; UNOPT-NEXT:    ssl a3
; UNOPT-NEXT:    sll a3, a2
; UNOPT-NEXT:    movi a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 64
  ret i64 %shl
}

define i64 @lshr_const(i64 %val) {
; OPT-LABEL: lshr_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srli a2, a2, 5
; OPT-NEXT:    slli a4, a3, 27
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    srli a3, a3, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srli a2, a2, 5
; UNOPT-NEXT:    slli a4, a3, 27
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    srli a3, a3, 5
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 5
  ret i64 %lshr
}

define i64 @lshr_const_5bit(i64 %val) {
; OPT-LABEL: lshr_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 17, 15
; OPT-NEXT:    slli a4, a3, 15
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    extui a3, a3, 17, 15
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 17, 15
; UNOPT-NEXT:    slli a4, a3, 15
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    extui a3, a3, 17, 15
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 17
  ret i64 %lshr
}

define i64 @lshr_const_6bit(i64 %val) {
; OPT-LABEL: lshr_const_6bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srli a2, a3, 5
; OPT-NEXT:    movi a3, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const_6bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srli a2, a3, 5
; UNOPT-NEXT:    movi a3, 0
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 37
  ret i64 %lshr
}

define i64 @lshr_const_overflow(i64 %val) {
; OPT-LABEL: lshr_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 0
; OPT-NEXT:    srl a2, a3
; OPT-NEXT:    movi a3, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a2, 32
; UNOPT-NEXT:    ssr a2
; UNOPT-NEXT:    srl a2, a3
; UNOPT-NEXT:    movi a3, 0
; UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 64
  ret i64 %lshr
}

define i64 @ashr_const(i64 %val) {
; OPT-LABEL: ashr_const:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srli a2, a2, 5
; OPT-NEXT:    slli a4, a3, 27
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    srai a3, a3, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srli a2, a2, 5
; UNOPT-NEXT:    slli a4, a3, 27
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    srai a3, a3, 5
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 5
  ret i64 %ashr
}

define i64 @ashr_const_5bit(i64 %val) {
; OPT-LABEL: ashr_const_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 17, 15
; OPT-NEXT:    slli a4, a3, 15
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    srai a3, a3, 17
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 17, 15
; UNOPT-NEXT:    slli a4, a3, 15
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    srai a3, a3, 17
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 17
  ret i64 %ashr
}

define i64 @ashr_const_6bit(i64 %val) {
; OPT-LABEL: ashr_const_6bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a2, a3, 5
; OPT-NEXT:    srai a3, a3, 31
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const_6bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a3, 5
; UNOPT-NEXT:    srai a3, a3, 31
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 37
  ret i64 %ashr
}

define i64 @ashr_const_overflow(i64 %val) {
; OPT-LABEL: ashr_const_overflow:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 0
; OPT-NEXT:    sra a2, a3
; OPT-NEXT:    srai a3, a3, 31
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_const_overflow:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi a2, 32
; UNOPT-NEXT:    ssr a2
; UNOPT-NEXT:    sra a2, a3
; UNOPT-NEXT:    srai a3, a3, 31
; UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 64
  ret i64 %ashr
}

