; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i64 @shl_const(i64 %val) {
; CHECK-LABEL: shl_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a4, a2, 5
; CHECK-NEXT:    slli a3, a3, 5
; CHECK-NEXT:    extui a2, a2, 27, 5
; CHECK-NEXT:    or a3, a3, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 5
  ret i64 %shl
}

define i64 @shl_const_5bit(i64 %val) {
; CHECK-LABEL: shl_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a4, a2, 17
; CHECK-NEXT:    slli a3, a3, 17
; CHECK-NEXT:    srli a2, a2, 15
; CHECK-NEXT:    or a3, a3, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 17
  ret i64 %shl
}

define i64 @shl_const_6bit(i64 %val) {
; CHECK-LABEL: shl_const_6bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    slli a3, a2, 5
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 37
  ret i64 %shl
}

define i64 @shl_const_overflow(i64 %val) {
; CHECK-LABEL: shl_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    ssl a3
; CHECK-NEXT:    sll a3, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i64 %val, 64
  ret i64 %shl
}

define i64 @lshr_const(i64 %val) {
; CHECK-LABEL: lshr_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli a2, a2, 5
; CHECK-NEXT:    slli a4, a3, 27
; CHECK-NEXT:    or a2, a2, a4
; CHECK-NEXT:    srli a3, a3, 5
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 5
  ret i64 %lshr
}

define i64 @lshr_const_5bit(i64 %val) {
; CHECK-LABEL: lshr_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a2, 17, 15
; CHECK-NEXT:    slli a4, a3, 15
; CHECK-NEXT:    or a2, a2, a4
; CHECK-NEXT:    extui a3, a3, 17, 15
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 17
  ret i64 %lshr
}

define i64 @lshr_const_6bit(i64 %val) {
; CHECK-LABEL: lshr_const_6bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli a2, a3, 5
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 37
  ret i64 %lshr
}

define i64 @lshr_const_overflow(i64 %val) {
; CHECK-LABEL: lshr_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ssai 0
; CHECK-NEXT:    srl a2, a3
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, 64
  ret i64 %lshr
}

define i64 @ashr_const(i64 %val) {
; CHECK-LABEL: ashr_const:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli a2, a2, 5
; CHECK-NEXT:    slli a4, a3, 27
; CHECK-NEXT:    or a2, a2, a4
; CHECK-NEXT:    srai a3, a3, 5
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 5
  ret i64 %ashr
}

define i64 @ashr_const_5bit(i64 %val) {
; CHECK-LABEL: ashr_const_5bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a2, 17, 15
; CHECK-NEXT:    slli a4, a3, 15
; CHECK-NEXT:    or a2, a2, a4
; CHECK-NEXT:    srai a3, a3, 17
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 17
  ret i64 %ashr
}

define i64 @ashr_const_6bit(i64 %val) {
; CHECK-LABEL: ashr_const_6bit:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srai a2, a3, 5
; CHECK-NEXT:    srai a3, a3, 31
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 37
  ret i64 %ashr
}

define i64 @ashr_const_overflow(i64 %val) {
; CHECK-LABEL: ashr_const_overflow:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ssai 0
; CHECK-NEXT:    sra a2, a3
; CHECK-NEXT:    srai a3, a3, 31
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, 64
  ret i64 %ashr
}

