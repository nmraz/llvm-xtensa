; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define i8 @alloca_i8(i8 %val) {
; CHECK-LABEL: alloca_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -1
; CHECK-NEXT:    addi a3, a1, 0
; CHECK-NEXT:    s8i a2, a3, 0
; CHECK-NEXT:    addi a2, a1, 0
; CHECK-NEXT:    l8ui a2, a2, 0
; CHECK-NEXT:    addi a1, a1, 1
; CHECK-NEXT:    ret.n
  %p = alloca i8
  store i8 %val, ptr %p
  %retval = load i8, ptr %p
  ret i8 %retval
}

define i16 @alloca_i16(i16 %val) {
; CHECK-LABEL: alloca_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -2
; CHECK-NEXT:    addi a3, a1, 0
; CHECK-NEXT:    s16i a2, a3, 0
; CHECK-NEXT:    addi a2, a1, 0
; CHECK-NEXT:    l16ui a2, a2, 0
; CHECK-NEXT:    addi a1, a1, 2
; CHECK-NEXT:    ret.n
  %p = alloca i16
  store i16 %val, ptr %p
  %retval = load i16, ptr %p
  ret i16 %retval
}

define i32 @alloca_i32(i32 %val) {
; CHECK-LABEL: alloca_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -4
; CHECK-NEXT:    addi a3, a1, 0
; CHECK-NEXT:    s32i a2, a3, 0
; CHECK-NEXT:    addi a2, a1, 0
; CHECK-NEXT:    l32i a2, a2, 0
; CHECK-NEXT:    addi a1, a1, 4
; CHECK-NEXT:    ret.n
  %p = alloca i32
  store i32 %val, ptr %p
  %retval = load i32, ptr %p
  ret i32 %retval
}

define i64 @alloca_i64(i64 %val) {
; CHECK-LABEL: alloca_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -8
; CHECK-NEXT:    addi a4, a1, 0
; CHECK-NEXT:    s32i a2, a4, 0
; CHECK-NEXT:    addi a2, a1, 4
; CHECK-NEXT:    s32i a3, a2, 0
; CHECK-NEXT:    addi a2, a1, 0
; CHECK-NEXT:    l32i a2, a2, 0
; CHECK-NEXT:    addi a3, a1, 4
; CHECK-NEXT:    l32i a3, a3, 0
; CHECK-NEXT:    addi a1, a1, 8
; CHECK-NEXT:    ret.n
  %p = alloca i64
  store i64 %val, ptr %p
  %retval = load i64, ptr %p
  ret i64 %retval
}
