; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

declare dso_local i32 @g(...)
declare dso_local void @h(i32, i32, i32, i32, i32, i32, i32, i32)

; This functions has many live ranges, meaning that it should attempt to use a15
; as frame pointers are disabled. Make sure that when it does, the register is
; saved and restored correctly (*not* as a frame pointer).
define void @f() {
; CHECK-LABEL: f:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -48
; CHECK-NEXT:    s32i.n a0, a1, 44 # 4-byte Spill
; CHECK-NEXT:    s32i.n a12, a1, 40 # 4-byte Spill
; CHECK-NEXT:    s32i.n a13, a1, 36 # 4-byte Spill
; CHECK-NEXT:    s32i.n a14, a1, 32 # 4-byte Spill
; CHECK-NEXT:    s32i.n a15, a1, 28 # 4-byte Spill
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    s32i.n a2, a1, 24 # 4-byte Spill
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    s32i.n a2, a1, 20 # 4-byte Spill
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    mov.n a15, a2
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    mov.n a12, a2
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    mov.n a13, a2
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    mov.n a14, a2
; CHECK-NEXT:    call0 g
; CHECK-NEXT:    s32i.n a2, a1, 4
; CHECK-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; CHECK-NEXT:    l32i.n a3, a1, 20 # 4-byte Reload
; CHECK-NEXT:    l32i.n a4, a1, 16 # 4-byte Reload
; CHECK-NEXT:    mov.n a5, a15
; CHECK-NEXT:    mov.n a6, a12
; CHECK-NEXT:    mov.n a7, a13
; CHECK-NEXT:    s32i.n a14, a1, 0
; CHECK-NEXT:    call0 h
; CHECK-NEXT:    l32i.n a15, a1, 28 # 4-byte Reload
; CHECK-NEXT:    l32i.n a14, a1, 32 # 4-byte Reload
; CHECK-NEXT:    l32i.n a13, a1, 36 # 4-byte Reload
; CHECK-NEXT:    l32i.n a12, a1, 40 # 4-byte Reload
; CHECK-NEXT:    l32i.n a0, a1, 44 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 48
; CHECK-NEXT:    ret.n
  %call = tail call i32 @g()
  %call1 = tail call i32 @g()
  %call2 = tail call i32 @g()
  %call3 = tail call i32 @g()
  %call4 = tail call i32 @g()
  %call5 = tail call i32 @g()
  %call6 = tail call i32 @g()
  %call7 = tail call i32 @g()
  tail call void @h(i32 %call, i32 %call1, i32 %call2, i32 %call3, i32 %call4, i32 %call5, i32 %call6, i32 %call7)
  ret void
}
