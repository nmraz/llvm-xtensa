; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-OPT
; RUN: llc -O0 < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-UNOPT

define i33 @shl_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: shl_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    movi.n a6, 32
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    neg a7, a4
; OPT-NEXT:    ssr a7
; OPT-NEXT:    srl a7, a5
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a8, a3
; OPT-NEXT:    sll a5, a5
; OPT-NEXT:    bltu a4, a6, .LBB0_2
; OPT-NEXT:  # %bb.1: # %entry
; OPT-NEXT:    movi.n a2, 0
; OPT-NEXT:  .LBB0_2: # %entry
; OPT-NEXT:    bgeu a4, a6, .LBB0_4
; OPT-NEXT:  # %bb.3:
; OPT-NEXT:    or a5, a7, a8
; OPT-NEXT:  .LBB0_4: # %entry
; OPT-NEXT:    moveqz a5, a3, a4
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    mov.n a5, a2
; UNOPT-NEXT:    mov.n a8, a3
; UNOPT-NEXT:    s32i.n a8, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a3, a5
; UNOPT-NEXT:    ssr a7
; UNOPT-NEXT:    srl a7, a5
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a8, a8
; UNOPT-NEXT:    or a7, a7, a8
; UNOPT-NEXT:    s32i.n a7, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    sll a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB0_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB0_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB0_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; UNOPT-NEXT:  .LBB0_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: shl_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    movi.n a5, 32
; LX7-OPT-NEXT:    saltu a7, a4, a5
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a5, a2
; LX7-OPT-NEXT:    neg a6, a4
; LX7-OPT-NEXT:    ssr a6
; LX7-OPT-NEXT:    srl a6, a2
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a8, a3
; LX7-OPT-NEXT:    or a6, a6, a8
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    movi.n a8, 0
; LX7-OPT-NEXT:    moveqz a5, a8, a7
; LX7-OPT-NEXT:    moveqz a6, a2, a7
; LX7-OPT-NEXT:    moveqz a6, a3, a4
; LX7-OPT-NEXT:    mov.n a2, a5
; LX7-OPT-NEXT:    mov.n a3, a6
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: shl_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    s32i.n a3, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a5, a4
; LX7-UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a8, a5, -32
; LX7-UNOPT-NEXT:    sub a3, a2, a5
; LX7-UNOPT-NEXT:    saltu a7, a5, a2
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a6
; LX7-UNOPT-NEXT:    ssr a3
; LX7-UNOPT-NEXT:    srl a3, a6
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a9, a4
; LX7-UNOPT-NEXT:    or a3, a3, a9
; LX7-UNOPT-NEXT:    ssl a8
; LX7-UNOPT-NEXT:    sll a6, a6
; LX7-UNOPT-NEXT:    movi.n a8, 0
; LX7-UNOPT-NEXT:    moveqz a2, a8, a7
; LX7-UNOPT-NEXT:    moveqz a3, a6, a7
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %shl = shl i33 %val, %shamt
  ret i33 %shl
}

define i64 @shl_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: shl_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a2
; OPT-NEXT:    movi.n a6, 32
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    neg a7, a4
; OPT-NEXT:    ssr a7
; OPT-NEXT:    srl a7, a5
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a8, a3
; OPT-NEXT:    sll a5, a5
; OPT-NEXT:    bltu a4, a6, .LBB1_2
; OPT-NEXT:  # %bb.1: # %entry
; OPT-NEXT:    movi.n a2, 0
; OPT-NEXT:  .LBB1_2: # %entry
; OPT-NEXT:    bgeu a4, a6, .LBB1_4
; OPT-NEXT:  # %bb.3:
; OPT-NEXT:    or a5, a7, a8
; OPT-NEXT:  .LBB1_4: # %entry
; OPT-NEXT:    moveqz a5, a3, a4
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    mov.n a5, a2
; UNOPT-NEXT:    mov.n a8, a3
; UNOPT-NEXT:    s32i.n a8, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a3, a5
; UNOPT-NEXT:    ssr a7
; UNOPT-NEXT:    srl a7, a5
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a8, a8
; UNOPT-NEXT:    or a7, a7, a8
; UNOPT-NEXT:    s32i.n a7, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    sll a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB1_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB1_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB1_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; UNOPT-NEXT:  .LBB1_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: shl_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    movi.n a5, 32
; LX7-OPT-NEXT:    saltu a7, a4, a5
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a5, a2
; LX7-OPT-NEXT:    neg a6, a4
; LX7-OPT-NEXT:    ssr a6
; LX7-OPT-NEXT:    srl a6, a2
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a8, a3
; LX7-OPT-NEXT:    or a6, a6, a8
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    movi.n a8, 0
; LX7-OPT-NEXT:    moveqz a5, a8, a7
; LX7-OPT-NEXT:    moveqz a6, a2, a7
; LX7-OPT-NEXT:    moveqz a6, a3, a4
; LX7-OPT-NEXT:    mov.n a2, a5
; LX7-OPT-NEXT:    mov.n a3, a6
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: shl_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    s32i.n a3, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a5, a4
; LX7-UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a8, a5, -32
; LX7-UNOPT-NEXT:    sub a3, a2, a5
; LX7-UNOPT-NEXT:    saltu a7, a5, a2
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a6
; LX7-UNOPT-NEXT:    ssr a3
; LX7-UNOPT-NEXT:    srl a3, a6
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a9, a4
; LX7-UNOPT-NEXT:    or a3, a3, a9
; LX7-UNOPT-NEXT:    ssl a8
; LX7-UNOPT-NEXT:    sll a6, a6
; LX7-UNOPT-NEXT:    movi.n a8, 0
; LX7-UNOPT-NEXT:    moveqz a2, a8, a7
; LX7-UNOPT-NEXT:    moveqz a3, a6, a7
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, %shamt
  ret i64 %shl
}

define i33 @lshr_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: lshr_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a5, a3, 0, 1
; OPT-NEXT:    movi.n a6, 32
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a3, a5
; OPT-NEXT:    srl a7, a2
; OPT-NEXT:    neg a8, a4
; OPT-NEXT:    ssl a8
; OPT-NEXT:    sll a8, a5
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a5, a5
; OPT-NEXT:    bltu a4, a6, .LBB2_1
; OPT-NEXT:  # %bb.2: # %entry
; OPT-NEXT:    moveqz a5, a2, a4
; OPT-NEXT:    bgeu a4, a6, .LBB2_3
; OPT-NEXT:  .LBB2_4: # %entry
; OPT-NEXT:    mov.n a2, a5
; OPT-NEXT:    ret.n
; OPT-NEXT:  .LBB2_1:
; OPT-NEXT:    or a5, a7, a8
; OPT-NEXT:    moveqz a5, a2, a4
; OPT-NEXT:    bltu a4, a6, .LBB2_4
; OPT-NEXT:  .LBB2_3: # %entry
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    mov.n a2, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    s32i.n a2, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a4, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, -1
; UNOPT-NEXT:    and a3, a3, a5
; UNOPT-NEXT:    s32i.n a3, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    extui a5, a2, 0, 1
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a8, a5
; UNOPT-NEXT:    s32i.n a8, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    ssl a7
; UNOPT-NEXT:    sll a7, a5
; UNOPT-NEXT:    or a3, a3, a7
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    srl a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB2_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB2_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    moveqz a5, a6, a2
; UNOPT-NEXT:    s32i.n a5, a1, 8 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB2_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; UNOPT-NEXT:  .LBB2_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: lshr_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a6, a3, 0, 1
; LX7-OPT-NEXT:    movi.n a3, 32
; LX7-OPT-NEXT:    saltu a7, a4, a3
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a3, a6
; LX7-OPT-NEXT:    srl a5, a2
; LX7-OPT-NEXT:    neg a8, a4
; LX7-OPT-NEXT:    ssl a8
; LX7-OPT-NEXT:    sll a8, a6
; LX7-OPT-NEXT:    or a5, a5, a8
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a6, a6
; LX7-OPT-NEXT:    moveqz a5, a6, a7
; LX7-OPT-NEXT:    moveqz a5, a2, a4
; LX7-OPT-NEXT:    movi.n a2, 0
; LX7-OPT-NEXT:    moveqz a3, a2, a7
; LX7-OPT-NEXT:    mov.n a2, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: lshr_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    movi.n a4, -1
; LX7-UNOPT-NEXT:    and a4, a2, a4
; LX7-UNOPT-NEXT:    extui a7, a3, 0, 1
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a8, a6, -32
; LX7-UNOPT-NEXT:    sub a9, a2, a6
; LX7-UNOPT-NEXT:    saltu a5, a6, a2
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a3, a7
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a2, a4
; LX7-UNOPT-NEXT:    ssl a9
; LX7-UNOPT-NEXT:    sll a9, a7
; LX7-UNOPT-NEXT:    or a2, a2, a9
; LX7-UNOPT-NEXT:    ssr a8
; LX7-UNOPT-NEXT:    srl a7, a7
; LX7-UNOPT-NEXT:    moveqz a2, a7, a5
; LX7-UNOPT-NEXT:    moveqz a2, a4, a6
; LX7-UNOPT-NEXT:    movi.n a4, 0
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i33 %val, %shamt
  ret i33 %lshr
}

define i64 @lshr_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: lshr_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a5, a3
; OPT-NEXT:    movi.n a6, 32
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a3, a3
; OPT-NEXT:    srl a7, a2
; OPT-NEXT:    neg a8, a4
; OPT-NEXT:    ssl a8
; OPT-NEXT:    sll a8, a5
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a5, a5
; OPT-NEXT:    bltu a4, a6, .LBB3_1
; OPT-NEXT:  # %bb.2: # %entry
; OPT-NEXT:    moveqz a5, a2, a4
; OPT-NEXT:    bgeu a4, a6, .LBB3_3
; OPT-NEXT:  .LBB3_4: # %entry
; OPT-NEXT:    mov.n a2, a5
; OPT-NEXT:    ret.n
; OPT-NEXT:  .LBB3_1:
; OPT-NEXT:    or a5, a7, a8
; OPT-NEXT:    moveqz a5, a2, a4
; OPT-NEXT:    bltu a4, a6, .LBB3_4
; OPT-NEXT:  .LBB3_3: # %entry
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    mov.n a2, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    s32i.n a2, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    mov.n a5, a3
; UNOPT-NEXT:    l32i.n a3, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a4, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a8, a5
; UNOPT-NEXT:    s32i.n a8, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    ssl a7
; UNOPT-NEXT:    sll a7, a5
; UNOPT-NEXT:    or a3, a3, a7
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    srl a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB3_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB3_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    moveqz a5, a6, a2
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    s32i.n a5, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB3_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 20 # 4-byte Spill
; UNOPT-NEXT:  .LBB3_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: lshr_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    movi.n a5, 32
; LX7-OPT-NEXT:    saltu a7, a4, a5
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a5, a3
; LX7-OPT-NEXT:    srl a6, a2
; LX7-OPT-NEXT:    neg a8, a4
; LX7-OPT-NEXT:    ssl a8
; LX7-OPT-NEXT:    sll a8, a3
; LX7-OPT-NEXT:    or a6, a6, a8
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a3, a3
; LX7-OPT-NEXT:    moveqz a6, a3, a7
; LX7-OPT-NEXT:    moveqz a6, a2, a4
; LX7-OPT-NEXT:    movi.n a2, 0
; LX7-OPT-NEXT:    moveqz a5, a2, a7
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    mov.n a3, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: lshr_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a7, a3
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a8, a6, -32
; LX7-UNOPT-NEXT:    sub a9, a2, a6
; LX7-UNOPT-NEXT:    saltu a5, a6, a2
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a3, a7
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a2, a4
; LX7-UNOPT-NEXT:    ssl a9
; LX7-UNOPT-NEXT:    sll a9, a7
; LX7-UNOPT-NEXT:    or a2, a2, a9
; LX7-UNOPT-NEXT:    ssr a8
; LX7-UNOPT-NEXT:    srl a7, a7
; LX7-UNOPT-NEXT:    moveqz a2, a7, a5
; LX7-UNOPT-NEXT:    moveqz a2, a4, a6
; LX7-UNOPT-NEXT:    movi.n a4, 0
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, %shamt
  ret i64 %lshr
}

define i33 @ashr_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: ashr_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a5, a2, 31
; OPT-NEXT:    slli a3, a3, 31
; OPT-NEXT:    srli a2, a2, 1
; OPT-NEXT:    or a2, a3, a2
; OPT-NEXT:    extui a3, a5, 31, 1
; OPT-NEXT:    slli a5, a2, 1
; OPT-NEXT:    or a7, a3, a5
; OPT-NEXT:    srai a5, a2, 31
; OPT-NEXT:    movi.n a6, 32
; OPT-NEXT:    ssr a4
; OPT-NEXT:    sra a3, a5
; OPT-NEXT:    srl a8, a7
; OPT-NEXT:    neg a2, a4
; OPT-NEXT:    ssl a2
; OPT-NEXT:    sll a9, a5
; OPT-NEXT:    ssr a4
; OPT-NEXT:    sra a2, a5
; OPT-NEXT:    bltu a4, a6, .LBB4_1
; OPT-NEXT:  # %bb.2: # %entry
; OPT-NEXT:    moveqz a2, a7, a4
; OPT-NEXT:    bgeu a4, a6, .LBB4_3
; OPT-NEXT:  .LBB4_4: # %entry
; OPT-NEXT:    ret.n
; OPT-NEXT:  .LBB4_1:
; OPT-NEXT:    or a2, a8, a9
; OPT-NEXT:    moveqz a2, a7, a4
; OPT-NEXT:    bltu a4, a6, .LBB4_4
; OPT-NEXT:  .LBB4_3: # %entry
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    mov.n a5, a2
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    s32i.n a4, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    slli a3, a5, 31
; UNOPT-NEXT:    slli a2, a2, 31
; UNOPT-NEXT:    srli a5, a5, 1
; UNOPT-NEXT:    or a2, a2, a5
; UNOPT-NEXT:    extui a3, a3, 31, 1
; UNOPT-NEXT:    slli a5, a2, 1
; UNOPT-NEXT:    or a3, a3, a5
; UNOPT-NEXT:    s32i.n a3, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    srai a5, a2, 31
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    sra a8, a5
; UNOPT-NEXT:    s32i.n a8, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    ssl a7
; UNOPT-NEXT:    sll a7, a5
; UNOPT-NEXT:    or a3, a3, a7
; UNOPT-NEXT:    srai a7, a5, 31
; UNOPT-NEXT:    s32i.n a7, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    sra a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB4_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB4_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    moveqz a5, a6, a2
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB4_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; UNOPT-NEXT:  .LBB4_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: ashr_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    slli a5, a2, 31
; LX7-OPT-NEXT:    slli a3, a3, 31
; LX7-OPT-NEXT:    srli a2, a2, 1
; LX7-OPT-NEXT:    or a2, a3, a2
; LX7-OPT-NEXT:    extui a3, a5, 31, 1
; LX7-OPT-NEXT:    slli a5, a2, 1
; LX7-OPT-NEXT:    or a5, a3, a5
; LX7-OPT-NEXT:    srai a6, a2, 31
; LX7-OPT-NEXT:    movi.n a2, 32
; LX7-OPT-NEXT:    saltu a7, a4, a2
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    sra a3, a6
; LX7-OPT-NEXT:    srl a2, a5
; LX7-OPT-NEXT:    neg a8, a4
; LX7-OPT-NEXT:    ssl a8
; LX7-OPT-NEXT:    sll a8, a6
; LX7-OPT-NEXT:    or a2, a2, a8
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    sra a8, a6
; LX7-OPT-NEXT:    moveqz a2, a8, a7
; LX7-OPT-NEXT:    moveqz a2, a5, a4
; LX7-OPT-NEXT:    moveqz a3, a6, a7
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: ashr_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    mov.n a7, a4
; LX7-UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    slli a3, a4, 31
; LX7-UNOPT-NEXT:    slli a2, a2, 31
; LX7-UNOPT-NEXT:    srli a4, a4, 1
; LX7-UNOPT-NEXT:    or a2, a2, a4
; LX7-UNOPT-NEXT:    extui a3, a3, 31, 1
; LX7-UNOPT-NEXT:    slli a4, a2, 1
; LX7-UNOPT-NEXT:    or a6, a3, a4
; LX7-UNOPT-NEXT:    srai a8, a2, 31
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a9, a7, -32
; LX7-UNOPT-NEXT:    sub a4, a2, a7
; LX7-UNOPT-NEXT:    saltu a5, a7, a2
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    sra a3, a8
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    srl a2, a6
; LX7-UNOPT-NEXT:    ssl a4
; LX7-UNOPT-NEXT:    sll a4, a8
; LX7-UNOPT-NEXT:    or a2, a2, a4
; LX7-UNOPT-NEXT:    srai a4, a8, 31
; LX7-UNOPT-NEXT:    ssr a9
; LX7-UNOPT-NEXT:    sra a8, a8
; LX7-UNOPT-NEXT:    moveqz a2, a8, a5
; LX7-UNOPT-NEXT:    moveqz a2, a6, a7
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i33 %val, %shamt
  ret i33 %ashr
}

define i64 @ashr_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: ashr_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    movi.n a7, 32
; OPT-NEXT:    ssr a4
; OPT-NEXT:    sra a5, a3
; OPT-NEXT:    srl a8, a2
; OPT-NEXT:    neg a6, a4
; OPT-NEXT:    ssl a6
; OPT-NEXT:    sll a9, a3
; OPT-NEXT:    ssr a4
; OPT-NEXT:    sra a6, a3
; OPT-NEXT:    bgeu a4, a7, .LBB5_2
; OPT-NEXT:  # %bb.1:
; OPT-NEXT:    or a6, a8, a9
; OPT-NEXT:  .LBB5_2: # %entry
; OPT-NEXT:    moveqz a6, a2, a4
; OPT-NEXT:    bltu a4, a7, .LBB5_4
; OPT-NEXT:  # %bb.3: # %entry
; OPT-NEXT:    srai a5, a3, 31
; OPT-NEXT:  .LBB5_4: # %entry
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -48
; UNOPT-NEXT:    s32i.n a2, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    mov.n a5, a3
; UNOPT-NEXT:    l32i.n a3, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a4, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a2, 32
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    addi a6, a4, -32
; UNOPT-NEXT:    sub a7, a2, a4
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    sra a8, a5
; UNOPT-NEXT:    s32i.n a8, a1, 32 # 4-byte Spill
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    ssl a7
; UNOPT-NEXT:    sll a7, a5
; UNOPT-NEXT:    or a3, a3, a7
; UNOPT-NEXT:    srai a7, a5, 31
; UNOPT-NEXT:    s32i.n a7, a1, 36 # 4-byte Spill
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    sra a5, a5
; UNOPT-NEXT:    s32i.n a5, a1, 40 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a3, a1, 44 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB5_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 40 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 44 # 4-byte Spill
; UNOPT-NEXT:  .LBB5_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 32 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 44 # 4-byte Reload
; UNOPT-NEXT:    moveqz a5, a6, a2
; UNOPT-NEXT:    s32i.n a5, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB5_5
; UNOPT-NEXT:  # %bb.4: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 36 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 16 # 4-byte Spill
; UNOPT-NEXT:  .LBB5_5: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 48
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: ashr_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    movi.n a5, 32
; LX7-OPT-NEXT:    saltu a7, a4, a5
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    sra a5, a3
; LX7-OPT-NEXT:    srl a6, a2
; LX7-OPT-NEXT:    neg a8, a4
; LX7-OPT-NEXT:    ssl a8
; LX7-OPT-NEXT:    sll a8, a3
; LX7-OPT-NEXT:    or a6, a6, a8
; LX7-OPT-NEXT:    srai a8, a3, 31
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    sra a3, a3
; LX7-OPT-NEXT:    moveqz a6, a3, a7
; LX7-OPT-NEXT:    moveqz a6, a2, a4
; LX7-OPT-NEXT:    moveqz a5, a8, a7
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    mov.n a3, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: ashr_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    mov.n a8, a3
; LX7-UNOPT-NEXT:    mov.n a7, a4
; LX7-UNOPT-NEXT:    movi.n a2, 32
; LX7-UNOPT-NEXT:    addi a9, a7, -32
; LX7-UNOPT-NEXT:    sub a4, a2, a7
; LX7-UNOPT-NEXT:    saltu a5, a7, a2
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    sra a3, a8
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    srl a2, a6
; LX7-UNOPT-NEXT:    ssl a4
; LX7-UNOPT-NEXT:    sll a4, a8
; LX7-UNOPT-NEXT:    or a2, a2, a4
; LX7-UNOPT-NEXT:    srai a4, a8, 31
; LX7-UNOPT-NEXT:    ssr a9
; LX7-UNOPT-NEXT:    sra a8, a8
; LX7-UNOPT-NEXT:    moveqz a2, a8, a5
; LX7-UNOPT-NEXT:    moveqz a2, a6, a7
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, %shamt
  ret i64 %ashr
}
