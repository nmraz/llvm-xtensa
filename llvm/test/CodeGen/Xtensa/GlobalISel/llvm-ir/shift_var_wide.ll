; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i33 @shl_i33(i33 %val, i33 %shamt) {
; CHECK-LABEL: shl_i33:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 32
; CHECK-NEXT:    sub a7, a4, a5
; CHECK-NEXT:    saltu a8, a4, a5
; CHECK-NEXT:    ssl a4
; CHECK-NEXT:    sll a5, a2
; CHECK-NEXT:    srl a6, a2
; CHECK-NEXT:    sll a9, a3
; CHECK-NEXT:    or a6, a6, a9
; CHECK-NEXT:    movi.n a9, 0
; CHECK-NEXT:    ssl a7
; CHECK-NEXT:    sll a2, a2
; CHECK-NEXT:    moveqz a5, a9, a8
; CHECK-NEXT:    moveqz a6, a2, a8
; CHECK-NEXT:    moveqz a6, a3, a4
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    mov.n a3, a6
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i33 %val, %shamt
  ret i33 %shl
}

define i64 @shl_i64(i64 %val, i64 %shamt) {
; CHECK-LABEL: shl_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 32
; CHECK-NEXT:    sub a7, a4, a5
; CHECK-NEXT:    saltu a8, a4, a5
; CHECK-NEXT:    ssl a4
; CHECK-NEXT:    sll a5, a2
; CHECK-NEXT:    srl a6, a2
; CHECK-NEXT:    sll a9, a3
; CHECK-NEXT:    or a6, a6, a9
; CHECK-NEXT:    movi.n a9, 0
; CHECK-NEXT:    ssl a7
; CHECK-NEXT:    sll a2, a2
; CHECK-NEXT:    moveqz a5, a9, a8
; CHECK-NEXT:    moveqz a6, a2, a8
; CHECK-NEXT:    moveqz a6, a3, a4
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    mov.n a3, a6
; CHECK-NEXT:    ret.n
entry:
  %shl = shl i64 %val, %shamt
  ret i64 %shl
}

define i33 @lshr_i33(i33 %val, i33 %shamt) {
; CHECK-LABEL: lshr_i33:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a6, a3, 0, 1
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    sub a7, a4, a3
; CHECK-NEXT:    saltu a8, a4, a3
; CHECK-NEXT:    ssr a4
; CHECK-NEXT:    srl a3, a6
; CHECK-NEXT:    srl a5, a2
; CHECK-NEXT:    sll a9, a6
; CHECK-NEXT:    or a5, a5, a9
; CHECK-NEXT:    movi.n a9, 0
; CHECK-NEXT:    ssr a7
; CHECK-NEXT:    srl a6, a6
; CHECK-NEXT:    moveqz a5, a6, a8
; CHECK-NEXT:    moveqz a5, a2, a4
; CHECK-NEXT:    moveqz a3, a9, a8
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i33 %val, %shamt
  ret i33 %lshr
}

define i64 @lshr_i64(i64 %val, i64 %shamt) {
; CHECK-LABEL: lshr_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 32
; CHECK-NEXT:    sub a7, a4, a5
; CHECK-NEXT:    saltu a8, a4, a5
; CHECK-NEXT:    ssr a4
; CHECK-NEXT:    srl a5, a3
; CHECK-NEXT:    srl a6, a2
; CHECK-NEXT:    sll a9, a3
; CHECK-NEXT:    or a6, a6, a9
; CHECK-NEXT:    movi.n a9, 0
; CHECK-NEXT:    ssr a7
; CHECK-NEXT:    srl a3, a3
; CHECK-NEXT:    moveqz a6, a3, a8
; CHECK-NEXT:    moveqz a6, a2, a4
; CHECK-NEXT:    moveqz a5, a9, a8
; CHECK-NEXT:    mov.n a2, a6
; CHECK-NEXT:    mov.n a3, a5
; CHECK-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, %shamt
  ret i64 %lshr
}

define i33 @ashr_i33(i33 %val, i33 %shamt) {
; CHECK-LABEL: ashr_i33:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli a5, a2, 31
; CHECK-NEXT:    slli a3, a3, 31
; CHECK-NEXT:    srli a2, a2, 1
; CHECK-NEXT:    or a2, a3, a2
; CHECK-NEXT:    extui a3, a5, 31, 1
; CHECK-NEXT:    slli a5, a2, 1
; CHECK-NEXT:    or a5, a3, a5
; CHECK-NEXT:    srai a6, a2, 31
; CHECK-NEXT:    movi.n a2, 32
; CHECK-NEXT:    sub a7, a4, a2
; CHECK-NEXT:    saltu a8, a4, a2
; CHECK-NEXT:    ssr a4
; CHECK-NEXT:    sra a3, a6
; CHECK-NEXT:    srl a2, a5
; CHECK-NEXT:    sll a9, a6
; CHECK-NEXT:    or a2, a2, a9
; CHECK-NEXT:    ssr a7
; CHECK-NEXT:    sra a7, a6
; CHECK-NEXT:    moveqz a2, a7, a8
; CHECK-NEXT:    moveqz a2, a5, a4
; CHECK-NEXT:    moveqz a3, a6, a8
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i33 %val, %shamt
  ret i33 %ashr
}

define i64 @ashr_i64(i64 %val, i64 %shamt) {
; CHECK-LABEL: ashr_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 32
; CHECK-NEXT:    sub a7, a4, a5
; CHECK-NEXT:    saltu a8, a4, a5
; CHECK-NEXT:    ssr a4
; CHECK-NEXT:    sra a5, a3
; CHECK-NEXT:    srl a6, a2
; CHECK-NEXT:    sll a9, a3
; CHECK-NEXT:    or a6, a6, a9
; CHECK-NEXT:    srai a9, a3, 31
; CHECK-NEXT:    ssr a7
; CHECK-NEXT:    sra a3, a3
; CHECK-NEXT:    moveqz a6, a3, a8
; CHECK-NEXT:    moveqz a6, a2, a4
; CHECK-NEXT:    moveqz a5, a9, a8
; CHECK-NEXT:    mov.n a2, a6
; CHECK-NEXT:    mov.n a3, a5
; CHECK-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, %shamt
  ret i64 %ashr
}
