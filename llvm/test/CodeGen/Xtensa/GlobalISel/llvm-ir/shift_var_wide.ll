; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-OPT
; RUN: llc -O0 < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-UNOPT

define i33 @shl_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: shl_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a5, a4, 5, 1
; OPT-NEXT:    ssl a4
; OPT-NEXT:    src a4, a2, a3
; OPT-NEXT:    sll a6, a2
; OPT-NEXT:    mov.n a3, a6
; OPT-NEXT:    moveqz a3, a4, a5
; OPT-NEXT:    movi.n a2, 0
; OPT-NEXT:    moveqz a2, a6, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    mov.n a6, a4
; UNOPT-NEXT:    extui a5, a6, 5, 1
; UNOPT-NEXT:    extui a4, a6, 0, 5
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    src a2, a3, a2
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a4, a3
; UNOPT-NEXT:    mov.n a3, a4
; UNOPT-NEXT:    moveqz a3, a2, a5
; UNOPT-NEXT:    movi.n a2, 0
; UNOPT-NEXT:    moveqz a2, a4, a5
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: shl_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a5, a4, 5, 1
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    src a4, a2, a3
; LX7-OPT-NEXT:    sll a6, a2
; LX7-OPT-NEXT:    mov.n a3, a6
; LX7-OPT-NEXT:    moveqz a3, a4, a5
; LX7-OPT-NEXT:    movi.n a2, 0
; LX7-OPT-NEXT:    moveqz a2, a6, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: shl_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    extui a5, a6, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a6, 0, 5
; LX7-UNOPT-NEXT:    ssl a6
; LX7-UNOPT-NEXT:    src a2, a3, a2
; LX7-UNOPT-NEXT:    ssl a4
; LX7-UNOPT-NEXT:    sll a4, a3
; LX7-UNOPT-NEXT:    mov.n a3, a4
; LX7-UNOPT-NEXT:    moveqz a3, a2, a5
; LX7-UNOPT-NEXT:    movi.n a2, 0
; LX7-UNOPT-NEXT:    moveqz a2, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %shl = shl i33 %val, %shamt
  ret i33 %shl
}

define i64 @shl_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: shl_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a5, a4, 5, 1
; OPT-NEXT:    ssl a4
; OPT-NEXT:    src a4, a2, a3
; OPT-NEXT:    sll a6, a2
; OPT-NEXT:    mov.n a3, a6
; OPT-NEXT:    moveqz a3, a4, a5
; OPT-NEXT:    movi.n a2, 0
; OPT-NEXT:    moveqz a2, a6, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: shl_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    mov.n a6, a4
; UNOPT-NEXT:    extui a5, a6, 5, 1
; UNOPT-NEXT:    extui a4, a6, 0, 5
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    src a2, a3, a2
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    sll a4, a3
; UNOPT-NEXT:    mov.n a3, a4
; UNOPT-NEXT:    moveqz a3, a2, a5
; UNOPT-NEXT:    movi.n a2, 0
; UNOPT-NEXT:    moveqz a2, a4, a5
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: shl_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a5, a4, 5, 1
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    src a4, a2, a3
; LX7-OPT-NEXT:    sll a6, a2
; LX7-OPT-NEXT:    mov.n a3, a6
; LX7-OPT-NEXT:    moveqz a3, a4, a5
; LX7-OPT-NEXT:    movi.n a2, 0
; LX7-OPT-NEXT:    moveqz a2, a6, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: shl_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    extui a5, a6, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a6, 0, 5
; LX7-UNOPT-NEXT:    ssl a6
; LX7-UNOPT-NEXT:    src a2, a3, a2
; LX7-UNOPT-NEXT:    ssl a4
; LX7-UNOPT-NEXT:    sll a4, a3
; LX7-UNOPT-NEXT:    mov.n a3, a4
; LX7-UNOPT-NEXT:    moveqz a3, a2, a5
; LX7-UNOPT-NEXT:    movi.n a2, 0
; LX7-UNOPT-NEXT:    moveqz a2, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %shl = shl i64 %val, %shamt
  ret i64 %shl
}

define i33 @lshr_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: lshr_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a3, a3, 0, 1
; OPT-NEXT:    extui a5, a4, 5, 1
; OPT-NEXT:    ssr a4
; OPT-NEXT:    src a4, a3, a2
; OPT-NEXT:    srl a6, a3
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    moveqz a2, a4, a5
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    moveqz a3, a6, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    mov.n a6, a4
; UNOPT-NEXT:    movi.n a4, -1
; UNOPT-NEXT:    and a3, a3, a4
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    extui a5, a6, 5, 1
; UNOPT-NEXT:    extui a4, a6, 0, 5
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    src a3, a2, a3
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a4, a2
; UNOPT-NEXT:    mov.n a2, a4
; UNOPT-NEXT:    moveqz a2, a3, a5
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: lshr_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a3, a3, 0, 1
; LX7-OPT-NEXT:    extui a5, a4, 5, 1
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    src a4, a3, a2
; LX7-OPT-NEXT:    srl a6, a3
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    moveqz a2, a4, a5
; LX7-OPT-NEXT:    movi.n a3, 0
; LX7-OPT-NEXT:    moveqz a3, a6, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: lshr_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    movi.n a4, -1
; LX7-UNOPT-NEXT:    and a3, a3, a4
; LX7-UNOPT-NEXT:    extui a2, a2, 0, 1
; LX7-UNOPT-NEXT:    extui a5, a6, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a6, 0, 5
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    src a3, a2, a3
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a4, a2
; LX7-UNOPT-NEXT:    mov.n a2, a4
; LX7-UNOPT-NEXT:    moveqz a2, a3, a5
; LX7-UNOPT-NEXT:    movi.n a3, 0
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i33 %val, %shamt
  ret i33 %lshr
}

define i64 @lshr_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: lshr_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a5, a4, 5, 1
; OPT-NEXT:    ssr a4
; OPT-NEXT:    src a4, a3, a2
; OPT-NEXT:    srl a6, a3
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    moveqz a2, a4, a5
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    moveqz a3, a6, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: lshr_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    mov.n a6, a4
; UNOPT-NEXT:    extui a5, a6, 5, 1
; UNOPT-NEXT:    extui a4, a6, 0, 5
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    src a3, a2, a3
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a4, a2
; UNOPT-NEXT:    mov.n a2, a4
; UNOPT-NEXT:    moveqz a2, a3, a5
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: lshr_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a5, a4, 5, 1
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    src a4, a3, a2
; LX7-OPT-NEXT:    srl a6, a3
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    moveqz a2, a4, a5
; LX7-OPT-NEXT:    movi.n a3, 0
; LX7-OPT-NEXT:    moveqz a3, a6, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: lshr_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    mov.n a6, a4
; LX7-UNOPT-NEXT:    extui a5, a6, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a6, 0, 5
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    src a3, a2, a3
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a4, a2
; LX7-UNOPT-NEXT:    mov.n a2, a4
; LX7-UNOPT-NEXT:    moveqz a2, a3, a5
; LX7-UNOPT-NEXT:    movi.n a3, 0
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %lshr = lshr i64 %val, %shamt
  ret i64 %lshr
}

define i33 @ashr_i33(i33 %val, i33 %shamt) {
; OPT-LABEL: ashr_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    slli a5, a2, 31
; OPT-NEXT:    ssai 1
; OPT-NEXT:    src a2, a3, a2
; OPT-NEXT:    ssai 31
; OPT-NEXT:    src a5, a2, a5
; OPT-NEXT:    srai a3, a2, 31
; OPT-NEXT:    extui a6, a4, 5, 1
; OPT-NEXT:    ssr a4
; OPT-NEXT:    src a4, a3, a5
; OPT-NEXT:    sra a5, a3
; OPT-NEXT:    mov.n a2, a5
; OPT-NEXT:    moveqz a2, a4, a6
; OPT-NEXT:    moveqz a3, a5, a6
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    mov.n a7, a4
; UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    slli a3, a4, 31
; UNOPT-NEXT:    slli a2, a2, 31
; UNOPT-NEXT:    srli a4, a4, 1
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    extui a3, a3, 31, 1
; UNOPT-NEXT:    slli a4, a2, 1
; UNOPT-NEXT:    or a6, a3, a4
; UNOPT-NEXT:    srai a2, a2, 31
; UNOPT-NEXT:    extui a5, a7, 5, 1
; UNOPT-NEXT:    extui a4, a7, 0, 5
; UNOPT-NEXT:    srai a3, a2, 31
; UNOPT-NEXT:    ssr a7
; UNOPT-NEXT:    src a6, a2, a6
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    sra a4, a2
; UNOPT-NEXT:    mov.n a2, a4
; UNOPT-NEXT:    moveqz a2, a6, a5
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: ashr_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    slli a5, a2, 31
; LX7-OPT-NEXT:    ssai 1
; LX7-OPT-NEXT:    src a2, a3, a2
; LX7-OPT-NEXT:    ssai 31
; LX7-OPT-NEXT:    src a5, a2, a5
; LX7-OPT-NEXT:    srai a3, a2, 31
; LX7-OPT-NEXT:    extui a6, a4, 5, 1
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    src a4, a3, a5
; LX7-OPT-NEXT:    sra a5, a3
; LX7-OPT-NEXT:    mov.n a2, a5
; LX7-OPT-NEXT:    moveqz a2, a4, a6
; LX7-OPT-NEXT:    moveqz a3, a5, a6
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: ashr_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    mov.n a7, a4
; LX7-UNOPT-NEXT:    l32i.n a4, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    slli a3, a4, 31
; LX7-UNOPT-NEXT:    slli a2, a2, 31
; LX7-UNOPT-NEXT:    srli a4, a4, 1
; LX7-UNOPT-NEXT:    or a2, a2, a4
; LX7-UNOPT-NEXT:    extui a3, a3, 31, 1
; LX7-UNOPT-NEXT:    slli a4, a2, 1
; LX7-UNOPT-NEXT:    or a6, a3, a4
; LX7-UNOPT-NEXT:    srai a2, a2, 31
; LX7-UNOPT-NEXT:    extui a5, a7, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a7, 0, 5
; LX7-UNOPT-NEXT:    srai a3, a2, 31
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    src a6, a2, a6
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    sra a4, a2
; LX7-UNOPT-NEXT:    mov.n a2, a4
; LX7-UNOPT-NEXT:    moveqz a2, a6, a5
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i33 %val, %shamt
  ret i33 %ashr
}

define i64 @ashr_i64(i64 %val, i64 %shamt) {
; OPT-LABEL: ashr_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a6, a4, 5, 1
; OPT-NEXT:    srai a5, a3, 31
; OPT-NEXT:    ssr a4
; OPT-NEXT:    src a4, a3, a2
; OPT-NEXT:    sra a3, a3
; OPT-NEXT:    mov.n a2, a3
; OPT-NEXT:    moveqz a2, a4, a6
; OPT-NEXT:    moveqz a5, a3, a6
; OPT-NEXT:    mov.n a3, a5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: ashr_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a6, a2
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    mov.n a7, a4
; UNOPT-NEXT:    extui a5, a7, 5, 1
; UNOPT-NEXT:    extui a4, a7, 0, 5
; UNOPT-NEXT:    srai a3, a2, 31
; UNOPT-NEXT:    ssr a7
; UNOPT-NEXT:    src a6, a2, a6
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    sra a4, a2
; UNOPT-NEXT:    mov.n a2, a4
; UNOPT-NEXT:    moveqz a2, a6, a5
; UNOPT-NEXT:    moveqz a3, a4, a5
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: ashr_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    extui a6, a4, 5, 1
; LX7-OPT-NEXT:    srai a5, a3, 31
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    src a4, a3, a2
; LX7-OPT-NEXT:    sra a3, a3
; LX7-OPT-NEXT:    mov.n a2, a3
; LX7-OPT-NEXT:    moveqz a2, a4, a6
; LX7-OPT-NEXT:    moveqz a5, a3, a6
; LX7-OPT-NEXT:    mov.n a3, a5
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: ashr_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    mov.n a7, a4
; LX7-UNOPT-NEXT:    extui a5, a7, 5, 1
; LX7-UNOPT-NEXT:    extui a4, a7, 0, 5
; LX7-UNOPT-NEXT:    srai a3, a2, 31
; LX7-UNOPT-NEXT:    ssr a7
; LX7-UNOPT-NEXT:    src a6, a2, a6
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    sra a4, a2
; LX7-UNOPT-NEXT:    mov.n a2, a4
; LX7-UNOPT-NEXT:    moveqz a2, a6, a5
; LX7-UNOPT-NEXT:    moveqz a3, a4, a5
; LX7-UNOPT-NEXT:    ret.n
entry:
  %ashr = ashr i64 %val, %shamt
  ret i64 %ashr
}
