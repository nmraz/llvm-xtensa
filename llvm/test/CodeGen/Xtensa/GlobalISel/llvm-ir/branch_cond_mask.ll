; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

declare void @func()

define void @branch_mask_nez(i32 %a, i32 %b) {
; CHECK-LABEL: branch_mask_nez:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnone a3, a2, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB0_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %and = and i32 %b, %a
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:
  tail call void @func()
  br label %if.end

if.end:
  ret void
}

define void @branch_mask_eqz(i32 %a, i32 %b) {
; CHECK-LABEL: branch_mask_eqz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bany a3, a2, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB1_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %and = and i32 %b, %a
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:
  tail call void @func()
  br label %if.end

if.end:
  ret void
}

define void @branch_nmask_nez(i32 %a, i32 %b) {
; CHECK-LABEL: branch_nmask_nez:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    and a3, a2, a3
; CHECK-NEXT:    xor a2, a3, a2
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB2_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB2_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %neg = xor i32 %b, -1
  %and = and i32 %neg, %a
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:
  tail call void @func()
  br label %if.end

if.end:
  ret void
}

define void @branch_nmask_eqz(i32 %a, i32 %b) {
; CHECK-LABEL: branch_nmask_eqz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    and a3, a2, a3
; CHECK-NEXT:    xor a2, a3, a2
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnez a2, .LBB3_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB3_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %neg = xor i32 %b, -1
  %and = and i32 %neg, %a
  %tobool.not = icmp eq i32 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:
  tail call void @func()
  br label %if.end

if.end:
  ret void
}
