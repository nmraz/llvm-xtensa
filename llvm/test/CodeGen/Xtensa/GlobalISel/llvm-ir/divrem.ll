; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i8 @sdiv_i8(i8 %a, i8 %b) {
; OPT-LABEL: sdiv_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    slli a2, a2, 24
; OPT-NEXT:    srai a2, a2, 24
; OPT-NEXT:    slli a3, a3, 24
; OPT-NEXT:    srai a3, a3, 24
; OPT-NEXT:    quos a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sdiv_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    slli a2, a2, 24
; UNOPT-NEXT:    srai a2, a2, 24
; UNOPT-NEXT:    slli a3, a3, 24
; UNOPT-NEXT:    srai a3, a3, 24
; UNOPT-NEXT:    quos a2, a2, a3
; UNOPT-NEXT:    ret.n
  %sdiv = sdiv i8 %a, %b
  ret i8 %sdiv
}

define i8 @udiv_i8(i8 %a, i8 %b) {
; OPT-LABEL: udiv_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 8
; OPT-NEXT:    extui a3, a3, 0, 8
; OPT-NEXT:    quou a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: udiv_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a2, a2, 0, 8
; UNOPT-NEXT:    extui a3, a3, 0, 8
; UNOPT-NEXT:    quou a2, a2, a3
; UNOPT-NEXT:    ret.n
  %udiv = udiv i8 %a, %b
  ret i8 %udiv
}

define i8 @srem_i8(i8 %a, i8 %b) {
; OPT-LABEL: srem_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    slli a2, a2, 24
; OPT-NEXT:    srai a2, a2, 24
; OPT-NEXT:    slli a3, a3, 24
; OPT-NEXT:    srai a3, a3, 24
; OPT-NEXT:    rems a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: srem_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    slli a2, a2, 24
; UNOPT-NEXT:    srai a2, a2, 24
; UNOPT-NEXT:    slli a3, a3, 24
; UNOPT-NEXT:    srai a3, a3, 24
; UNOPT-NEXT:    rems a2, a2, a3
; UNOPT-NEXT:    ret.n
  %srem = srem i8 %a, %b
  ret i8 %srem
}

define i8 @urem_i8(i8 %a, i8 %b) {
; OPT-LABEL: urem_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 8
; OPT-NEXT:    extui a3, a3, 0, 8
; OPT-NEXT:    remu a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: urem_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a2, a2, 0, 8
; UNOPT-NEXT:    extui a3, a3, 0, 8
; UNOPT-NEXT:    remu a2, a2, a3
; UNOPT-NEXT:    ret.n
  %urem = urem i8 %a, %b
  ret i8 %urem
}

define i16 @sdiv_i16(i16 %a, i16 %b) {
; OPT-LABEL: sdiv_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    srai a2, a2, 16
; OPT-NEXT:    slli a3, a3, 16
; OPT-NEXT:    srai a3, a3, 16
; OPT-NEXT:    quos a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sdiv_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    srai a2, a2, 16
; UNOPT-NEXT:    slli a3, a3, 16
; UNOPT-NEXT:    srai a3, a3, 16
; UNOPT-NEXT:    quos a2, a2, a3
; UNOPT-NEXT:    ret.n
  %sdiv = sdiv i16 %a, %b
  ret i16 %sdiv
}

define i16 @udiv_i16(i16 %a, i16 %b) {
; OPT-LABEL: udiv_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 16
; OPT-NEXT:    extui a3, a3, 0, 16
; OPT-NEXT:    quou a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: udiv_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    extui a3, a3, 0, 16
; UNOPT-NEXT:    quou a2, a2, a3
; UNOPT-NEXT:    ret.n
  %udiv = udiv i16 %a, %b
  ret i16 %udiv
}

define i16 @srem_i16(i16 %a, i16 %b) {
; OPT-LABEL: srem_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    srai a2, a2, 16
; OPT-NEXT:    slli a3, a3, 16
; OPT-NEXT:    srai a3, a3, 16
; OPT-NEXT:    rems a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: srem_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    srai a2, a2, 16
; UNOPT-NEXT:    slli a3, a3, 16
; UNOPT-NEXT:    srai a3, a3, 16
; UNOPT-NEXT:    rems a2, a2, a3
; UNOPT-NEXT:    ret.n
  %srem = srem i16 %a, %b
  ret i16 %srem
}

define i16 @urem_i16(i16 %a, i16 %b) {
; OPT-LABEL: urem_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a2, a2, 0, 16
; OPT-NEXT:    extui a3, a3, 0, 16
; OPT-NEXT:    remu a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: urem_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    extui a3, a3, 0, 16
; UNOPT-NEXT:    remu a2, a2, a3
; UNOPT-NEXT:    ret.n
  %urem = urem i16 %a, %b
  ret i16 %urem
}

define i32 @sdiv_i32(i32 %a, i32 %b) {
; OPT-LABEL: sdiv_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    quos a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sdiv_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    quos a2, a2, a3
; UNOPT-NEXT:    ret.n
  %sdiv = sdiv i32 %a, %b
  ret i32 %sdiv
}

define i32 @udiv_i32(i32 %a, i32 %b) {
; OPT-LABEL: udiv_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    quou a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: udiv_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    quou a2, a2, a3
; UNOPT-NEXT:    ret.n
  %udiv = udiv i32 %a, %b
  ret i32 %udiv
}

define i32 @srem_i32(i32 %a, i32 %b) {
; OPT-LABEL: srem_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    rems a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: srem_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    rems a2, a2, a3
; UNOPT-NEXT:    ret.n
  %srem = srem i32 %a, %b
  ret i32 %srem
}

define i32 @urem_i32(i32 %a, i32 %b) {
; OPT-LABEL: urem_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    remu a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: urem_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    remu a2, a2, a3
; UNOPT-NEXT:    ret.n
  %urem = urem i32 %a, %b
  ret i32 %urem
}

define i64 @sdiv_i64(i64 %a, i64 %b) {
; OPT-LABEL: sdiv_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    call0 __divdi3
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sdiv_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    call0 __divdi3
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %sdiv = sdiv i64 %a, %b
  ret i64 %sdiv
}

define i64 @udiv_i64(i64 %a, i64 %b) {
; OPT-LABEL: udiv_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    call0 __udivdi3
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: udiv_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    call0 __udivdi3
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %udiv = udiv i64 %a, %b
  ret i64 %udiv
}

define i64 @srem_i64(i64 %a, i64 %b) {
; OPT-LABEL: srem_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    call0 __moddi3
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: srem_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    call0 __moddi3
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %srem = srem i64 %a, %b
  ret i64 %srem
}

define i64 @urem_i64(i64 %a, i64 %b) {
; OPT-LABEL: urem_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; OPT-NEXT:    call0 __umoddi3
; OPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: urem_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    call0 __umoddi3
; UNOPT-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %urem = urem i64 %a, %b
  ret i64 %urem
}
