; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define void @branch_eq(i32 %a, i32 %b) {
; CHECK-LABEL: branch_eq:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bne a2, a3, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB0_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @func(...)

define void @branch_ne(i32 %a, i32 %b) {
; CHECK-LABEL: branch_ne:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beq a2, a3, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB1_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, %b
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eqz(i32 %a) {
; CHECK-LABEL: branch_eqz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnez a2, .LBB2_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB2_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_nez(i32 %a) {
; CHECK-LABEL: branch_nez:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB3_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB3_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 0
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt(i32 %a, i32 %b) {
; CHECK-LABEL: branch_slt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bge a2, a3, .LBB4_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB4_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle(i32 %a, i32 %b) {
; CHECK-LABEL: branch_sle:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    blt a3, a2, .LBB5_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB5_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp sgt i32 %a, %b
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt(i32 %a, i32 %b) {
; CHECK-LABEL: branch_sgt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bge a3, a2, .LBB6_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB6_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge(i32 %a, i32 %b) {
; CHECK-LABEL: branch_sge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    blt a2, a3, .LBB7_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB7_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp slt i32 %a, %b
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sltz(i32 %a) {
; CHECK-LABEL: branch_sltz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgez a2, .LBB8_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB8_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slez(i32 %a) {
; CHECK-LABEL: branch_slez:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    bge a2, a3, .LBB9_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB9_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgtz(i32 %a) {
; CHECK-LABEL: branch_sgtz:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    bge a3, a2, .LBB10_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB10_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgez(i32 %a) {
; CHECK-LABEL: branch_sgez:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bltz a2, .LBB11_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB11_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ult(i32 %a, i32 %b) {
; CHECK-LABEL: branch_ult:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeu a2, a3, .LBB12_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB12_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ule(i32 %a, i32 %b) {
; CHECK-LABEL: branch_ule:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bltu a3, a2, .LBB13_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB13_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp ugt i32 %a, %b
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ugt(i32 %a, i32 %b) {
; CHECK-LABEL: branch_ugt:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeu a3, a2, .LBB14_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB14_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_uge(i32 %a, i32 %b) {
; CHECK-LABEL: branch_uge:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bltu a2, a3, .LBB15_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB15_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp ult i32 %a, %b
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}
