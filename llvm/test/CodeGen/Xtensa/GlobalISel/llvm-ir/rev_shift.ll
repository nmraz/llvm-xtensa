; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
define i32 @rev_shl(i32 %a, i32 %b) {
; OPT-LABEL: rev_shl:
; OPT:       # %bb.0:
; OPT-NEXT:    movi.n a4, 32
; OPT-NEXT:    sub a3, a4, a3
; OPT-NEXT:    ssl a3
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_shl:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssl a3
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    ret.n
  %shamt = sub i32 32, %b
  %shl = shl i32 %a, %shamt
  ret i32 %shl
}

define i32 @rev_shl_masked(i32 %a, i32 %b) {
; OPT-LABEL: rev_shl_masked:
; OPT:       # %bb.0:
; OPT-NEXT:    ssr a3
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_shl_masked:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    extui a4, a4, 0, 5
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssl a3
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    ret.n
  %masked = and i32 %b, 31
  %shamt = sub i32 32, %masked
  %shl = shl i32 %a, %shamt
  ret i32 %shl
}

define i32 @rev_lshr(i32 %a, i32 %b) {
; OPT-LABEL: rev_lshr:
; OPT:       # %bb.0:
; OPT-NEXT:    movi.n a4, 32
; OPT-NEXT:    sub a3, a4, a3
; OPT-NEXT:    ssr a3
; OPT-NEXT:    srl a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_lshr:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    srl a2, a2
; UNOPT-NEXT:    ret.n
  %shamt = sub i32 32, %b
  %lshr = lshr i32 %a, %shamt
  ret i32 %lshr
}

define i32 @rev_lshr_masked(i32 %a, i32 %b) {
; OPT-LABEL: rev_lshr_masked:
; OPT:       # %bb.0:
; OPT-NEXT:    ssl a3
; OPT-NEXT:    srl a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_lshr_masked:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    extui a4, a4, 0, 5
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    srl a2, a2
; UNOPT-NEXT:    ret.n
  %masked = and i32 %b, 31
  %shamt = sub i32 32, %masked
  %lshr = lshr i32 %a, %shamt
  ret i32 %lshr
}

define i32 @rev_ashr(i32 %a, i32 %b) {
; OPT-LABEL: rev_ashr:
; OPT:       # %bb.0:
; OPT-NEXT:    movi.n a4, 32
; OPT-NEXT:    sub a3, a4, a3
; OPT-NEXT:    ssr a3
; OPT-NEXT:    sra a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_ashr:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    sra a2, a2
; UNOPT-NEXT:    ret.n
  %shamt = sub i32 32, %b
  %ashr = ashr i32 %a, %shamt
  ret i32 %ashr
}

define i32 @rev_ashr_masked(i32 %a, i32 %b) {
; OPT-LABEL: rev_ashr_masked:
; OPT:       # %bb.0:
; OPT-NEXT:    ssl a3
; OPT-NEXT:    sra a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: rev_ashr_masked:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    movi.n a3, 32
; UNOPT-NEXT:    extui a4, a4, 0, 5
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    sra a2, a2
; UNOPT-NEXT:    ret.n
  %masked = and i32 %b, 31
  %shamt = sub i32 32, %masked
  %ashr = ashr i32 %a, %shamt
  ret i32 %ashr
}
