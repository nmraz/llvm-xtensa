; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7

define i1 @icmp_eq_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_eq_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movnez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eq_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a4, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    sub a3, a4, a3
; LX7-NEXT:    movnez a2, a5, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_ne_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    moveqz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ne_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a4, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    sub a3, a4, a3
; LX7-NEXT:    moveqz a2, a5, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_i8(i8 %a) {
; CHECK-LABEL: icmp_eqz_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a2, 0, 8
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movnez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eqz_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a3, a2, 0, 8
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    movnez a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i8 %a, 0
  ret i1 %icmp
}

define i1 @icmp_nez_i8(i8 %a) {
; CHECK-LABEL: icmp_nez_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a2, 0, 8
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_nez_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a3, a2, 0, 8
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    moveqz a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i8 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slt_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_slt_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 7
; CHECK-NEXT:    sext a3, a3, 7
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movgez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slt_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    sext a3, a3, 7
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sle_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 7
; CHECK-NEXT:    sext a3, a3, 7
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a3, a4
; CHECK-NEXT:    movltz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sle_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    sext a3, a3, 7
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sle i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sgt_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 7
; CHECK-NEXT:    sext a3, a3, 7
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a3, a4
; CHECK-NEXT:    movgez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgt_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    sext a3, a3, 7
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sge_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 7
; CHECK-NEXT:    sext a3, a3, 7
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movltz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sge_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    sext a3, a3, 7
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sge i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sltz_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sltz_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a2, a2, 7
; CHECK-NEXT:    extui a2, a2, 31, 1
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sltz_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    extui a2, a2, 31, 1
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i8 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slez_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_slez_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 7
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    addi.n a3, a3, -1
; CHECK-NEXT:    movgez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slez_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i8 %a, 1
  ret i1 %icmp
}

define i1 @icmp_sgtz_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sgtz_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 7
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    addi.n a3, a3, -1
; CHECK-NEXT:    movltz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgtz_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    movi.n a3, 0
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i8 %a, 0
  ret i1 %icmp
}

define i1 @icmp_sgez_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_sgez_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 7
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movltz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgez_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 7
; LX7-NEXT:    movi.n a3, -1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i8 %a, -1
  ret i1 %icmp
}

define i1 @icmp_ult_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_ult_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a4, a3, .LBB12_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB12_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ult_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ult i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_ule_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a3, a4, .LBB13_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB13_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ule_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ule i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_ugt_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a3, a4, .LBB14_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB14_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugt_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ugt i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_i8(i8 %a, i8 %b) {
; CHECK-LABEL: icmp_uge_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 8
; CHECK-NEXT:    extui a3, a3, 0, 8
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a4, a3, .LBB15_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB15_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_uge_i8:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 8
; LX7-NEXT:    extui a3, a3, 0, 8
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp uge i8 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eq_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_eq_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movnez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eq_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a4, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    sub a3, a4, a3
; LX7-NEXT:    movnez a2, a5, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_ne_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    moveqz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ne_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a4, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    sub a3, a4, a3
; LX7-NEXT:    moveqz a2, a5, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_i16(i16 %a) {
; CHECK-LABEL: icmp_eqz_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a2, 0, 16
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movnez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eqz_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a3, a2, 0, 16
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    movnez a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i16 %a, 0
  ret i1 %icmp
}

define i1 @icmp_nez_i16(i16 %a) {
; CHECK-LABEL: icmp_nez_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a2, 0, 16
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_nez_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a3, a2, 0, 16
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    moveqz a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i16 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slt_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_slt_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 15
; CHECK-NEXT:    sext a3, a3, 15
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movgez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slt_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    sext a3, a3, 15
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sle_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 15
; CHECK-NEXT:    sext a3, a3, 15
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a3, a4
; CHECK-NEXT:    movltz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sle_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    sext a3, a3, 15
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sle i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sgt_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 15
; CHECK-NEXT:    sext a3, a3, 15
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a3, a4
; CHECK-NEXT:    movgez a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgt_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    sext a3, a3, 15
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sge_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a4, a2, 15
; CHECK-NEXT:    sext a3, a3, 15
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    sub a3, a4, a3
; CHECK-NEXT:    movltz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sge_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    sext a3, a3, 15
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sge i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sltz_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sltz_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a2, a2, 15
; CHECK-NEXT:    extui a2, a2, 31, 1
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sltz_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    extui a2, a2, 31, 1
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i16 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slez_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_slez_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 15
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    addi.n a3, a3, -1
; CHECK-NEXT:    movgez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slez_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i16 %a, 1
  ret i1 %icmp
}

define i1 @icmp_sgtz_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sgtz_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 15
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    addi.n a3, a3, -1
; CHECK-NEXT:    movltz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgtz_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    movi.n a3, 0
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i16 %a, 0
  ret i1 %icmp
}

define i1 @icmp_sgez_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_sgez_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sext a3, a2, 15
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movltz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgez_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    sext a2, a2, 15
; LX7-NEXT:    movi.n a3, -1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i16 %a, -1
  ret i1 %icmp
}

define i1 @icmp_ult_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_ult_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a4, a3, .LBB28_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB28_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ult_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ult i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_ule_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a3, a4, .LBB29_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB29_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ule_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ule i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_ugt_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a3, a4, .LBB30_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB30_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugt_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ugt i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_i16(i16 %a, i16 %b) {
; CHECK-LABEL: icmp_uge_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a2, 0, 16
; CHECK-NEXT:    extui a3, a3, 0, 16
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a4, a3, .LBB31_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB31_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_uge_i16:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 0, 16
; LX7-NEXT:    extui a3, a3, 0, 16
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp uge i16 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eq_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_eq_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movnez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eq_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    sub a2, a2, a3
; LX7-NEXT:    movnez a4, a5, a2
; LX7-NEXT:    mov.n a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ne_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    moveqz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ne_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    sub a2, a2, a3
; LX7-NEXT:    moveqz a4, a5, a2
; LX7-NEXT:    mov.n a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_i32(i32 %a) {
; CHECK-LABEL: icmp_eqz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    movnez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eqz_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    movnez a3, a4, a2
; LX7-NEXT:    mov.n a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_nez_i32(i32 %a) {
; CHECK-LABEL: icmp_nez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    moveqz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_nez_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    moveqz a3, a4, a2
; LX7-NEXT:    mov.n a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_slt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slt_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sle_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movltz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sle_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sle i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgt_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sge_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movltz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sge_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sge i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sltz_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sltz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a2, 31, 1
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sltz_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a2, 31, 1
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slez_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_slez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi.n a2, a2, -1
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slez_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, 1
  ret i1 %icmp
}

define i1 @icmp_sgtz_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgtz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    addi.n a2, a2, -1
; CHECK-NEXT:    movltz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgtz_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a3, 0
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_sgez_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    movltz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgez_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a3, -1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, -1
  ret i1 %icmp
}

define i1 @icmp_ult_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ult_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a4, a3, .LBB44_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB44_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ult_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ult i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ule_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a3, a4, .LBB45_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB45_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ule_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ule i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ugt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a3, a4, .LBB46_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB46_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugt_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ugt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_uge_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a4, a3, .LBB47_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB47_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_uge_i32:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp uge i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eq_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_eq_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    xor a3, a3, a5
; CHECK-NEXT:    or a3, a2, a3
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movnez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eq_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    xor a3, a3, a5
; LX7-NEXT:    or a3, a2, a3
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    movnez a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_ne_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    xor a3, a3, a5
; CHECK-NEXT:    or a3, a2, a3
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ne_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    xor a3, a3, a5
; LX7-NEXT:    or a3, a2, a3
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    moveqz a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_i64(i64 %a) {
; CHECK-LABEL: icmp_eqz_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    or a3, a2, a3
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movnez a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eqz_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    or a3, a2, a3
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    movnez a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq i64 %a, 0
  ret i1 %icmp
}

define i1 @icmp_nez_i64(i64 %a) {
; CHECK-LABEL: icmp_nez_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    or a3, a2, a3
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_nez_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    or a3, a2, a3
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a2, 1
; LX7-NEXT:    moveqz a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne i64 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slt_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_slt_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a8, 0
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:    movgez a2, a8, a3
; CHECK-NEXT:    bltu a6, a4, .LBB52_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:  .LBB52_2: # %entry
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slt_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a6, a3, a5
; LX7-NEXT:    saltu a2, a2, a4
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a6, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sle_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a8, 1
; CHECK-NEXT:    sub a9, a5, a3
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:    movgez a2, a8, a9
; CHECK-NEXT:    bltu a4, a6, .LBB53_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:  .LBB53_2: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sle_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a6, 1
; LX7-NEXT:    salt a7, a5, a3
; LX7-NEXT:    saltu a2, a4, a2
; LX7-NEXT:    xor a7, a7, a6
; LX7-NEXT:    xor a2, a2, a6
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a7, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sle i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sgt_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a8, 0
; CHECK-NEXT:    sub a9, a5, a3
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:    movgez a2, a8, a9
; CHECK-NEXT:    bltu a4, a6, .LBB54_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:  .LBB54_2: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgt_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a6, a5, a3
; LX7-NEXT:    saltu a2, a4, a2
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a6, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sge_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a8, 1
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:    movgez a2, a8, a3
; CHECK-NEXT:    bltu a6, a4, .LBB55_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:  .LBB55_2: # %entry
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sge_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a6, 1
; LX7-NEXT:    salt a7, a3, a5
; LX7-NEXT:    saltu a2, a2, a4
; LX7-NEXT:    xor a7, a7, a6
; LX7-NEXT:    xor a2, a2, a6
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a7, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sge i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sltz_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sltz_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a3, 31, 1
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sltz_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    extui a2, a3, 31, 1
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i64 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slez_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_slez_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a5, 1
; CHECK-NEXT:    extui a2, a3, 31, 1
; CHECK-NEXT:    bltu a4, a5, .LBB57_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:  .LBB57_2: # %entry
; CHECK-NEXT:    moveqz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slez_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a5, 1
; LX7-NEXT:    extui a4, a3, 31, 1
; LX7-NEXT:    saltu a2, a2, a5
; LX7-NEXT:    movnez a2, a4, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt i64 %a, 1
  ret i1 %icmp
}

define i1 @icmp_sgtz_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sgtz_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a5, 1
; CHECK-NEXT:    addi.n a7, a3, -1
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    movi.n a6, 0
; CHECK-NEXT:    movgez a2, a5, a7
; CHECK-NEXT:    bltu a6, a4, .LBB58_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:  .LBB58_2: # %entry
; CHECK-NEXT:    moveqz a2, a5, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgtz_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    salt a5, a4, a3
; LX7-NEXT:    saltu a2, a4, a2
; LX7-NEXT:    movnez a2, a5, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i64 %a, 0
  ret i1 %icmp
}

define i1 @icmp_sgez_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_sgez_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    movltz a2, a4, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgez_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a2, -1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt i64 %a, -1
  ret i1 %icmp
}

define i1 @icmp_ult_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_ult_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a3, a5, .LBB60_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB60_2: # %entry
; CHECK-NEXT:    bltu a6, a4, .LBB60_4
; CHECK-NEXT:  # %bb.3: # %entry
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:  .LBB60_4: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ult_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a6, a3, a5
; LX7-NEXT:    saltu a2, a2, a4
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a6, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ult i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_ule_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a5, a3, .LBB61_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB61_2: # %entry
; CHECK-NEXT:    bltu a4, a6, .LBB61_4
; CHECK-NEXT:  # %bb.3: # %entry
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:  .LBB61_4: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ule_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a6, 1
; LX7-NEXT:    saltu a7, a5, a3
; LX7-NEXT:    saltu a2, a4, a2
; LX7-NEXT:    xor a7, a7, a6
; LX7-NEXT:    xor a2, a2, a6
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a7, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ule i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_ugt_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a5, a3, .LBB62_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB62_2: # %entry
; CHECK-NEXT:    bltu a4, a6, .LBB62_4
; CHECK-NEXT:  # %bb.3: # %entry
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:  .LBB62_4: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugt_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a6, a5, a3
; LX7-NEXT:    saltu a2, a4, a2
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a6, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ugt i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_i64(i64 %a, i64 %b) {
; CHECK-LABEL: icmp_uge_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a6, a2
; CHECK-NEXT:    movi.n a7, 0
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a3, a5, .LBB63_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB63_2: # %entry
; CHECK-NEXT:    bltu a6, a4, .LBB63_4
; CHECK-NEXT:  # %bb.3: # %entry
; CHECK-NEXT:    movi.n a7, 1
; CHECK-NEXT:  .LBB63_4: # %entry
; CHECK-NEXT:    sub a3, a3, a5
; CHECK-NEXT:    moveqz a2, a7, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_uge_i64:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a6, 1
; LX7-NEXT:    saltu a7, a3, a5
; LX7-NEXT:    saltu a2, a2, a4
; LX7-NEXT:    xor a7, a7, a6
; LX7-NEXT:    xor a2, a2, a6
; LX7-NEXT:    sub a3, a3, a5
; LX7-NEXT:    movnez a2, a7, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp uge i64 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eq_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_eq_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movnez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eq_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    sub a2, a2, a3
; LX7-NEXT:    movnez a4, a5, a2
; LX7-NEXT:    mov.n a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_ne_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    moveqz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ne_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a5, 0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    sub a2, a2, a3
; LX7-NEXT:    moveqz a4, a5, a2
; LX7-NEXT:    mov.n a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_ptr(ptr %a) {
; CHECK-LABEL: icmp_eqz_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    movnez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_eqz_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    movnez a3, a4, a2
; LX7-NEXT:    mov.n a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp eq ptr %a, null
  ret i1 %icmp
}

define i1 @icmp_nez_ptr(ptr %a) {
; CHECK-LABEL: icmp_nez_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    moveqz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_nez_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 0
; LX7-NEXT:    movi.n a3, 1
; LX7-NEXT:    moveqz a3, a4, a2
; LX7-NEXT:    mov.n a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ne ptr %a, null
  ret i1 %icmp
}

define i1 @icmp_slt_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_slt_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_slt_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp slt ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_sle_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movltz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sle_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sle ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_sgt_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sgt_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    salt a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sgt ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_sge_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movltz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_sge_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    salt a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp sge ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_ult_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_ult_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a4, a3, .LBB72_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB72_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ult_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ult ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_ule_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a3, a4, .LBB73_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB73_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ule_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ule ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_ugt_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltu a3, a4, .LBB74_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB74_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugt_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp ugt ptr %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_ptr(ptr %a, ptr %b) {
; CHECK-LABEL: icmp_uge_ptr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mov.n a4, a2
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    bltu a4, a3, .LBB75_2
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:  .LBB75_2: # %entry
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_uge_ptr:
; LX7:       # %bb.0: # %entry
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
entry:
  %icmp = icmp uge ptr %a, %b
  ret i1 %icmp
}
