; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i1 @icmp_eq_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_eq_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a3, a2, a3
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp eq i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ne_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ne_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a3, a2, a3
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp ne i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_eqz_i32(i32 %a) {
; CHECK-LABEL: icmp_eqz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    moveqz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp eq i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_nez_i32(i32 %a) {
; CHECK-LABEL: icmp_nez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 0
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    moveqz a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp ne i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_slt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    salt a2, a2, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sle_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sle_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    salt a2, a3, a2
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp sle i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sgt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    salt a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sge_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sge_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    salt a2, a2, a3
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp sge i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_sltz_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sltz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a2, a2, 31, 1
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_slez_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_slez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    salt a2, a2, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp slt i32 %a, 1
  ret i1 %icmp
}

define i1 @icmp_sgtz_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgtz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    salt a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, 0
  ret i1 %icmp
}

define i1 @icmp_sgez_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_sgez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a3, -1
; CHECK-NEXT:    salt a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp sgt i32 %a, -1
  ret i1 %icmp
}

define i1 @icmp_ult_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ult_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a2, a3
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp ult i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ule_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ule_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    saltu a2, a3, a2
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp ule i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_ugt_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_ugt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp ugt i32 %a, %b
  ret i1 %icmp
}

define i1 @icmp_uge_i32(i32 %a, i32 %b) {
; CHECK-LABEL: icmp_uge_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a4, 1
; CHECK-NEXT:    saltu a2, a2, a3
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    ret.n
entry:
  %icmp = icmp uge i32 %a, %b
  ret i1 %icmp
}
