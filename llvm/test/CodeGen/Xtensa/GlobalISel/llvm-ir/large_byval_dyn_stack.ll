; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

declare void @f(ptr byval([257 x i8]), ptr)

@data = global [257 x i8] zeroinitializer

define void @test(i32 %x) {
; CHECK-LABEL: test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; CHECK-NEXT:    s32i.n a15, a1, 4 # 4-byte Spill
; CHECK-NEXT:    mov.n a15, a1
; CHECK-NEXT:    addi a2, a2, 15
; CHECK-NEXT:    movi.n a3, -16
; CHECK-NEXT:    and a2, a2, a3
; CHECK-NEXT:    sub a12, a1, a2
; CHECK-NEXT:    mov.n a1, a12
; CHECK-NEXT:    movi a2, -272
; CHECK-NEXT:    add.n a1, a1, a2
; CHECK-NEXT:    mov.n a2, a1
; CHECK-NEXT:    l32r a3, .LCPI0_0
; CHECK-NEXT:    movi a4, 257
; CHECK-NEXT:    call0 memcpy
; CHECK-NEXT:    mov.n a2, a12
; CHECK-NEXT:    call0 f
; CHECK-NEXT:    movi a2, 272
; CHECK-NEXT:    add.n a1, a1, a2
; CHECK-NEXT:    mov.n a1, a15
; CHECK-NEXT:    l32i.n a15, a1, 4 # 4-byte Reload
; CHECK-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
  %p = alloca i8, i32 %x
  call void @f(ptr byval([257 x i8]) @data, ptr %p)
  ret void
}
