; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i32 @extui_1bit(i32 %val) {
; OPT-LABEL: extui_1bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_1bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 1
  ret i32 %ext
}

define i32 @extui_2bit(i32 %val) {
; OPT-LABEL: extui_2bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 2
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 3
  ret i32 %ext
}

define i32 @extui_3bit(i32 %val) {
; OPT-LABEL: extui_3bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_3bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 3
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 7
  ret i32 %ext
}

define i32 @extui_4bit(i32 %val) {
; OPT-LABEL: extui_4bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_4bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 4
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 15
  ret i32 %ext
}

define i32 @extui_5bit(i32 %val) {
; OPT-LABEL: extui_5bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_5bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 5
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 31
  ret i32 %ext
}

define i32 @extui_8bit(i32 %val) {
; OPT-LABEL: extui_8bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 8
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_8bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 8
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 255
  ret i32 %ext
}

define i32 @extui_16bit(i32 %val) {
; OPT-LABEL: extui_16bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 0, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_16bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 65535
  ret i32 %ext
}

define i32 @extui_2bit_lshr1(i32 %val) {
; OPT-LABEL: extui_2bit_lshr1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 1, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 1, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 1
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_lshr2(i32 %val) {
; OPT-LABEL: extui_2bit_lshr2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 2, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 2, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 2
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_lshr3(i32 %val) {
; OPT-LABEL: extui_2bit_lshr3:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 3, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr3:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 3, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 3
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_lshr4(i32 %val) {
; OPT-LABEL: extui_2bit_lshr4:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 4, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr4:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 4, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 4
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_lshr8(i32 %val) {
; OPT-LABEL: extui_2bit_lshr8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 8, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 8, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 8
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_lshr16(i32 %val) {
; OPT-LABEL: extui_2bit_lshr16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 16, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_lshr16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 16, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 16
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_1bit_lshr31(i32 %val) {
; OPT-LABEL: extui_1bit_lshr31:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 31, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_1bit_lshr31:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 31, 1
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 31
  %ext = and i32 %shr, 1
  ret i32 %ext
}

define i32 @extui_2bit_ashr1(i32 %val) {
; OPT-LABEL: extui_2bit_ashr1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 1, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 1, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 1
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_ashr2(i32 %val) {
; OPT-LABEL: extui_2bit_ashr2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 2, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 2, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 2
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_ashr3(i32 %val) {
; OPT-LABEL: extui_2bit_ashr3:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 3, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr3:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 3, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 3
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_ashr4(i32 %val) {
; OPT-LABEL: extui_2bit_ashr4:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 4, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr4:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 4, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 4
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_ashr8(i32 %val) {
; OPT-LABEL: extui_2bit_ashr8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 8, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 8, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 8
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_2bit_ashr16(i32 %val) {
; OPT-LABEL: extui_2bit_ashr16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 16, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_2bit_ashr16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 16, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 16
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @extui_1bit_ashr31(i32 %val) {
; OPT-LABEL: extui_1bit_ashr31:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 31, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_1bit_ashr31:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 31, 1
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 31
  %ext = and i32 %shr, 1
  ret i32 %ext
}

define i32 @extui_16bit_lshr16(i32 %val) {
; OPT-LABEL: extui_16bit_lshr16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 16, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_16bit_lshr16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 16
  %ext = and i32 %shr, 65535
  ret i32 %ext
}

define i32 @extui_16bit_ashr16(i32 %val) {
; OPT-LABEL: extui_16bit_ashr16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 16, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_16bit_ashr16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 16
  %ext = and i32 %shr, 65535
  ret i32 %ext
}

define i32 @extui_12bit_lshr20(i32 %val) {
; OPT-LABEL: extui_12bit_lshr20:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 20, 12
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_12bit_lshr20:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 20, 12
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 20
  %ext = and i32 %shr, 4095
  ret i32 %ext
}

define i32 @extui_12bit_ashr20(i32 %val) {
; OPT-LABEL: extui_12bit_ashr20:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 20, 12
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: extui_12bit_ashr20:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 20, 12
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 20
  %ext = and i32 %shr, 4095
  ret i32 %ext
}

define i32 @not_extui_17bit(i32 %val) {
; OPT-LABEL: not_extui_17bit:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l32r a3, .LCPI25_0
; OPT-NEXT:    and a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_17bit:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l32r a3, .LCPI25_0
; UNOPT-NEXT:    and a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 131071
  ret i32 %ext
}

define i32 @not_extui_neg_lshr(i32 %val) {
; OPT-LABEL: not_extui_neg_lshr:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 31
; OPT-NEXT:    srl a2, a2
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_neg_lshr:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi.n a3, -1
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    srl a2, a2
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, -1
  %ext = and i32 %shr, 1
  ret i32 %ext
}

define i32 @not_extui_neg_ashr(i32 %val) {
; OPT-LABEL: not_extui_neg_ashr:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    ssai 31
; OPT-NEXT:    sra a2, a2
; OPT-NEXT:    extui a2, a2, 0, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_neg_ashr:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi.n a3, -1
; UNOPT-NEXT:    ssr a3
; UNOPT-NEXT:    sra a2, a2
; UNOPT-NEXT:    extui a2, a2, 0, 1
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, -1
  %ext = and i32 %shr, 1
  ret i32 %ext
}

define i32 @not_extui_2bit_lshr31(i32 %val) {
; OPT-LABEL: not_extui_2bit_lshr31:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 31, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_2bit_lshr31:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 31, 1
; UNOPT-NEXT:    extui a2, a2, 0, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 31
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @not_extui_2bit_ashr31(i32 %val) {
; OPT-LABEL: not_extui_2bit_ashr31:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a2, a2, 31
; OPT-NEXT:    extui a2, a2, 0, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_2bit_ashr31:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a2, 31
; UNOPT-NEXT:    extui a2, a2, 0, 2
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 31
  %ext = and i32 %shr, 3
  ret i32 %ext
}

define i32 @not_extui_16bit_lshr17(i32 %val) {
; OPT-LABEL: not_extui_16bit_lshr17:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a2, a2, 17, 15
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_16bit_lshr17:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    extui a2, a2, 17, 15
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    ret.n
entry:
  %shr = lshr i32 %val, 17
  %ext = and i32 %shr, 65535
  ret i32 %ext
}

define i32 @not_extui_16bit_ashr17(i32 %val) {
; OPT-LABEL: not_extui_16bit_ashr17:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a2, a2, 17
; OPT-NEXT:    extui a2, a2, 0, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_16bit_ashr17:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    srai a2, a2, 17
; UNOPT-NEXT:    extui a2, a2, 0, 16
; UNOPT-NEXT:    ret.n
entry:
  %shr = ashr i32 %val, 17
  %ext = and i32 %shr, 65535
  ret i32 %ext
}

define i32 @not_extui_non_mask(i32 %val) {
; OPT-LABEL: not_extui_non_mask:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    movi.n a3, 5
; OPT-NEXT:    and a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: not_extui_non_mask:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    movi.n a3, 5
; UNOPT-NEXT:    and a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %ext = and i32 %val, 5
  ret i32 %ext
}
