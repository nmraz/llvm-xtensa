; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i32 @select_icmp_eq_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_eq_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    moveqz a5, a4, a2
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, %b
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_ne_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ne_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    moveqz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, %b
  %cond = select i1 %cmp.not, i32 %d, i32 %c
  ret i32 %cond
}

define i32 @select_icmp_lt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_lt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, %b
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_lte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_lte_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movgez a5, a4, a2
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp sgt i32 %a, %b
  %cond = select i1 %cmp.not, i32 %d, i32 %c
  ret i32 %cond
}

define i32 @select_icmp_gt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_gt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a3, a2
; CHECK-NEXT:    movgez a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, %b
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_gte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_gte_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub a2, a2, a3
; CHECK-NEXT:    movgez a5, a4, a2
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp slt i32 %a, %b
  %cond = select i1 %cmp.not, i32 %d, i32 %c
  ret i32 %cond
}

define i32 @select_icmp_ltz_i32(i32 %a, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ltz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 0
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_ltez_i32(i32 %a, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ltez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a2, a2, -1
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 1
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_gtz_i32(i32 %a, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_gtz_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    neg a2, a2
; CHECK-NEXT:    movgez a3, a4, a2
; CHECK-NEXT:    mov.n a2, a3
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 0
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_gtez_i32(i32 %a, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_gtez_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movgez a4, a3, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp1 = icmp slt i32 %a, 0
  %cond = select i1 %cmp1, i32 %d, i32 %c
  ret i32 %cond
}

define i32 @select_icmp_ult_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ult_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a2, a3
; CHECK-NEXT:    moveqz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, %b
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_ulte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ulte_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a3, a2
; CHECK-NEXT:    moveqz a5, a4, a2
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp ugt i32 %a, %b
  %cond = select i1 %cmp.not, i32 %d, i32 %c
  ret i32 %cond
}

define i32 @select_icmp_ugt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ugt_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a3, a2
; CHECK-NEXT:    moveqz a4, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, %b
  %cond = select i1 %cmp, i32 %c, i32 %d
  ret i32 %cond
}

define i32 @select_icmp_ugte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: select_icmp_ugte_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    saltu a2, a2, a3
; CHECK-NEXT:    moveqz a5, a4, a2
; CHECK-NEXT:    mov.n a2, a5
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp ult i32 %a, %b
  %cond = select i1 %cmp.not, i32 %d, i32 %c
  ret i32 %cond
}
