; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define i1 @mul_i1(i1 %a, i1 %b) {
; CHECK-LABEL: mul_i1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i1 %b, %a
  ret i1 %mul
}

define i8 @mul_i8(i8 %a, i8 %b) {
; CHECK-LABEL: mul_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i8 %b, %a
  ret i8 %mul
}

define i16 @mul_i16(i16 %a, i16 %b) {
; CHECK-LABEL: mul_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i16 %b, %a
  ret i16 %mul
}

define i32 @mul_i32(i32 %a, i32 %b) {
; CHECK-LABEL: mul_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a2, a3, a2
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i32 %b, %a
  ret i32 %mul
}

define i33 @mul_i33(i33 %a, i33 %b) {
; CHECK-LABEL: mul_i33:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a6, a4, a2
; CHECK-NEXT:    mull a5, a5, a2
; CHECK-NEXT:    mull a3, a4, a3
; CHECK-NEXT:    muluh a2, a4, a2
; CHECK-NEXT:    add.n a3, a5, a3
; CHECK-NEXT:    add.n a3, a3, a2
; CHECK-NEXT:    mov.n a2, a6
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i33 %b, %a
  ret i33 %mul
}

define i64 @mul_i64(i64 %a, i64 %b) {
; CHECK-LABEL: mul_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mull a6, a4, a2
; CHECK-NEXT:    mull a5, a5, a2
; CHECK-NEXT:    mull a3, a4, a3
; CHECK-NEXT:    muluh a2, a4, a2
; CHECK-NEXT:    add.n a3, a5, a3
; CHECK-NEXT:    add.n a3, a3, a2
; CHECK-NEXT:    mov.n a2, a6
; CHECK-NEXT:    ret.n
entry:
  %mul = mul i64 %b, %a
  ret i64 %mul
}

define i64 @mul_i32_i64_unsigned(i32 %a, i32 %b) {
; CHECK-LABEL: mul_i32_i64_unsigned:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 0
; CHECK-NEXT:    mull a4, a2, a3
; CHECK-NEXT:    muluh a2, a2, a3
; CHECK-NEXT:    add.n a3, a5, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %exta = zext i32 %a to i64
  %extb = zext i32 %b to i64
  %mul = mul i64 %exta, %extb
  ret i64 %mul
}

define i64 @mul_i32_i64_signed(i32 %a, i32 %b) {
; CHECK-LABEL: mul_i32_i64_signed:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srai a5, a2, 31
; CHECK-NEXT:    srai a6, a3, 31
; CHECK-NEXT:    mull a4, a2, a3
; CHECK-NEXT:    mull a5, a5, a3
; CHECK-NEXT:    mull a6, a2, a6
; CHECK-NEXT:    muluh a2, a2, a3
; CHECK-NEXT:    add.n a3, a5, a6
; CHECK-NEXT:    add.n a3, a3, a2
; CHECK-NEXT:    mov.n a2, a4
; CHECK-NEXT:    ret.n
entry:
  %exta = sext i32 %a to i64
  %extb = sext i32 %b to i64
  %mul = mul i64 %exta, %extb
  ret i64 %mul
}
