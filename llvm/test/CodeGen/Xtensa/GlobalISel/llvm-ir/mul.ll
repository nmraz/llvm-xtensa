; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i1 @mul_i1(i1 %a, i1 %b) {
; OPT-LABEL: mul_i1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mull a2, a3, a2
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i1 %b, %a
  ret i1 %mul
}

define i8 @mul_i8(i8 %a, i8 %b) {
; OPT-LABEL: mul_i8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mull a2, a3, a2
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i8 %b, %a
  ret i8 %mul
}

define i16 @mul_i16(i16 %a, i16 %b) {
; OPT-LABEL: mul_i16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mull a2, a3, a2
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i16 %b, %a
  ret i16 %mul
}

define i32 @mul_i32(i32 %a, i32 %b) {
; OPT-LABEL: mul_i32:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i32:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mull a2, a3, a2
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i32 %b, %a
  ret i32 %mul
}

define i33 @mul_i33(i33 %a, i33 %b) {
; OPT-LABEL: mul_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a6, a4, a2
; OPT-NEXT:    mull a5, a5, a2
; OPT-NEXT:    mull a3, a4, a3
; OPT-NEXT:    muluh a2, a4, a2
; OPT-NEXT:    add.n a3, a5, a3
; OPT-NEXT:    add.n a3, a3, a2
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    mov.n a6, a2
; UNOPT-NEXT:    s32i.n a3, a1, 0 # 4-byte Spill
; UNOPT-NEXT:    mov.n a3, a5
; UNOPT-NEXT:    l32i.n a5, a1, 0 # 4-byte Reload
; UNOPT-NEXT:    mull a2, a4, a6
; UNOPT-NEXT:    mull a3, a3, a6
; UNOPT-NEXT:    mull a5, a4, a5
; UNOPT-NEXT:    muluh a4, a4, a6
; UNOPT-NEXT:    add.n a3, a3, a5
; UNOPT-NEXT:    add.n a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i33 %b, %a
  ret i33 %mul
}

define i64 @mul_i64(i64 %a, i64 %b) {
; OPT-LABEL: mul_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a6, a4, a2
; OPT-NEXT:    mull a5, a5, a2
; OPT-NEXT:    mull a3, a4, a3
; OPT-NEXT:    muluh a2, a4, a2
; OPT-NEXT:    add.n a3, a5, a3
; OPT-NEXT:    add.n a3, a3, a2
; OPT-NEXT:    mov.n a2, a6
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    mov.n a6, a2
; UNOPT-NEXT:    s32i.n a3, a1, 0 # 4-byte Spill
; UNOPT-NEXT:    mov.n a3, a5
; UNOPT-NEXT:    l32i.n a5, a1, 0 # 4-byte Reload
; UNOPT-NEXT:    mull a2, a4, a6
; UNOPT-NEXT:    mull a3, a3, a6
; UNOPT-NEXT:    mull a5, a4, a5
; UNOPT-NEXT:    muluh a4, a4, a6
; UNOPT-NEXT:    add.n a3, a3, a5
; UNOPT-NEXT:    add.n a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  %mul = mul i64 %b, %a
  ret i64 %mul
}

define i64 @mul_i32_i64_unsigned(i32 %a, i32 %b) {
; OPT-LABEL: mul_i32_i64_unsigned:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mull a4, a2, a3
; OPT-NEXT:    muluh a3, a2, a3
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i32_i64_unsigned:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    mov.n a6, a3
; UNOPT-NEXT:    mull a2, a4, a6
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    mull a3, a3, a6
; UNOPT-NEXT:    movi.n a5, 0
; UNOPT-NEXT:    mull a5, a4, a5
; UNOPT-NEXT:    muluh a4, a4, a6
; UNOPT-NEXT:    add.n a3, a3, a5
; UNOPT-NEXT:    add.n a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %exta = zext i32 %a to i64
  %extb = zext i32 %b to i64
  %mul = mul i64 %exta, %extb
  ret i64 %mul
}

define i64 @mul_i32_i64_signed(i32 %a, i32 %b) {
; OPT-LABEL: mul_i32_i64_signed:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    srai a5, a2, 31
; OPT-NEXT:    srai a6, a3, 31
; OPT-NEXT:    mull a4, a2, a3
; OPT-NEXT:    mull a5, a5, a3
; OPT-NEXT:    mull a6, a2, a6
; OPT-NEXT:    muluh a2, a2, a3
; OPT-NEXT:    add.n a3, a5, a6
; OPT-NEXT:    add.n a3, a3, a2
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: mul_i32_i64_signed:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    mov.n a6, a3
; UNOPT-NEXT:    srai a3, a4, 31
; UNOPT-NEXT:    srai a5, a6, 31
; UNOPT-NEXT:    mull a2, a4, a6
; UNOPT-NEXT:    mull a3, a3, a6
; UNOPT-NEXT:    mull a5, a4, a5
; UNOPT-NEXT:    muluh a4, a4, a6
; UNOPT-NEXT:    add.n a3, a3, a5
; UNOPT-NEXT:    add.n a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %exta = sext i32 %a to i64
  %extb = sext i32 %b to i64
  %mul = mul i64 %exta, %extb
  ret i64 %mul
}
