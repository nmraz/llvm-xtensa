; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define i32 @mul_1(i32 %a) #0 {
; CHECK-LABEL: mul_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 1
  ret i32 %mul
}

define i32 @mul_neg_1(i32 %a) #0 {
; CHECK-LABEL: mul_neg_1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    neg a2, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -1
  ret i32 %mul
}

define i32 @mul_3(i32 %a) #0 {
; CHECK-LABEL: mul_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addx2 a2, a2, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 3
  ret i32 %mul
}

define i32 @mul_neg_3(i32 %a) #0 {
; CHECK-LABEL: mul_neg_3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -3
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -3
  ret i32 %mul
}

define i32 @mul_5(i32 %a) #0 {
; CHECK-LABEL: mul_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addx4 a2, a2, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 5
  ret i32 %mul
}

define i32 @mul_neg_5(i32 %a) #0 {
; CHECK-LABEL: mul_neg_5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -5
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -5
  ret i32 %mul
}

define i32 @mul_6(i32 %a) #0 {
; CHECK-LABEL: mul_6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 6
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 6
  ret i32 %mul
}

define i32 @mul_neg_6(i32 %a) #0 {
; CHECK-LABEL: mul_neg_6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -6
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -6
  ret i32 %mul
}

define i32 @mul_7(i32 %a) #0 {
; CHECK-LABEL: mul_7:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subx8 a2, a2, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 7
  ret i32 %mul
}

define i32 @mul_neg_7(i32 %a) #0 {
; CHECK-LABEL: mul_neg_7:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -7
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -7
  ret i32 %mul
}

define i32 @mul_10(i32 %a) #0 {
; CHECK-LABEL: mul_10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 10
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 10
  ret i32 %mul
}

define i32 @mul_neg_10(i32 %a) #0 {
; CHECK-LABEL: mul_neg_10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -10
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -10
  ret i32 %mul
}

define i32 @mul_16(i32 %a) #0 {
; CHECK-LABEL: mul_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a2, a2, 4
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 16
  ret i32 %mul
}

define i32 @mul_neg_16(i32 %a) #0 {
; CHECK-LABEL: mul_neg_16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, -16
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -16
  ret i32 %mul
}

define i32 @mul_40(i32 %a) #0 {
; CHECK-LABEL: mul_40:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 40
  ret i32 %mul
}

define i32 @mul_neg_40(i32 %a) #0 {
; CHECK-LABEL: mul_neg_40:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movi a3, -40
; CHECK-NEXT:    mull a2, a2, a3
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -40
  ret i32 %mul
}

attributes #0 = { minsize }

define i32 @mul_4097(i32 %a) {
; CHECK-LABEL: mul_4097:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a3, a2, 12
; CHECK-NEXT:    add.n a2, a3, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, 4097
  ret i32 %mul
}

define i32 @mul_neg_4097(i32 %a) {
; CHECK-LABEL: mul_neg_4097:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli a3, a2, 12
; CHECK-NEXT:    add.n a2, a3, a2
; CHECK-NEXT:    neg a2, a2
; CHECK-NEXT:    ret.n
  %mul = mul i32 %a, -4097
  ret i32 %mul
}
