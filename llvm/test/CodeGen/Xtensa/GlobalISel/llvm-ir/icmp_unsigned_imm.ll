; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7

define i1 @icmp_ulti(i32 %a) {
; CHECK-LABEL: icmp_ulti:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltui a3, 5, .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ulti:
; LX7:       # %bb.0:
; LX7-NEXT:    movi.n a3, 5
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
  %icmp = icmp ult i32 %a, 5
  ret i1 %icmp
}

define i1 @icmp_ulti_large(i32 %a) {
; CHECK-LABEL: icmp_ulti_large:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltui a3, 65536, .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ulti_large:
; LX7:       # %bb.0:
; LX7-NEXT:    l32r a3, .LCPI1_0
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    ret.n
  %icmp = icmp ult i32 %a, 65536
  ret i1 %icmp
}

define i1 @icmp_ugti(i32 %a) {
; CHECK-LABEL: icmp_ugti:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bgeui a3, 6, .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugti:
; LX7:       # %bb.0:
; LX7-NEXT:    movi.n a3, 5
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
  %icmp = icmp ugt i32 %a, 5
  ret i1 %icmp
}

define i1 @icmp_ugti_large(i32 %a) {
; CHECK-LABEL: icmp_ugti_large:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bgeui a3, 65536, .LBB3_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugti_large:
; LX7:       # %bb.0:
; LX7-NEXT:    l32r a3, .LCPI3_0
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    ret.n
  %icmp = icmp ugt i32 %a, 65535
  ret i1 %icmp
}

define i1 @icmp_ulei(i32 %a) {
; CHECK-LABEL: icmp_ulei:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltui a3, 6, .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ulei:
; LX7:       # %bb.0:
; LX7-NEXT:    movi.n a3, 5
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
  %icmp = icmp ule i32 %a, 5
  ret i1 %icmp
}

define i1 @icmp_ulei_large(i32 %a) {
; CHECK-LABEL: icmp_ulei_large:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bltui a3, 65536, .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ulei_large:
; LX7:       # %bb.0:
; LX7-NEXT:    l32r a3, .LCPI5_0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a3, a2
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
  %icmp = icmp ule i32 %a, 65535
  ret i1 %icmp
}

define i1 @icmp_ugei(i32 %a) {
; CHECK-LABEL: icmp_ugei:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bgeui a3, 5, .LBB6_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB6_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugei:
; LX7:       # %bb.0:
; LX7-NEXT:    movi.n a3, 5
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
  %icmp = icmp uge i32 %a, 5
  ret i1 %icmp
}

define i1 @icmp_ugei_large(i32 %a) {
; CHECK-LABEL: icmp_ugei_large:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mov.n a3, a2
; CHECK-NEXT:    movi.n a2, 1
; CHECK-NEXT:    bgeui a3, 65536, .LBB7_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:  .LBB7_2:
; CHECK-NEXT:    ret.n
;
; LX7-LABEL: icmp_ugei_large:
; LX7:       # %bb.0:
; LX7-NEXT:    l32r a3, .LCPI7_0
; LX7-NEXT:    movi.n a4, 1
; LX7-NEXT:    saltu a2, a2, a3
; LX7-NEXT:    xor a2, a2, a4
; LX7-NEXT:    ret.n
  %icmp = icmp uge i32 %a, 65536
  ret i1 %icmp
}
