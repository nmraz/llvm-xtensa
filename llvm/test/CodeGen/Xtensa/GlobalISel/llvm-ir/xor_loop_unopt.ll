; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s

define void @xor_loop(ptr noundef %a, ptr noundef %b, i32 noundef %n) {
; CHECK-LABEL: xor_loop:
; CHECK:       # %bb.1: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a2, a1, 12
; CHECK-NEXT:    s32i.n a3, a1, 8
; CHECK-NEXT:    s32i.n a4, a1, 4
; CHECK-NEXT:    movi.n a2, 0
; CHECK-NEXT:    s32i.n a2, a1, 0
; CHECK-NEXT:    j .LBB0_2
; CHECK-NEXT:  .LBB0_2: # %for.cond
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    l32i.n a2, a1, 0
; CHECK-NEXT:    l32i.n a3, a1, 4
; CHECK-NEXT:    bgeu a2, a3, .LBB0_5
; CHECK-NEXT:    j .LBB0_3
; CHECK-NEXT:  .LBB0_3: # %for.body
; CHECK-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    l32i.n a2, a1, 8
; CHECK-NEXT:    l8ui a2, a2, 0
; CHECK-NEXT:    sext a4, a2, 7
; CHECK-NEXT:    l32i.n a3, a1, 12
; CHECK-NEXT:    l8ui a2, a3, 0
; CHECK-NEXT:    sext a2, a2, 7
; CHECK-NEXT:    xor a2, a2, a4
; CHECK-NEXT:    s8i a2, a3, 0
; CHECK-NEXT:    j .LBB0_4
; CHECK-NEXT:  .LBB0_4: # %for.inc
; CHECK-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    l32i.n a2, a1, 0
; CHECK-NEXT:    addi a2, a2, 1
; CHECK-NEXT:    s32i.n a2, a1, 0
; CHECK-NEXT:    j .LBB0_2
; CHECK-NEXT:  .LBB0_5: # %for.end
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %a.addr = alloca ptr, align 4
  %b.addr = alloca ptr, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store ptr %a, ptr %a.addr, align 4
  store ptr %b, ptr %b.addr, align 4
  store i32 %n, ptr %n.addr, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, ptr %i, align 4
  %1 = load i32, ptr %n.addr, align 4
  %cmp = icmp ult i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load ptr, ptr %b.addr, align 4
  %3 = load i32, ptr %i, align 4
  %arrayidx = getelementptr inbounds i8, ptr %2, i32 %3
  %4 = load i8, ptr %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %5 = load ptr, ptr %a.addr, align 4
  %6 = load i32, ptr %i, align 4
  %arrayidx1 = getelementptr inbounds i8, ptr %5, i32 %6
  %7 = load i8, ptr %arrayidx1, align 1
  %conv2 = sext i8 %7 to i32
  %xor = xor i32 %conv2, %conv
  %conv3 = trunc i32 %xor to i8
  store i8 %conv3, ptr %arrayidx1, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, ptr %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}
