; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define void @xor_loop(ptr nocapture noundef %a, ptr nocapture noundef readonly %b, i32 noundef %n) {
; CHECK-LABEL: xor_loop:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movi.n a5, 1
; CHECK-NEXT:    movi.n a6, 0
; CHECK-NEXT:    moveqz a6, a5, a4
; CHECK-NEXT:    bnez a6, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %for.body.preheader
; CHECK-NEXT:  .LBB0_3: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    l8ui a6, a3, 0
; CHECK-NEXT:    l8ui a7, a2, 0
; CHECK-NEXT:    xor a6, a7, a6
; CHECK-NEXT:    s8i a6, a2, 0
; CHECK-NEXT:    addi a4, a4, -1
; CHECK-NEXT:    addi a2, a2, 1
; CHECK-NEXT:    addi a3, a3, 1
; CHECK-NEXT:    movi.n a6, 0
; CHECK-NEXT:    moveqz a6, a5, a4
; CHECK-NEXT:    bnez a6, .LBB0_2
; CHECK-NEXT:    j .LBB0_3
; CHECK-NEXT:  .LBB0_2: # %for.cond.cleanup
; CHECK-NEXT:    ret.n
entry:
  %cmp8.not = icmp eq i32 %n, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %entry, %for.body
  %i.09 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i8, ptr %b, i32 %i.09
  %0 = load i8, ptr %arrayidx, align 1
  %arrayidx1 = getelementptr inbounds i8, ptr %a, i32 %i.09
  %1 = load i8, ptr %arrayidx1, align 1
  %xor7 = xor i8 %1, %0
  store i8 %xor7, ptr %arrayidx1, align 1
  %inc = add nuw i32 %i.09, 1
  %exitcond.not = icmp eq i32 %inc, %n
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
