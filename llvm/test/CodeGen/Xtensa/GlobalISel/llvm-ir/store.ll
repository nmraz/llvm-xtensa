; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
define void @store_i8(ptr %p, i8 %val) {
; CHECK-LABEL: store_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    s8i a3, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i8 %val, ptr %p, align 1
  ret void
}

define void @store_i16(ptr %p, i16 %val) {
; CHECK-LABEL: store_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    s16i a3, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i16 %val, ptr %p, align 2
  ret void
}

define void @store_i16_unaligned_1(ptr %p, i16 %val) {
; CHECK-LABEL: store_i16_unaligned_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a3, 0, 16
; CHECK-NEXT:    srli a4, a4, 8
; CHECK-NEXT:    addi a5, a2, 1
; CHECK-NEXT:    s8i a3, a2, 0
; CHECK-NEXT:    s8i a4, a5, 0
; CHECK-NEXT:    ret.n
entry:
  store i16 %val, ptr %p, align 1
  ret void
}

define void @store_i32(ptr %p, i32 %val) {
; CHECK-LABEL: store_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    s32i.n a3, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 4
  ret void
}

define void @store_i32_unaligned_1(ptr %p, i32 %val) {
; CHECK-LABEL: store_i32_unaligned_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a3, 16, 16
; CHECK-NEXT:    addi a5, a2, 2
; CHECK-NEXT:    extui a6, a3, 0, 16
; CHECK-NEXT:    srli a6, a6, 8
; CHECK-NEXT:    addi a7, a2, 1
; CHECK-NEXT:    s8i a3, a2, 0
; CHECK-NEXT:    s8i a6, a7, 0
; CHECK-NEXT:    extui a3, a3, 24, 8
; CHECK-NEXT:    addi a2, a2, 3
; CHECK-NEXT:    s8i a4, a5, 0
; CHECK-NEXT:    s8i a3, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 1
  ret void
}

define void @store_i32_unaligned_2(ptr %p, i32 %val) {
; CHECK-LABEL: store_i32_unaligned_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a4, a3, 16, 16
; CHECK-NEXT:    addi a5, a2, 2
; CHECK-NEXT:    s16i a3, a2, 0
; CHECK-NEXT:    s16i a4, a5, 0
; CHECK-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 2
  ret void
}

define void @store_i64(ptr %p, i64 %val) {
; CHECK-LABEL: store_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    s32i.n a4, a2, 0
; CHECK-NEXT:    addi a2, a2, 4
; CHECK-NEXT:    s32i.n a5, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 8
  ret void
}

define void @store_i64_unaligned_1(ptr %p, i64 %val) {
; CHECK-LABEL: store_i64_unaligned_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a4, 16, 16
; CHECK-NEXT:    addi a6, a2, 2
; CHECK-NEXT:    extui a7, a4, 0, 16
; CHECK-NEXT:    srli a7, a7, 8
; CHECK-NEXT:    addi a8, a2, 1
; CHECK-NEXT:    s8i a4, a2, 0
; CHECK-NEXT:    s8i a7, a8, 0
; CHECK-NEXT:    extui a4, a4, 24, 8
; CHECK-NEXT:    addi a7, a2, 3
; CHECK-NEXT:    s8i a3, a6, 0
; CHECK-NEXT:    s8i a4, a7, 0
; CHECK-NEXT:    addi a3, a2, 4
; CHECK-NEXT:    extui a4, a5, 16, 16
; CHECK-NEXT:    addi a6, a2, 6
; CHECK-NEXT:    extui a7, a5, 0, 16
; CHECK-NEXT:    srli a7, a7, 8
; CHECK-NEXT:    addi a8, a2, 5
; CHECK-NEXT:    s8i a5, a3, 0
; CHECK-NEXT:    s8i a7, a8, 0
; CHECK-NEXT:    extui a3, a5, 24, 8
; CHECK-NEXT:    addi a2, a2, 7
; CHECK-NEXT:    s8i a4, a6, 0
; CHECK-NEXT:    s8i a3, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 1
  ret void
}

define void @store_i64_unaligned_2(ptr %p, i64 %val) {
; CHECK-LABEL: store_i64_unaligned_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    extui a3, a4, 16, 16
; CHECK-NEXT:    addi a6, a2, 2
; CHECK-NEXT:    s16i a4, a2, 0
; CHECK-NEXT:    s16i a3, a6, 0
; CHECK-NEXT:    addi a3, a2, 4
; CHECK-NEXT:    extui a4, a5, 16, 16
; CHECK-NEXT:    addi a2, a2, 6
; CHECK-NEXT:    s16i a5, a3, 0
; CHECK-NEXT:    s16i a4, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 2
  ret void
}

define void @store_i64_unaligned_4(ptr %p, i64 %val) {
; CHECK-LABEL: store_i64_unaligned_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    s32i.n a4, a2, 0
; CHECK-NEXT:    addi a2, a2, 4
; CHECK-NEXT:    s32i.n a5, a2, 0
; CHECK-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 4
  ret void
}
