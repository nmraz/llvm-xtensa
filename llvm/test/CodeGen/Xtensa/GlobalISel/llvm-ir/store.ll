; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define void @store_i8(ptr %p, i8 %val) {
; OPT-LABEL: store_i8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s8i a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s8i a3, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  store i8 %val, ptr %p, align 1
  ret void
}

define void @store_i16(ptr %p, i16 %val) {
; OPT-LABEL: store_i16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s16i a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s16i a3, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  store i16 %val, ptr %p, align 2
  ret void
}

define void @store_i16_unaligned_1(ptr %p, i16 %val) {
; OPT-LABEL: store_i16_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a4, a3, 0, 16
; OPT-NEXT:    srli a4, a4, 8
; OPT-NEXT:    s8i a3, a2, 0
; OPT-NEXT:    s8i a4, a2, 1
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i16_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    s32i.n a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    l32i.n a3, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a2, a4, 0, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a3, 0
; UNOPT-NEXT:    s8i a2, a3, 1
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  store i16 %val, ptr %p, align 1
  ret void
}

define void @store_i32(ptr %p, i32 %val) {
; OPT-LABEL: store_i32:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s32i.n a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i32:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s32i.n a3, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 4
  ret void
}

define void @store_i32_unaligned_1(ptr %p, i32 %val) {
; OPT-LABEL: store_i32_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    extui a5, a3, 0, 16
; OPT-NEXT:    srli a5, a5, 8
; OPT-NEXT:    s8i a3, a2, 0
; OPT-NEXT:    s8i a5, a2, 1
; OPT-NEXT:    extui a3, a3, 24, 8
; OPT-NEXT:    s8i a4, a2, 2
; OPT-NEXT:    s8i a3, a2, 3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i32_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a5, a2
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    addi a3, a5, 2
; UNOPT-NEXT:    extui a6, a2, 0, 16
; UNOPT-NEXT:    srli a6, a6, 8
; UNOPT-NEXT:    s8i a2, a5, 0
; UNOPT-NEXT:    s8i a6, a5, 1
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a5, 2
; UNOPT-NEXT:    s8i a2, a3, 1
; UNOPT-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 1
  ret void
}

define void @store_i32_unaligned_2(ptr %p, i32 %val) {
; OPT-LABEL: store_i32_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    s16i a3, a2, 0
; OPT-NEXT:    s16i a4, a2, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i32_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    s32i.n a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    l32i.n a3, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a2, a4, 16, 16
; UNOPT-NEXT:    s16i a4, a3, 0
; UNOPT-NEXT:    s16i a2, a3, 2
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  store i32 %val, ptr %p, align 2
  ret void
}

define void @store_i64(ptr %p, i64 %val) {
; OPT-LABEL: store_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s32i.n a4, a2, 0
; OPT-NEXT:    s32i.n a5, a2, 4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s32i.n a4, a2, 0
; UNOPT-NEXT:    s32i.n a5, a2, 4
; UNOPT-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 8
  ret void
}

define void @store_i64_unaligned_1(ptr %p, i64 %val) {
; OPT-LABEL: store_i64_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a3, a4, 16, 16
; OPT-NEXT:    extui a6, a4, 0, 16
; OPT-NEXT:    srli a6, a6, 8
; OPT-NEXT:    s8i a4, a2, 0
; OPT-NEXT:    s8i a6, a2, 1
; OPT-NEXT:    extui a4, a4, 24, 8
; OPT-NEXT:    s8i a3, a2, 2
; OPT-NEXT:    s8i a4, a2, 3
; OPT-NEXT:    extui a3, a5, 16, 16
; OPT-NEXT:    extui a4, a5, 0, 16
; OPT-NEXT:    srli a4, a4, 8
; OPT-NEXT:    s8i a5, a2, 4
; OPT-NEXT:    s8i a4, a2, 5
; OPT-NEXT:    extui a4, a5, 24, 8
; OPT-NEXT:    s8i a3, a2, 6
; OPT-NEXT:    s8i a4, a2, 7
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i64_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a7, a2
; UNOPT-NEXT:    mov.n a3, a4
; UNOPT-NEXT:    mov.n a2, a5
; UNOPT-NEXT:    extui a5, a3, 16, 16
; UNOPT-NEXT:    addi a4, a7, 2
; UNOPT-NEXT:    extui a6, a3, 0, 16
; UNOPT-NEXT:    srli a6, a6, 8
; UNOPT-NEXT:    s8i a3, a7, 0
; UNOPT-NEXT:    s8i a6, a7, 1
; UNOPT-NEXT:    extui a3, a3, 16, 16
; UNOPT-NEXT:    srli a3, a3, 8
; UNOPT-NEXT:    s8i a5, a7, 2
; UNOPT-NEXT:    s8i a3, a4, 1
; UNOPT-NEXT:    addi a5, a7, 4
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    addi a3, a5, 2
; UNOPT-NEXT:    extui a6, a2, 0, 16
; UNOPT-NEXT:    srli a6, a6, 8
; UNOPT-NEXT:    s8i a2, a7, 4
; UNOPT-NEXT:    s8i a6, a5, 1
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a5, 2
; UNOPT-NEXT:    s8i a2, a3, 1
; UNOPT-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 1
  ret void
}

define void @store_i64_unaligned_2(ptr %p, i64 %val) {
; OPT-LABEL: store_i64_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a3, a4, 16, 16
; OPT-NEXT:    s16i a4, a2, 0
; OPT-NEXT:    s16i a3, a2, 2
; OPT-NEXT:    extui a3, a5, 16, 16
; OPT-NEXT:    s16i a5, a2, 4
; OPT-NEXT:    s16i a3, a2, 6
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i64_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    s32i.n a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a3, a4
; UNOPT-NEXT:    l32i.n a4, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a2, a3, 16, 16
; UNOPT-NEXT:    s16i a3, a4, 0
; UNOPT-NEXT:    s16i a2, a4, 2
; UNOPT-NEXT:    addi a3, a4, 4
; UNOPT-NEXT:    extui a2, a5, 16, 16
; UNOPT-NEXT:    s16i a5, a4, 4
; UNOPT-NEXT:    s16i a2, a3, 2
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 2
  ret void
}

define void @store_i64_unaligned_4(ptr %p, i64 %val) {
; OPT-LABEL: store_i64_unaligned_4:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s32i.n a4, a2, 0
; OPT-NEXT:    s32i.n a5, a2, 4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_i64_unaligned_4:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s32i.n a4, a2, 0
; UNOPT-NEXT:    s32i.n a5, a2, 4
; UNOPT-NEXT:    ret.n
entry:
  store i64 %val, ptr %p, align 4
  ret void
}

define void @store_ptr(ptr %p, ptr %val) {
; OPT-LABEL: store_ptr:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    s32i.n a3, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_ptr:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    s32i.n a3, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  store ptr %val, ptr %p, align 4
  ret void
}

define void @store_ptr_unaligned_1(ptr %p, ptr %val) {
; OPT-LABEL: store_ptr_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    extui a5, a3, 0, 16
; OPT-NEXT:    srli a5, a5, 8
; OPT-NEXT:    s8i a3, a2, 0
; OPT-NEXT:    s8i a5, a2, 1
; OPT-NEXT:    extui a3, a3, 24, 8
; OPT-NEXT:    s8i a4, a2, 2
; OPT-NEXT:    s8i a3, a2, 3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_ptr_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a5, a2
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    extui a4, a2, 16, 16
; UNOPT-NEXT:    addi a3, a5, 2
; UNOPT-NEXT:    extui a6, a2, 0, 16
; UNOPT-NEXT:    srli a6, a6, 8
; UNOPT-NEXT:    s8i a2, a5, 0
; UNOPT-NEXT:    s8i a6, a5, 1
; UNOPT-NEXT:    extui a2, a2, 16, 16
; UNOPT-NEXT:    srli a2, a2, 8
; UNOPT-NEXT:    s8i a4, a5, 2
; UNOPT-NEXT:    s8i a2, a3, 1
; UNOPT-NEXT:    ret.n
entry:
  store ptr %val, ptr %p, align 1
  ret void
}

define void @store_ptr_unaligned_2(ptr %p, ptr %val) {
; OPT-LABEL: store_ptr_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    extui a4, a3, 16, 16
; OPT-NEXT:    s16i a3, a2, 0
; OPT-NEXT:    s16i a4, a2, 2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: store_ptr_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -4
; UNOPT-NEXT:    s32i.n a2, a1, 0 # 4-byte Folded Spill
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    l32i.n a3, a1, 0 # 4-byte Folded Reload
; UNOPT-NEXT:    extui a2, a4, 16, 16
; UNOPT-NEXT:    s16i a4, a3, 0
; UNOPT-NEXT:    s16i a2, a3, 2
; UNOPT-NEXT:    addi a1, a1, 4
; UNOPT-NEXT:    ret.n
entry:
  store ptr %val, ptr %p, align 2
  ret void
}
