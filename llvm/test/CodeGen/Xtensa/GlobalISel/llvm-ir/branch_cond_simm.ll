; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define void @branch_eq_neg_1(i32 %a) {
; CHECK-LABEL: branch_eq_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, -1, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB0_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @func(...)

define void @branch_eq_1(i32 %a) {
; CHECK-LABEL: branch_eq_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 1, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB1_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_2(i32 %a) {
; CHECK-LABEL: branch_eq_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 2, .LBB2_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB2_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_3(i32 %a) {
; CHECK-LABEL: branch_eq_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 3, .LBB3_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB3_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_4(i32 %a) {
; CHECK-LABEL: branch_eq_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 4, .LBB4_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB4_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_5(i32 %a) {
; CHECK-LABEL: branch_eq_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 5, .LBB5_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB5_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_6(i32 %a) {
; CHECK-LABEL: branch_eq_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 6, .LBB6_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB6_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_7(i32 %a) {
; CHECK-LABEL: branch_eq_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 7, .LBB7_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB7_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_8(i32 %a) {
; CHECK-LABEL: branch_eq_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 8, .LBB8_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB8_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_10(i32 %a) {
; CHECK-LABEL: branch_eq_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 10, .LBB9_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB9_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_12(i32 %a) {
; CHECK-LABEL: branch_eq_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 12, .LBB10_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB10_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_16(i32 %a) {
; CHECK-LABEL: branch_eq_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 16, .LBB11_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB11_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_32(i32 %a) {
; CHECK-LABEL: branch_eq_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 32, .LBB12_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB12_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_64(i32 %a) {
; CHECK-LABEL: branch_eq_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 64, .LBB13_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB13_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_128(i32 %a) {
; CHECK-LABEL: branch_eq_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 128, .LBB14_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB14_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_256(i32 %a) {
; CHECK-LABEL: branch_eq_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnei a2, 256, .LBB15_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB15_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_0(i32 %a) {
; CHECK-LABEL: branch_eq_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnez a2, .LBB16_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB16_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_17(i32 %a) {
; CHECK-LABEL: branch_eq_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bne a2, a3, .LBB17_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB17_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_20(i32 %a) {
; CHECK-LABEL: branch_eq_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    bne a2, a3, .LBB18_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB18_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_40(i32 %a) {
; CHECK-LABEL: branch_eq_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    bne a2, a3, .LBB19_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB19_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 40
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_200(i32 %a) {
; CHECK-LABEL: branch_eq_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    bne a2, a3, .LBB20_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB20_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 200
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_eq_512(i32 %a) {
; CHECK-LABEL: branch_eq_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    bne a2, a3, .LBB21_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB21_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 512
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_neg_1(i32 %a) {
; CHECK-LABEL: branch_ne_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, -1, .LBB22_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB22_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, -1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_1(i32 %a) {
; CHECK-LABEL: branch_ne_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 1, .LBB23_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB23_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_2(i32 %a) {
; CHECK-LABEL: branch_ne_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 2, .LBB24_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB24_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 2
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_3(i32 %a) {
; CHECK-LABEL: branch_ne_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 3, .LBB25_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB25_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 3
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_4(i32 %a) {
; CHECK-LABEL: branch_ne_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 4, .LBB26_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB26_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 4
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_5(i32 %a) {
; CHECK-LABEL: branch_ne_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 5, .LBB27_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB27_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 5
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_6(i32 %a) {
; CHECK-LABEL: branch_ne_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 6, .LBB28_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB28_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 6
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_7(i32 %a) {
; CHECK-LABEL: branch_ne_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 7, .LBB29_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB29_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 7
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_8(i32 %a) {
; CHECK-LABEL: branch_ne_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 8, .LBB30_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB30_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 8
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_10(i32 %a) {
; CHECK-LABEL: branch_ne_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 10, .LBB31_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB31_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_12(i32 %a) {
; CHECK-LABEL: branch_ne_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 12, .LBB32_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB32_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 12
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_16(i32 %a) {
; CHECK-LABEL: branch_ne_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 16, .LBB33_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB33_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 16
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_32(i32 %a) {
; CHECK-LABEL: branch_ne_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 32, .LBB34_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB34_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 32
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_64(i32 %a) {
; CHECK-LABEL: branch_ne_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 64, .LBB35_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB35_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 64
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_128(i32 %a) {
; CHECK-LABEL: branch_ne_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 128, .LBB36_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB36_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 128
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_256(i32 %a) {
; CHECK-LABEL: branch_ne_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqi a2, 256, .LBB37_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB37_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 256
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_0(i32 %a) {
; CHECK-LABEL: branch_ne_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB38_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB38_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 0
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_17(i32 %a) {
; CHECK-LABEL: branch_ne_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    beq a2, a3, .LBB39_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB39_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 17
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_20(i32 %a) {
; CHECK-LABEL: branch_ne_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    beq a2, a3, .LBB40_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB40_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 20
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_40(i32 %a) {
; CHECK-LABEL: branch_ne_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    beq a2, a3, .LBB41_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB41_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 40
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_200(i32 %a) {
; CHECK-LABEL: branch_ne_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    beq a2, a3, .LBB42_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB42_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 200
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_ne_512(i32 %a) {
; CHECK-LABEL: branch_ne_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    beq a2, a3, .LBB43_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB43_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 512
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_neg_1(i32 %a) {
; CHECK-LABEL: branch_sgt_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bltz a2, .LBB44_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB44_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_1(i32 %a) {
; CHECK-LABEL: branch_sgt_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    bge a3, a2, .LBB45_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB45_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_2(i32 %a) {
; CHECK-LABEL: branch_sgt_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 2
; CHECK-NEXT:    bge a3, a2, .LBB46_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB46_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_3(i32 %a) {
; CHECK-LABEL: branch_sgt_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 3
; CHECK-NEXT:    bge a3, a2, .LBB47_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB47_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_4(i32 %a) {
; CHECK-LABEL: branch_sgt_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 4
; CHECK-NEXT:    bge a3, a2, .LBB48_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB48_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_5(i32 %a) {
; CHECK-LABEL: branch_sgt_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 5
; CHECK-NEXT:    bge a3, a2, .LBB49_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB49_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_6(i32 %a) {
; CHECK-LABEL: branch_sgt_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 6
; CHECK-NEXT:    bge a3, a2, .LBB50_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB50_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_7(i32 %a) {
; CHECK-LABEL: branch_sgt_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 7
; CHECK-NEXT:    bge a3, a2, .LBB51_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB51_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_8(i32 %a) {
; CHECK-LABEL: branch_sgt_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 8
; CHECK-NEXT:    bge a3, a2, .LBB52_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB52_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_10(i32 %a) {
; CHECK-LABEL: branch_sgt_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 10
; CHECK-NEXT:    bge a3, a2, .LBB53_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB53_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_12(i32 %a) {
; CHECK-LABEL: branch_sgt_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 12
; CHECK-NEXT:    bge a3, a2, .LBB54_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB54_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_16(i32 %a) {
; CHECK-LABEL: branch_sgt_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 16
; CHECK-NEXT:    bge a3, a2, .LBB55_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB55_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_32(i32 %a) {
; CHECK-LABEL: branch_sgt_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    bge a3, a2, .LBB56_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB56_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_64(i32 %a) {
; CHECK-LABEL: branch_sgt_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 64
; CHECK-NEXT:    bge a3, a2, .LBB57_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB57_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_128(i32 %a) {
; CHECK-LABEL: branch_sgt_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 128
; CHECK-NEXT:    bge a3, a2, .LBB58_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB58_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_256(i32 %a) {
; CHECK-LABEL: branch_sgt_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 256
; CHECK-NEXT:    bge a3, a2, .LBB59_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB59_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_0(i32 %a) {
; CHECK-LABEL: branch_sgt_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    bge a3, a2, .LBB60_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB60_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_17(i32 %a) {
; CHECK-LABEL: branch_sgt_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bge a3, a2, .LBB61_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB61_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_20(i32 %a) {
; CHECK-LABEL: branch_sgt_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    bge a3, a2, .LBB62_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB62_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_40(i32 %a) {
; CHECK-LABEL: branch_sgt_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    bge a3, a2, .LBB63_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB63_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 40
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_200(i32 %a) {
; CHECK-LABEL: branch_sgt_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    bge a3, a2, .LBB64_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB64_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 200
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sgt_512(i32 %a) {
; CHECK-LABEL: branch_sgt_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    bge a3, a2, .LBB65_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB65_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 512
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_neg_1(i32 %a) {
; CHECK-LABEL: branch_sge_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, -2
; CHECK-NEXT:    bge a3, a2, .LBB66_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB66_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, -2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_1(i32 %a) {
; CHECK-LABEL: branch_sge_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    bge a3, a2, .LBB67_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB67_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_2(i32 %a) {
; CHECK-LABEL: branch_sge_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    bge a3, a2, .LBB68_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB68_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_3(i32 %a) {
; CHECK-LABEL: branch_sge_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 2
; CHECK-NEXT:    bge a3, a2, .LBB69_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB69_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_4(i32 %a) {
; CHECK-LABEL: branch_sge_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 3
; CHECK-NEXT:    bge a3, a2, .LBB70_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB70_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_5(i32 %a) {
; CHECK-LABEL: branch_sge_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 4
; CHECK-NEXT:    bge a3, a2, .LBB71_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB71_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_6(i32 %a) {
; CHECK-LABEL: branch_sge_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 5
; CHECK-NEXT:    bge a3, a2, .LBB72_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB72_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_7(i32 %a) {
; CHECK-LABEL: branch_sge_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 6
; CHECK-NEXT:    bge a3, a2, .LBB73_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB73_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_8(i32 %a) {
; CHECK-LABEL: branch_sge_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 7
; CHECK-NEXT:    bge a3, a2, .LBB74_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB74_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_10(i32 %a) {
; CHECK-LABEL: branch_sge_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 9
; CHECK-NEXT:    bge a3, a2, .LBB75_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB75_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_12(i32 %a) {
; CHECK-LABEL: branch_sge_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 11
; CHECK-NEXT:    bge a3, a2, .LBB76_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB76_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_16(i32 %a) {
; CHECK-LABEL: branch_sge_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 15
; CHECK-NEXT:    bge a3, a2, .LBB77_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB77_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 15
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_32(i32 %a) {
; CHECK-LABEL: branch_sge_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 31
; CHECK-NEXT:    bge a3, a2, .LBB78_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB78_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_64(i32 %a) {
; CHECK-LABEL: branch_sge_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 63
; CHECK-NEXT:    bge a3, a2, .LBB79_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB79_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_128(i32 %a) {
; CHECK-LABEL: branch_sge_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 127
; CHECK-NEXT:    bge a3, a2, .LBB80_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB80_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 127
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_256(i32 %a) {
; CHECK-LABEL: branch_sge_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 255
; CHECK-NEXT:    bge a3, a2, .LBB81_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB81_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_0(i32 %a) {
; CHECK-LABEL: branch_sge_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bltz a2, .LBB82_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB82_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_17(i32 %a) {
; CHECK-LABEL: branch_sge_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 16
; CHECK-NEXT:    bge a3, a2, .LBB83_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB83_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_20(i32 %a) {
; CHECK-LABEL: branch_sge_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 19
; CHECK-NEXT:    bge a3, a2, .LBB84_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB84_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 19
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_40(i32 %a) {
; CHECK-LABEL: branch_sge_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 39
; CHECK-NEXT:    bge a3, a2, .LBB85_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB85_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 39
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_200(i32 %a) {
; CHECK-LABEL: branch_sge_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 199
; CHECK-NEXT:    bge a3, a2, .LBB86_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB86_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 199
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sge_512(i32 %a) {
; CHECK-LABEL: branch_sge_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 511
; CHECK-NEXT:    bge a3, a2, .LBB87_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB87_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp sgt i32 %a, 511
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_neg_1(i32 %a) {
; CHECK-LABEL: branch_slt_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, -1, .LBB88_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB88_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_1(i32 %a) {
; CHECK-LABEL: branch_slt_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 1, .LBB89_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB89_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_2(i32 %a) {
; CHECK-LABEL: branch_slt_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 2, .LBB90_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB90_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_3(i32 %a) {
; CHECK-LABEL: branch_slt_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 3, .LBB91_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB91_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_4(i32 %a) {
; CHECK-LABEL: branch_slt_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 4, .LBB92_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB92_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_5(i32 %a) {
; CHECK-LABEL: branch_slt_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 5, .LBB93_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB93_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_6(i32 %a) {
; CHECK-LABEL: branch_slt_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 6, .LBB94_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB94_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_7(i32 %a) {
; CHECK-LABEL: branch_slt_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 7, .LBB95_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB95_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_8(i32 %a) {
; CHECK-LABEL: branch_slt_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 8, .LBB96_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB96_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_10(i32 %a) {
; CHECK-LABEL: branch_slt_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 10, .LBB97_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB97_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_12(i32 %a) {
; CHECK-LABEL: branch_slt_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 12, .LBB98_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB98_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_16(i32 %a) {
; CHECK-LABEL: branch_slt_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 16, .LBB99_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB99_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_32(i32 %a) {
; CHECK-LABEL: branch_slt_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 32, .LBB100_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB100_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_64(i32 %a) {
; CHECK-LABEL: branch_slt_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 64, .LBB101_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB101_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_128(i32 %a) {
; CHECK-LABEL: branch_slt_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 128, .LBB102_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB102_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_256(i32 %a) {
; CHECK-LABEL: branch_slt_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 256, .LBB103_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB103_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_0(i32 %a) {
; CHECK-LABEL: branch_slt_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgez a2, .LBB104_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB104_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_17(i32 %a) {
; CHECK-LABEL: branch_slt_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bge a2, a3, .LBB105_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB105_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_20(i32 %a) {
; CHECK-LABEL: branch_slt_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    bge a2, a3, .LBB106_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB106_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_40(i32 %a) {
; CHECK-LABEL: branch_slt_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    bge a2, a3, .LBB107_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB107_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 40
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_200(i32 %a) {
; CHECK-LABEL: branch_slt_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    bge a2, a3, .LBB108_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB108_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 200
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_slt_512(i32 %a) {
; CHECK-LABEL: branch_slt_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    bge a2, a3, .LBB109_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB109_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 512
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_neg_1(i32 %a) {
; CHECK-LABEL: branch_sle_neg_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgez a2, .LBB110_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB110_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_1(i32 %a) {
; CHECK-LABEL: branch_sle_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 2, .LBB111_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB111_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_2(i32 %a) {
; CHECK-LABEL: branch_sle_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 3, .LBB112_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB112_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_3(i32 %a) {
; CHECK-LABEL: branch_sle_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 4, .LBB113_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB113_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_4(i32 %a) {
; CHECK-LABEL: branch_sle_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 5, .LBB114_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB114_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_5(i32 %a) {
; CHECK-LABEL: branch_sle_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 6, .LBB115_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB115_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_6(i32 %a) {
; CHECK-LABEL: branch_sle_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 7, .LBB116_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB116_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_7(i32 %a) {
; CHECK-LABEL: branch_sle_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 8, .LBB117_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB117_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_8(i32 %a) {
; CHECK-LABEL: branch_sle_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 9
; CHECK-NEXT:    bge a2, a3, .LBB118_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB118_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_10(i32 %a) {
; CHECK-LABEL: branch_sle_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 11
; CHECK-NEXT:    bge a2, a3, .LBB119_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB119_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_12(i32 %a) {
; CHECK-LABEL: branch_sle_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 13
; CHECK-NEXT:    bge a2, a3, .LBB120_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB120_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_16(i32 %a) {
; CHECK-LABEL: branch_sle_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bge a2, a3, .LBB121_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB121_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_32(i32 %a) {
; CHECK-LABEL: branch_sle_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 33
; CHECK-NEXT:    bge a2, a3, .LBB122_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB122_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 33
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_64(i32 %a) {
; CHECK-LABEL: branch_sle_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 65
; CHECK-NEXT:    bge a2, a3, .LBB123_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB123_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 65
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_128(i32 %a) {
; CHECK-LABEL: branch_sle_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 129
; CHECK-NEXT:    bge a2, a3, .LBB124_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB124_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 129
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_256(i32 %a) {
; CHECK-LABEL: branch_sle_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 257
; CHECK-NEXT:    bge a2, a3, .LBB125_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB125_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 257
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_0(i32 %a) {
; CHECK-LABEL: branch_sle_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgei a2, 1, .LBB126_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB126_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_17(i32 %a) {
; CHECK-LABEL: branch_sle_17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 18
; CHECK-NEXT:    bge a2, a3, .LBB127_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB127_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 18
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_20(i32 %a) {
; CHECK-LABEL: branch_sle_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 21
; CHECK-NEXT:    bge a2, a3, .LBB128_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB128_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 21
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_40(i32 %a) {
; CHECK-LABEL: branch_sle_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 41
; CHECK-NEXT:    bge a2, a3, .LBB129_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB129_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 41
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_200(i32 %a) {
; CHECK-LABEL: branch_sle_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 201
; CHECK-NEXT:    bge a2, a3, .LBB130_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB130_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 201
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

define void @branch_sle_512(i32 %a) {
; CHECK-LABEL: branch_sle_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 513
; CHECK-NEXT:    bge a2, a3, .LBB131_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB131_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp slt i32 %a, 513
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}
