; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

declare i32 @ret_i32()
declare i1 @ret_i1()
declare i8 @ret_i8()
declare i16 @ret_i16()
declare i64 @ret_i64()

define void @do_calls() {
; OPT-LABEL: do_calls:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a1, a1, -16
; OPT-NEXT:    s32i a0, a1, 12 # 4-byte Folded Spill
; OPT-NEXT:    call0 ret_i32
; OPT-NEXT:    call0 ret_i1
; OPT-NEXT:    call0 ret_i8
; OPT-NEXT:    call0 ret_i16
; OPT-NEXT:    call0 ret_i64
; OPT-NEXT:    l32i a0, a1, 12 # 4-byte Folded Reload
; OPT-NEXT:    addi a1, a1, 16
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: do_calls:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i a0, a1, 12 # 4-byte Folded Spill
; UNOPT-NEXT:    call0 ret_i32
; UNOPT-NEXT:    call0 ret_i1
; UNOPT-NEXT:    call0 ret_i8
; UNOPT-NEXT:    call0 ret_i16
; UNOPT-NEXT:    call0 ret_i64
; UNOPT-NEXT:    l32i a0, a1, 12 # 4-byte Folded Reload
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
  %ret32 = call i32 @ret_i32()
  %ret1 = call i1 @ret_i1()
  %ret8 = call i8 @ret_i8()
  %ret16 = call i16 @ret_i16()
  %ret64 = call i64 @ret_i64()
  ret void
}
