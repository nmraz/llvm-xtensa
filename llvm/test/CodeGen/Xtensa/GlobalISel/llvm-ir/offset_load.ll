; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i8 @offset_load_i8(ptr %base) {
; OPT-LABEL: offset_load_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    l8ui a2, a2, 5
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l8ui a2, a2, 5
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 5
  %load = load i8, ptr %p
  ret i8 %load
}

define i8 @offset_load_i8_neg(ptr %base) {
; OPT-LABEL: offset_load_i8_neg:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a2, a2, -5
; OPT-NEXT:    l8ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i8_neg:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a2, a2, -5
; UNOPT-NEXT:    l8ui a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 -5
  %load = load i8, ptr %p
  ret i8 %load
}

define i8 @offset_load_i8_oob(ptr %base) {
; OPT-LABEL: offset_load_i8_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 256
; OPT-NEXT:    l8ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i8_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 256
; UNOPT-NEXT:    l8ui a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 256
  %load = load i8, ptr %p
  ret i8 %load
}

define i16 @offset_load_i16(ptr %base) {
; OPT-LABEL: offset_load_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    l16ui a2, a2, 10
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l16ui a2, a2, 10
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 5
  %load = load i16, ptr %p
  ret i16 %load
}

define i16 @offset_load_i16_neg(ptr %base) {
; OPT-LABEL: offset_load_i16_neg:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a2, a2, -10
; OPT-NEXT:    l16ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16_neg:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a2, a2, -10
; UNOPT-NEXT:    l16ui a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 -5
  %load = load i16, ptr %p
  ret i16 %load
}

define i16 @offset_load_i16_unaligned_off(ptr %base) {
; OPT-LABEL: offset_load_i16_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi.n a2, a2, 11
; OPT-NEXT:    l16ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi.n a2, a2, 11
; UNOPT-NEXT:    l16ui a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 11
  %load = load i16, ptr %p
  ret i16 %load
}

define i16 @offset_load_i16_oob(ptr %base) {
; OPT-LABEL: offset_load_i16_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 512
; OPT-NEXT:    l16ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 512
; UNOPT-NEXT:    l16ui a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 256
  %load = load i16, ptr %p
  ret i16 %load
}

define i16 @offset_load_i16_oob2(ptr %base) {
; OPT-LABEL: offset_load_i16_oob2:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 512
; OPT-NEXT:    l16ui a2, a2, 88
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16_oob2:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 512
; UNOPT-NEXT:    l16ui a2, a2, 88
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 300
  %load = load i16, ptr %p
  ret i16 %load
}

define i16 @offset_load_i16_unaligned(ptr %base) {
; OPT-LABEL: offset_load_i16_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    l8ui a3, a2, 11
; OPT-NEXT:    l8ui a2, a2, 10
; OPT-NEXT:    slli a3, a3, 8
; OPT-NEXT:    or a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i16_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l8ui a3, a2, 10
; UNOPT-NEXT:    l8ui a2, a2, 11
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
  %p = getelementptr i16, ptr %base, i32 5
  %load = load i16, ptr %p, align 1
  ret i16 %load
}

define i32 @offset_load_i32(ptr %base) {
; OPT-LABEL: offset_load_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    l32i.n a2, a2, 20
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l32i.n a2, a2, 20
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_neg(ptr %base) {
; OPT-LABEL: offset_load_i32_neg:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a2, a2, -20
; OPT-NEXT:    l32i.n a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_neg:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a2, a2, -20
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 -5
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_narrow_max(ptr %base) {
; OPT-LABEL: offset_load_i32_narrow_max:
; OPT:       # %bb.0:
; OPT-NEXT:    l32i.n a2, a2, 60
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_narrow_max:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l32i.n a2, a2, 60
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 15
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_narrow_oob(ptr %base) {
; OPT-LABEL: offset_load_i32_narrow_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    l32i a2, a2, 64
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_narrow_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    l32i a2, a2, 64
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 16
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_unaligned_off(ptr %base) {
; OPT-LABEL: offset_load_i32_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a2, a2, 22
; OPT-NEXT:    l32i.n a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a2, a2, 22
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 22
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_oob(ptr %base) {
; OPT-LABEL: offset_load_i32_oob:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 1024
; OPT-NEXT:    l32i.n a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_oob:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 1024
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 256
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_oob2(ptr %base) {
; OPT-LABEL: offset_load_i32_oob2:
; OPT:       # %bb.0:
; OPT-NEXT:    addmi a2, a2, 1024
; OPT-NEXT:    l32i a2, a2, 176
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_oob2:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addmi a2, a2, 1024
; UNOPT-NEXT:    l32i a2, a2, 176
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 300
  %load = load i32, ptr %p
  ret i32 %load
}

define i32 @offset_load_i32_unaligned(ptr %base) {
; OPT-LABEL: offset_load_i32_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    l8ui a3, a2, 21
; OPT-NEXT:    l8ui a4, a2, 20
; OPT-NEXT:    l8ui a5, a2, 23
; OPT-NEXT:    l8ui a2, a2, 22
; OPT-NEXT:    slli a3, a3, 8
; OPT-NEXT:    or a3, a3, a4
; OPT-NEXT:    slli a4, a5, 24
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    or a2, a4, a2
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i32_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    addi a2, a3, 20
; UNOPT-NEXT:    l8ui a4, a3, 20
; UNOPT-NEXT:    l8ui a3, a2, 1
; UNOPT-NEXT:    slli a3, a3, 8
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    l8ui a4, a2, 2
; UNOPT-NEXT:    l8ui a2, a2, 3
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  %load = load i32, ptr %p, align 1
  ret i32 %load
}

define i64 @offset_load_i64(ptr %base) {
; OPT-LABEL: offset_load_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    l32i.n a4, a2, 40
; OPT-NEXT:    l32i.n a3, a2, 44
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    l32i.n a2, a3, 40
; UNOPT-NEXT:    l32i.n a3, a3, 44
; UNOPT-NEXT:    ret.n
  %p = getelementptr i64, ptr %base, i32 5
  %load = load i64, ptr %p
  ret i64 %load
}

define i64 @offset_load_i64_neg(ptr %base) {
; OPT-LABEL: offset_load_i64_neg:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a3, a2, -40
; OPT-NEXT:    l32i.n a4, a3, 0
; OPT-NEXT:    addi a2, a2, -36
; OPT-NEXT:    l32i.n a3, a2, 0
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i64_neg:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    addi a2, a3, -40
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    addi a3, a3, -36
; UNOPT-NEXT:    l32i.n a3, a3, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i64, ptr %base, i32 -5
  %load = load i64, ptr %p
  ret i64 %load
}

define i64 @offset_load_i64_unaligned_off4(ptr %base) {
; OPT-LABEL: offset_load_i64_unaligned_off4:
; OPT:       # %bb.0:
; OPT-NEXT:    l32i.n a4, a2, 20
; OPT-NEXT:    l32i.n a3, a2, 24
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i64_unaligned_off4:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    l32i.n a2, a3, 20
; UNOPT-NEXT:    l32i.n a3, a3, 24
; UNOPT-NEXT:    ret.n
  %p = getelementptr i32, ptr %base, i32 5
  %load = load i64, ptr %p
  ret i64 %load
}

define i64 @offset_load_i64_unaligned_off(ptr %base) {
; OPT-LABEL: offset_load_i64_unaligned_off:
; OPT:       # %bb.0:
; OPT-NEXT:    addi a3, a2, 21
; OPT-NEXT:    l32i.n a4, a3, 0
; OPT-NEXT:    addi a2, a2, 25
; OPT-NEXT:    l32i.n a3, a2, 0
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i64_unaligned_off:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    addi a2, a3, 21
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    addi a3, a3, 25
; UNOPT-NEXT:    l32i.n a3, a3, 0
; UNOPT-NEXT:    ret.n
  %p = getelementptr i8, ptr %base, i32 21
  %load = load i64, ptr %p
  ret i64 %load
}

define i64 @offset_load_i64_unaligned(ptr %base) {
; OPT-LABEL: offset_load_i64_unaligned:
; OPT:       # %bb.0:
; OPT-NEXT:    l8ui a3, a2, 41
; OPT-NEXT:    l8ui a4, a2, 40
; OPT-NEXT:    l8ui a5, a2, 43
; OPT-NEXT:    l8ui a6, a2, 42
; OPT-NEXT:    slli a3, a3, 8
; OPT-NEXT:    or a3, a3, a4
; OPT-NEXT:    slli a4, a5, 24
; OPT-NEXT:    slli a5, a6, 16
; OPT-NEXT:    or a4, a4, a5
; OPT-NEXT:    or a4, a4, a3
; OPT-NEXT:    l8ui a3, a2, 45
; OPT-NEXT:    l8ui a5, a2, 44
; OPT-NEXT:    l8ui a6, a2, 47
; OPT-NEXT:    l8ui a2, a2, 46
; OPT-NEXT:    slli a3, a3, 8
; OPT-NEXT:    or a3, a3, a5
; OPT-NEXT:    slli a5, a6, 24
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    or a2, a5, a2
; OPT-NEXT:    or a3, a2, a3
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: offset_load_i64_unaligned:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    addi a2, a4, 40
; UNOPT-NEXT:    l8ui a5, a4, 40
; UNOPT-NEXT:    l8ui a3, a2, 1
; UNOPT-NEXT:    slli a3, a3, 8
; UNOPT-NEXT:    or a3, a3, a5
; UNOPT-NEXT:    l8ui a5, a2, 2
; UNOPT-NEXT:    l8ui a2, a2, 3
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a5
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    addi a3, a4, 44
; UNOPT-NEXT:    l8ui a5, a4, 44
; UNOPT-NEXT:    l8ui a4, a3, 1
; UNOPT-NEXT:    slli a4, a4, 8
; UNOPT-NEXT:    or a4, a4, a5
; UNOPT-NEXT:    l8ui a5, a3, 2
; UNOPT-NEXT:    l8ui a3, a3, 3
; UNOPT-NEXT:    slli a3, a3, 8
; UNOPT-NEXT:    or a3, a3, a5
; UNOPT-NEXT:    slli a3, a3, 16
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    ret.n
  %p = getelementptr i64, ptr %base, i32 5
  %load = load i64, ptr %p, align 1
  ret i64 %load
}
