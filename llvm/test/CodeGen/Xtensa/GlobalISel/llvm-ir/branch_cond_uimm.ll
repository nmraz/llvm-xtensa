; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

define void @branch_ugt_32768(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_32768:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI0_0
; CHECK-NEXT:    bgeu a3, a2, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB0_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 32768
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare void @func(...)

; Function Attrs: nounwind
define void @branch_ugt_65536(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_65536:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI1_0
; CHECK-NEXT:    bgeu a3, a2, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB1_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 65536
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_2(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 2
; CHECK-NEXT:    bgeu a3, a2, .LBB2_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB2_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_3(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 3
; CHECK-NEXT:    bgeu a3, a2, .LBB3_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB3_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_4(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 4
; CHECK-NEXT:    bgeu a3, a2, .LBB4_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB4_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_5(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 5
; CHECK-NEXT:    bgeu a3, a2, .LBB5_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB5_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_6(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 6
; CHECK-NEXT:    bgeu a3, a2, .LBB6_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB6_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_7(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 7
; CHECK-NEXT:    bgeu a3, a2, .LBB7_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB7_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_8(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 8
; CHECK-NEXT:    bgeu a3, a2, .LBB8_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB8_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_10(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 10
; CHECK-NEXT:    bgeu a3, a2, .LBB9_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB9_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_12(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 12
; CHECK-NEXT:    bgeu a3, a2, .LBB10_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB10_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_16(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 16
; CHECK-NEXT:    bgeu a3, a2, .LBB11_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB11_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_32(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 32
; CHECK-NEXT:    bgeu a3, a2, .LBB12_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB12_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_64(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 64
; CHECK-NEXT:    bgeu a3, a2, .LBB13_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB13_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_128(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 128
; CHECK-NEXT:    bgeu a3, a2, .LBB14_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB14_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_256(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 256
; CHECK-NEXT:    bgeu a3, a2, .LBB15_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB15_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_0(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB16_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB16_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 0
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_1(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    bgeu a3, a2, .LBB17_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB17_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_18(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 18
; CHECK-NEXT:    bgeu a3, a2, .LBB18_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB18_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 18
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_20(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    bgeu a3, a2, .LBB19_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB19_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_40(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    bgeu a3, a2, .LBB20_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB20_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 40
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_200(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    bgeu a3, a2, .LBB21_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB21_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 200
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ugt_512(i32 noundef %a) {
; CHECK-LABEL: branch_ugt_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    bgeu a3, a2, .LBB22_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB22_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 512
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_32768(i32 noundef %a) {
; CHECK-LABEL: branch_uge_32768:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI23_0
; CHECK-NEXT:    bgeu a3, a2, .LBB23_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB23_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 32767
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_65536(i32 noundef %a) {
; CHECK-LABEL: branch_uge_65536:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI24_0
; CHECK-NEXT:    bgeu a3, a2, .LBB24_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB24_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 65535
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_2(i32 noundef %a) {
; CHECK-LABEL: branch_uge_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 1
; CHECK-NEXT:    bgeu a3, a2, .LBB25_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB25_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_3(i32 noundef %a) {
; CHECK-LABEL: branch_uge_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 2
; CHECK-NEXT:    bgeu a3, a2, .LBB26_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB26_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_4(i32 noundef %a) {
; CHECK-LABEL: branch_uge_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 3
; CHECK-NEXT:    bgeu a3, a2, .LBB27_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB27_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_5(i32 noundef %a) {
; CHECK-LABEL: branch_uge_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 4
; CHECK-NEXT:    bgeu a3, a2, .LBB28_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB28_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_6(i32 noundef %a) {
; CHECK-LABEL: branch_uge_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 5
; CHECK-NEXT:    bgeu a3, a2, .LBB29_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB29_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_7(i32 noundef %a) {
; CHECK-LABEL: branch_uge_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 6
; CHECK-NEXT:    bgeu a3, a2, .LBB30_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB30_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_8(i32 noundef %a) {
; CHECK-LABEL: branch_uge_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 7
; CHECK-NEXT:    bgeu a3, a2, .LBB31_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB31_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_10(i32 noundef %a) {
; CHECK-LABEL: branch_uge_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 9
; CHECK-NEXT:    bgeu a3, a2, .LBB32_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB32_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_12(i32 noundef %a) {
; CHECK-LABEL: branch_uge_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 11
; CHECK-NEXT:    bgeu a3, a2, .LBB33_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB33_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_16(i32 noundef %a) {
; CHECK-LABEL: branch_uge_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 15
; CHECK-NEXT:    bgeu a3, a2, .LBB34_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB34_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 15
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_32(i32 noundef %a) {
; CHECK-LABEL: branch_uge_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 31
; CHECK-NEXT:    bgeu a3, a2, .LBB35_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB35_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 31
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_64(i32 noundef %a) {
; CHECK-LABEL: branch_uge_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 63
; CHECK-NEXT:    bgeu a3, a2, .LBB36_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB36_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_128(i32 noundef %a) {
; CHECK-LABEL: branch_uge_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 127
; CHECK-NEXT:    bgeu a3, a2, .LBB37_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB37_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 127
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_256(i32 noundef %a) {
; CHECK-LABEL: branch_uge_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 255
; CHECK-NEXT:    bgeu a3, a2, .LBB38_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB38_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 255
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_0(i32 noundef %a) {
; CHECK-LABEL: branch_uge_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 func
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  tail call void @func()
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_1(i32 noundef %a) {
; CHECK-LABEL: branch_uge_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB40_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB40_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp.not = icmp eq i32 %a, 0
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_18(i32 noundef %a) {
; CHECK-LABEL: branch_uge_18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bgeu a3, a2, .LBB41_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB41_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_20(i32 noundef %a) {
; CHECK-LABEL: branch_uge_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 19
; CHECK-NEXT:    bgeu a3, a2, .LBB42_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB42_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 19
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_40(i32 noundef %a) {
; CHECK-LABEL: branch_uge_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 39
; CHECK-NEXT:    bgeu a3, a2, .LBB43_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB43_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 39
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_200(i32 noundef %a) {
; CHECK-LABEL: branch_uge_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 199
; CHECK-NEXT:    bgeu a3, a2, .LBB44_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB44_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 199
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_uge_512(i32 noundef %a) {
; CHECK-LABEL: branch_uge_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 511
; CHECK-NEXT:    bgeu a3, a2, .LBB45_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB45_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ugt i32 %a, 511
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_32768(i32 noundef %a) {
; CHECK-LABEL: branch_ult_32768:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 32768, .LBB46_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB46_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 32768
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_65536(i32 noundef %a) {
; CHECK-LABEL: branch_ult_65536:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 65536, .LBB47_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB47_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 65536
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_2(i32 noundef %a) {
; CHECK-LABEL: branch_ult_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 2, .LBB48_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB48_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_3(i32 noundef %a) {
; CHECK-LABEL: branch_ult_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 3, .LBB49_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB49_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_4(i32 noundef %a) {
; CHECK-LABEL: branch_ult_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 4, .LBB50_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB50_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_5(i32 noundef %a) {
; CHECK-LABEL: branch_ult_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 5, .LBB51_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB51_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_6(i32 noundef %a) {
; CHECK-LABEL: branch_ult_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 6, .LBB52_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB52_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_7(i32 noundef %a) {
; CHECK-LABEL: branch_ult_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 7, .LBB53_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB53_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_8(i32 noundef %a) {
; CHECK-LABEL: branch_ult_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 8, .LBB54_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB54_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_10(i32 noundef %a) {
; CHECK-LABEL: branch_ult_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 10, .LBB55_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB55_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_12(i32 noundef %a) {
; CHECK-LABEL: branch_ult_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 12, .LBB56_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB56_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_16(i32 noundef %a) {
; CHECK-LABEL: branch_ult_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 16, .LBB57_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB57_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_32(i32 noundef %a) {
; CHECK-LABEL: branch_ult_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 32, .LBB58_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB58_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_64(i32 noundef %a) {
; CHECK-LABEL: branch_ult_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 64, .LBB59_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB59_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_128(i32 noundef %a) {
; CHECK-LABEL: branch_ult_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 128, .LBB60_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB60_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 128
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_256(i32 noundef %a) {
; CHECK-LABEL: branch_ult_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 256, .LBB61_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB61_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind readnone willreturn
define void @branch_ult_0(i32 noundef %a) local_unnamed_addr #2 {
; CHECK-LABEL: branch_ult_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret.n
entry:
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_1(i32 noundef %a) {
; CHECK-LABEL: branch_ult_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnez a2, .LBB63_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB63_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_18(i32 noundef %a) {
; CHECK-LABEL: branch_ult_18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 18
; CHECK-NEXT:    bgeu a2, a3, .LBB64_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB64_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 18
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_20(i32 noundef %a) {
; CHECK-LABEL: branch_ult_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 20
; CHECK-NEXT:    bgeu a2, a3, .LBB65_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB65_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_40(i32 noundef %a) {
; CHECK-LABEL: branch_ult_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 40
; CHECK-NEXT:    bgeu a2, a3, .LBB66_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB66_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 40
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_200(i32 noundef %a) {
; CHECK-LABEL: branch_ult_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 200
; CHECK-NEXT:    bgeu a2, a3, .LBB67_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB67_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 200
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ult_512(i32 noundef %a) {
; CHECK-LABEL: branch_ult_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 512
; CHECK-NEXT:    bgeu a2, a3, .LBB68_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB68_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 512
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_32768(i32 noundef %a) {
; CHECK-LABEL: branch_ule_32768:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI69_0
; CHECK-NEXT:    bgeu a2, a3, .LBB69_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB69_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 32769
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_65536(i32 noundef %a) {
; CHECK-LABEL: branch_ule_65536:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    l32r a3, .LCPI70_0
; CHECK-NEXT:    bgeu a2, a3, .LBB70_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB70_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 65537
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_2(i32 noundef %a) {
; CHECK-LABEL: branch_ule_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 3, .LBB71_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB71_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_3(i32 noundef %a) {
; CHECK-LABEL: branch_ule_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 4, .LBB72_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB72_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_4(i32 noundef %a) {
; CHECK-LABEL: branch_ule_4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 5, .LBB73_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB73_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_5(i32 noundef %a) {
; CHECK-LABEL: branch_ule_5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 6, .LBB74_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB74_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_6(i32 noundef %a) {
; CHECK-LABEL: branch_ule_6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 7, .LBB75_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB75_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_7(i32 noundef %a) {
; CHECK-LABEL: branch_ule_7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 8, .LBB76_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB76_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_8(i32 noundef %a) {
; CHECK-LABEL: branch_ule_8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 9
; CHECK-NEXT:    bgeu a2, a3, .LBB77_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB77_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_10(i32 noundef %a) {
; CHECK-LABEL: branch_ule_10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 11
; CHECK-NEXT:    bgeu a2, a3, .LBB78_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB78_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_12(i32 noundef %a) {
; CHECK-LABEL: branch_ule_12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 13
; CHECK-NEXT:    bgeu a2, a3, .LBB79_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB79_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_16(i32 noundef %a) {
; CHECK-LABEL: branch_ule_16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 17
; CHECK-NEXT:    bgeu a2, a3, .LBB80_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB80_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 17
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_32(i32 noundef %a) {
; CHECK-LABEL: branch_ule_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 33
; CHECK-NEXT:    bgeu a2, a3, .LBB81_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB81_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 33
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_64(i32 noundef %a) {
; CHECK-LABEL: branch_ule_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 65
; CHECK-NEXT:    bgeu a2, a3, .LBB82_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB82_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 65
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_128(i32 noundef %a) {
; CHECK-LABEL: branch_ule_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 129
; CHECK-NEXT:    bgeu a2, a3, .LBB83_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB83_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 129
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_256(i32 noundef %a) {
; CHECK-LABEL: branch_ule_256:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 257
; CHECK-NEXT:    bgeu a2, a3, .LBB84_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB84_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 257
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_0(i32 noundef %a) {
; CHECK-LABEL: branch_ule_0:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnez a2, .LBB85_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB85_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp eq i32 %a, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_1(i32 noundef %a) {
; CHECK-LABEL: branch_ule_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bgeui a2, 2, .LBB86_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB86_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_18(i32 noundef %a) {
; CHECK-LABEL: branch_ule_18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 19
; CHECK-NEXT:    bgeu a2, a3, .LBB87_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB87_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 19
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_20(i32 noundef %a) {
; CHECK-LABEL: branch_ule_20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 21
; CHECK-NEXT:    bgeu a2, a3, .LBB88_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB88_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 21
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_40(i32 noundef %a) {
; CHECK-LABEL: branch_ule_40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi.n a3, 41
; CHECK-NEXT:    bgeu a2, a3, .LBB89_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB89_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 41
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_200(i32 noundef %a) {
; CHECK-LABEL: branch_ule_200:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 201
; CHECK-NEXT:    bgeu a2, a3, .LBB90_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB90_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 201
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
define void @branch_ule_512(i32 noundef %a) {
; CHECK-LABEL: branch_ule_512:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    movi a3, 513
; CHECK-NEXT:    bgeu a2, a3, .LBB91_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    call0 func
; CHECK-NEXT:  .LBB91_2: # %if.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
entry:
  %cmp = icmp ult i32 %a, 513
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @func()
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}
