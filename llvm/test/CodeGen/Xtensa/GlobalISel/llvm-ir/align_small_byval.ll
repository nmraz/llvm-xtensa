; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s

%byte2 = type { i8, i8 }

define i8 @func(ptr byval(%byte2) %p1, ptr byval(%byte2) %p2) {
; CHECK-LABEL: func:
; CHECK:       # %bb.0:
; CHECK-NEXT:    l8ui a2, a1, 0
; CHECK-NEXT:    l8ui a3, a1, 1
; CHECK-NEXT:    l8ui a4, a1, 4
; CHECK-NEXT:    l8ui a5, a1, 5
; CHECK-NEXT:    add.n a2, a2, a3
; CHECK-NEXT:    add.n a3, a4, a5
; CHECK-NEXT:    add.n a2, a2, a3
; CHECK-NEXT:    ret.n
  %a1 = load i8, ptr %p1
  %pb1 = getelementptr %byte2, ptr %p1, i32 0, i32 1
  %b1 = load i8, ptr %pb1
  %a2 = load i8, ptr %p2
  %pb2 = getelementptr %byte2, ptr %p2, i32 0, i32 1
  %b2 = load i8, ptr %pb2
  %add1 = add i8 %a1, %b1
  %add2 = add i8 %a2, %b2
  %add = add i8 %add1, %add2
  ret i8 %add
}

@s1 = private constant %byte2 { i8 1, i8 2 }
@s2 = private constant %byte2 { i8 3, i8 4 }

define void @caller() {
; CHECK-LABEL: caller:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    mov.n a2, a1
; CHECK-NEXT:    l32r a3, .LCPI1_1
; CHECK-NEXT:    movi.n a4, 2
; CHECK-NEXT:    call0 memcpy
; CHECK-NEXT:    addi a2, a1, 4
; CHECK-NEXT:    l32r a3, .LCPI1_0
; CHECK-NEXT:    movi.n a4, 2
; CHECK-NEXT:    call0 memcpy
; CHECK-NEXT:    call0 func
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
  call i8 @func(ptr byval(%byte2) @s1, ptr byval(%byte2) @s2)
  ret void
}
