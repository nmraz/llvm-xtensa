; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT

define i8 @load_i8(ptr %p) {
; OPT-LABEL: load_i8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l8ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l8ui a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %load = load i8, ptr %p, align 1
  ret i8 %load
}

define i16 @load_i16(ptr %p) {
; OPT-LABEL: load_i16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l16ui a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l16ui a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %load = load i16, ptr %p, align 2
  ret i16 %load
}

define i16 @load_i16_unaligned_1(ptr %p) {
; OPT-LABEL: load_i16_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l8ui a3, a2, 0
; OPT-NEXT:    l8ui a2, a2, 1
; OPT-NEXT:    slli a2, a2, 8
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i16_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l8ui a3, a2, 0
; UNOPT-NEXT:    l8ui a2, a2, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %load = load i16, ptr %p, align 1
  ret i16 %load
}

define i32 @load_i32(ptr %p) {
; OPT-LABEL: load_i32:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l32i.n a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i32:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %load = load i32, ptr %p, align 4
  ret i32 %load
}

define i32 @load_i32_unaligned_1(ptr %p) {
; OPT-LABEL: load_i32_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l8ui a3, a2, 0
; OPT-NEXT:    l8ui a4, a2, 1
; OPT-NEXT:    slli a4, a4, 8
; OPT-NEXT:    or a3, a4, a3
; OPT-NEXT:    l8ui a4, a2, 2
; OPT-NEXT:    l8ui a2, a2, 3
; OPT-NEXT:    slli a2, a2, 24
; OPT-NEXT:    slli a4, a4, 16
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i32_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    l8ui a3, a4, 0
; UNOPT-NEXT:    l8ui a2, a4, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a3, a2, a3
; UNOPT-NEXT:    addi a2, a4, 2
; UNOPT-NEXT:    l8ui a4, a4, 2
; UNOPT-NEXT:    l8ui a2, a2, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %load = load i32, ptr %p, align 1
  ret i32 %load
}

define i32 @load_i32_unaligned_2(ptr %p) {
; OPT-LABEL: load_i32_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l16ui a3, a2, 0
; OPT-NEXT:    l16ui a2, a2, 2
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i32_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l16ui a3, a2, 0
; UNOPT-NEXT:    l16ui a2, a2, 2
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %load = load i32, ptr %p, align 2
  ret i32 %load
}

define i64 @load_i64(ptr %p) {
; OPT-LABEL: load_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l32i.n a4, a2, 0
; OPT-NEXT:    l32i.n a3, a2, 4
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    l32i.n a2, a3, 0
; UNOPT-NEXT:    l32i.n a3, a3, 4
; UNOPT-NEXT:    ret.n
entry:
  %load = load i64, ptr %p, align 8
  ret i64 %load
}

define i64 @load_i64_unaligned_1(ptr %p) {
; OPT-LABEL: load_i64_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l8ui a3, a2, 0
; OPT-NEXT:    l8ui a4, a2, 1
; OPT-NEXT:    slli a4, a4, 8
; OPT-NEXT:    or a3, a4, a3
; OPT-NEXT:    l8ui a4, a2, 2
; OPT-NEXT:    l8ui a5, a2, 3
; OPT-NEXT:    slli a5, a5, 24
; OPT-NEXT:    slli a4, a4, 16
; OPT-NEXT:    or a4, a5, a4
; OPT-NEXT:    or a4, a4, a3
; OPT-NEXT:    l8ui a3, a2, 4
; OPT-NEXT:    l8ui a5, a2, 5
; OPT-NEXT:    slli a5, a5, 8
; OPT-NEXT:    or a3, a5, a3
; OPT-NEXT:    l8ui a5, a2, 6
; OPT-NEXT:    l8ui a2, a2, 7
; OPT-NEXT:    slli a2, a2, 24
; OPT-NEXT:    slli a5, a5, 16
; OPT-NEXT:    or a2, a2, a5
; OPT-NEXT:    or a3, a2, a3
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i64_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    l8ui a4, a3, 0
; UNOPT-NEXT:    l8ui a2, a3, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a4, a2, a4
; UNOPT-NEXT:    addi a2, a3, 2
; UNOPT-NEXT:    l8ui a5, a3, 2
; UNOPT-NEXT:    l8ui a2, a2, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a5
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    addi a5, a3, 4
; UNOPT-NEXT:    l8ui a4, a3, 4
; UNOPT-NEXT:    l8ui a3, a5, 1
; UNOPT-NEXT:    slli a3, a3, 8
; UNOPT-NEXT:    or a4, a3, a4
; UNOPT-NEXT:    addi a3, a5, 2
; UNOPT-NEXT:    l8ui a5, a5, 2
; UNOPT-NEXT:    l8ui a3, a3, 1
; UNOPT-NEXT:    slli a3, a3, 8
; UNOPT-NEXT:    or a3, a3, a5
; UNOPT-NEXT:    slli a3, a3, 16
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %load = load i64, ptr %p, align 1
  ret i64 %load
}

define i64 @load_i64_unaligned_2(ptr %p) {
; OPT-LABEL: load_i64_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l16ui a3, a2, 0
; OPT-NEXT:    l16ui a4, a2, 2
; OPT-NEXT:    slli a4, a4, 16
; OPT-NEXT:    or a4, a4, a3
; OPT-NEXT:    l16ui a3, a2, 4
; OPT-NEXT:    l16ui a2, a2, 6
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    or a3, a2, a3
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i64_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    l16ui a3, a4, 0
; UNOPT-NEXT:    l16ui a2, a4, 2
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    addi a3, a4, 4
; UNOPT-NEXT:    l16ui a4, a4, 4
; UNOPT-NEXT:    l16ui a3, a3, 2
; UNOPT-NEXT:    slli a3, a3, 16
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    ret.n
entry:
  %load = load i64, ptr %p, align 2
  ret i64 %load
}

define i64 @load_i64_unaligned_4(ptr %p) {
; OPT-LABEL: load_i64_unaligned_4:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l32i.n a4, a2, 0
; OPT-NEXT:    l32i.n a3, a2, 4
; OPT-NEXT:    mov.n a2, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_i64_unaligned_4:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a3, a2
; UNOPT-NEXT:    l32i.n a2, a3, 0
; UNOPT-NEXT:    l32i.n a3, a3, 4
; UNOPT-NEXT:    ret.n
entry:
  %load = load i64, ptr %p, align 4
  ret i64 %load
}

define ptr @load_ptr(ptr %p) {
; OPT-LABEL: load_ptr:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l32i.n a2, a2, 0
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_ptr:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l32i.n a2, a2, 0
; UNOPT-NEXT:    ret.n
entry:
  %load = load ptr, ptr %p, align 4
  ret ptr %load
}

define ptr @load_ptr_unaligned_1(ptr %p) {
; OPT-LABEL: load_ptr_unaligned_1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l8ui a3, a2, 0
; OPT-NEXT:    l8ui a4, a2, 1
; OPT-NEXT:    slli a4, a4, 8
; OPT-NEXT:    or a3, a4, a3
; OPT-NEXT:    l8ui a4, a2, 2
; OPT-NEXT:    l8ui a2, a2, 3
; OPT-NEXT:    slli a2, a2, 24
; OPT-NEXT:    slli a4, a4, 16
; OPT-NEXT:    or a2, a2, a4
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_ptr_unaligned_1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    mov.n a4, a2
; UNOPT-NEXT:    l8ui a3, a4, 0
; UNOPT-NEXT:    l8ui a2, a4, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a3, a2, a3
; UNOPT-NEXT:    addi a2, a4, 2
; UNOPT-NEXT:    l8ui a4, a4, 2
; UNOPT-NEXT:    l8ui a2, a2, 1
; UNOPT-NEXT:    slli a2, a2, 8
; UNOPT-NEXT:    or a2, a2, a4
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %load = load ptr, ptr %p, align 1
  ret ptr %load
}

define ptr @load_ptr_unaligned_2(ptr %p) {
; OPT-LABEL: load_ptr_unaligned_2:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    l16ui a3, a2, 0
; OPT-NEXT:    l16ui a2, a2, 2
; OPT-NEXT:    slli a2, a2, 16
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: load_ptr_unaligned_2:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    l16ui a3, a2, 0
; UNOPT-NEXT:    l16ui a2, a2, 2
; UNOPT-NEXT:    slli a2, a2, 16
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
entry:
  %load = load ptr, ptr %p, align 2
  ret ptr %load
}
