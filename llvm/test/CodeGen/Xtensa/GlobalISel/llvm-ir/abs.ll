; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-OPT
; RUN: llc -O0 < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-UNOPT

declare i8 @llvm.abs.i8(i8 %val, i1)
declare i16 @llvm.abs.i16(i16 %val, i1)
declare i32 @llvm.abs.i32(i32 %val, i1)
declare i64 @llvm.abs.i64(i64 %val, i1)

define i8 @abs_i8(i8 %val) {
; OPT-LABEL: abs_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    sext a2, a2, 7
; OPT-NEXT:    abs a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: abs_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    sext a2, a2, 7
; UNOPT-NEXT:    abs a2, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: abs_i8:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    sext a2, a2, 7
; LX7-OPT-NEXT:    abs a2, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: abs_i8:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    sext a2, a2, 7
; LX7-UNOPT-NEXT:    abs a2, a2
; LX7-UNOPT-NEXT:    ret.n
  %abs = call i8 @llvm.abs.i8(i8 %val, i1 true)
  ret i8 %abs
}

define i16 @abs_i16(i16 %val) {
; OPT-LABEL: abs_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    sext a2, a2, 15
; OPT-NEXT:    abs a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: abs_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    sext a2, a2, 15
; UNOPT-NEXT:    abs a2, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: abs_i16:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    sext a2, a2, 15
; LX7-OPT-NEXT:    abs a2, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: abs_i16:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    sext a2, a2, 15
; LX7-UNOPT-NEXT:    abs a2, a2
; LX7-UNOPT-NEXT:    ret.n
  %abs = call i16 @llvm.abs.i16(i16 %val, i1 true)
  ret i16 %abs
}

define i32 @abs_i32(i32 %val) {
; OPT-LABEL: abs_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    abs a2, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: abs_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    abs a2, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: abs_i32:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    abs a2, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: abs_i32:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    abs a2, a2
; LX7-UNOPT-NEXT:    ret.n
  %abs = call i32 @llvm.abs.i32(i32 %val, i1 true)
  ret i32 %abs
}

define i64 @abs_i64(i64 %val) {
; OPT-LABEL: abs_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    srai a4, a3, 31
; OPT-NEXT:    add.n a2, a2, a4
; OPT-NEXT:    add.n a3, a3, a4
; OPT-NEXT:    bgeu a2, a4, .LBB3_2
; OPT-NEXT:  # %bb.1:
; OPT-NEXT:    addi a3, a3, 1
; OPT-NEXT:  .LBB3_2:
; OPT-NEXT:    xor a2, a2, a4
; OPT-NEXT:    xor a3, a3, a4
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: abs_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -32
; UNOPT-NEXT:    mov.n a4, a3
; UNOPT-NEXT:    s32i.n a4, a1, 8 # 4-byte Spill
; UNOPT-NEXT:    srai a3, a4, 31
; UNOPT-NEXT:    s32i.n a3, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    srai a4, a4, 31
; UNOPT-NEXT:    s32i.n a4, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    add.n a2, a2, a3
; UNOPT-NEXT:    s32i.n a2, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    movi.n a4, 0
; UNOPT-NEXT:    s32i.n a4, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a4, 1
; UNOPT-NEXT:    s32i.n a4, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    bltu a2, a3, .LBB3_3
; UNOPT-NEXT:  # %bb.2:
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:  .LBB3_3:
; UNOPT-NEXT:    l32i.n a4, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a2, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 8 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a6, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    add.n a3, a3, a4
; UNOPT-NEXT:    add.n a3, a3, a6
; UNOPT-NEXT:    xor a2, a2, a5
; UNOPT-NEXT:    xor a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 32
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: abs_i64:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    srai a4, a3, 31
; LX7-OPT-NEXT:    add.n a2, a2, a4
; LX7-OPT-NEXT:    saltu a5, a2, a4
; LX7-OPT-NEXT:    add.n a3, a3, a4
; LX7-OPT-NEXT:    add.n a3, a3, a5
; LX7-OPT-NEXT:    xor a2, a2, a4
; LX7-OPT-NEXT:    xor a3, a3, a4
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: abs_i64:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    srai a5, a3, 31
; LX7-UNOPT-NEXT:    srai a4, a3, 31
; LX7-UNOPT-NEXT:    add.n a2, a2, a5
; LX7-UNOPT-NEXT:    saltu a6, a2, a5
; LX7-UNOPT-NEXT:    add.n a3, a3, a4
; LX7-UNOPT-NEXT:    add.n a3, a3, a6
; LX7-UNOPT-NEXT:    xor a2, a2, a5
; LX7-UNOPT-NEXT:    xor a3, a3, a4
; LX7-UNOPT-NEXT:    ret.n
  %abs = call i64 @llvm.abs.i64(i64 %val, i1 true)
  ret i64 %abs
}
