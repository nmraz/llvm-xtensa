; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s
; RUN: llc < %s -mtriple=xtensa -mattr=+nsa | FileCheck %s --check-prefix=NSA

declare i8 @llvm.ctlz.i8(i8, i1)
declare i16 @llvm.ctlz.i16(i16, i1)
declare i32 @llvm.ctlz.i32(i32, i1)
declare i64 @llvm.ctlz.i64(i64, i1)

declare i8 @llvm.cttz.i8(i8, i1)
declare i16 @llvm.cttz.i16(i16, i1)
declare i32 @llvm.cttz.i32(i32, i1)
declare i64 @llvm.cttz.i64(i64, i1)


define i8 @ctlz_i8(i8 %a) {
; CHECK-LABEL: ctlz_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    movi a3, 255
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnone a2, a3, .LBB0_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    extui a2, a2, 0, 8
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    addi a2, a2, -24
; CHECK-NEXT:    j .LBB0_3
; CHECK-NEXT:  .LBB0_1:
; CHECK-NEXT:    movi.n a2, 8
; CHECK-NEXT:  .LBB0_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_i8:
; NSA:       # %bb.0:
; NSA-NEXT:    extui a2, a2, 0, 8
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a2, a2, -24
; NSA-NEXT:    ret.n
  %ctz = call i8 @llvm.ctlz.i8(i8 %a, i1 0)
  ret i8 %ctz
}

define i8 @ctlz_zundef_i8(i8 %a) {
; CHECK-LABEL: ctlz_zundef_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    extui a2, a2, 0, 8
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a2, a2, -24
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_zundef_i8:
; NSA:       # %bb.0:
; NSA-NEXT:    extui a2, a2, 0, 8
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a2, a2, -24
; NSA-NEXT:    ret.n
  %ctz = call i8 @llvm.ctlz.i8(i8 %a, i1 1)
  ret i8 %ctz
}

define i8 @cttz_i8(i8 %a) {
; CHECK-LABEL: cttz_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    movi a3, 255
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnone a2, a3, .LBB2_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    j .LBB2_3
; CHECK-NEXT:  .LBB2_1:
; CHECK-NEXT:    movi.n a2, 8
; CHECK-NEXT:  .LBB2_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_i8:
; NSA:       # %bb.0:
; NSA-NEXT:    movi a3, 256
; NSA-NEXT:    or a2, a2, a3
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i8 @llvm.cttz.i8(i8 %a, i1 0)
  ret i8 %ctz
}

define i8 @cttz_zundef_i8(i8 %a) {
; CHECK-LABEL: cttz_zundef_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_zundef_i8:
; NSA:       # %bb.0:
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i8 @llvm.cttz.i8(i8 %a, i1 1)
  ret i8 %ctz
}

define i16 @ctlz_i16(i16 %a) {
; CHECK-LABEL: ctlz_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    l32r a3, .LCPI4_0
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnone a2, a3, .LBB4_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    extui a2, a2, 0, 16
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    addi a2, a2, -16
; CHECK-NEXT:    j .LBB4_3
; CHECK-NEXT:  .LBB4_1:
; CHECK-NEXT:    movi.n a2, 16
; CHECK-NEXT:  .LBB4_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_i16:
; NSA:       # %bb.0:
; NSA-NEXT:    extui a2, a2, 0, 16
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a2, a2, -16
; NSA-NEXT:    ret.n
  %ctz = call i16 @llvm.ctlz.i16(i16 %a, i1 0)
  ret i16 %ctz
}

define i16 @ctlz_zundef_i16(i16 %a) {
; CHECK-LABEL: ctlz_zundef_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    extui a2, a2, 0, 16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a2, a2, -16
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_zundef_i16:
; NSA:       # %bb.0:
; NSA-NEXT:    extui a2, a2, 0, 16
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a2, a2, -16
; NSA-NEXT:    ret.n
  %ctz = call i16 @llvm.ctlz.i16(i16 %a, i1 1)
  ret i16 %ctz
}

define i16 @cttz_i16(i16 %a) {
; CHECK-LABEL: cttz_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    l32r a3, .LCPI6_0
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    bnone a2, a3, .LBB6_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    j .LBB6_3
; CHECK-NEXT:  .LBB6_1:
; CHECK-NEXT:    movi.n a2, 16
; CHECK-NEXT:  .LBB6_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_i16:
; NSA:       # %bb.0:
; NSA-NEXT:    l32r a3, .LCPI6_0
; NSA-NEXT:    or a2, a2, a3
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i16 @llvm.cttz.i16(i16 %a, i1 0)
  ret i16 %ctz
}

define i16 @cttz_zundef_i16(i16 %a) {
; CHECK-LABEL: cttz_zundef_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_zundef_i16:
; NSA:       # %bb.0:
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i16 @llvm.cttz.i16(i16 %a, i1 1)
  ret i16 %ctz
}

define i32 @ctlz_i32(i32 %a) {
; CHECK-LABEL: ctlz_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB8_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    j .LBB8_3
; CHECK-NEXT:  .LBB8_1:
; CHECK-NEXT:    movi.n a2, 32
; CHECK-NEXT:  .LBB8_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_i32:
; NSA:       # %bb.0:
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    ret.n
  %ctz = call i32 @llvm.ctlz.i32(i32 %a, i1 0)
  ret i32 %ctz
}

define i32 @ctlz_zundef_i32(i32 %a) {
; CHECK-LABEL: ctlz_zundef_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __clzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_zundef_i32:
; NSA:       # %bb.0:
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    ret.n
  %ctz = call i32 @llvm.ctlz.i32(i32 %a, i1 1)
  ret i32 %ctz
}

define i32 @cttz_i32(i32 %a) {
; CHECK-LABEL: cttz_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    beqz a2, .LBB10_1
; CHECK-NEXT:  # %bb.2: # %cond.false
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    j .LBB10_3
; CHECK-NEXT:  .LBB10_1:
; CHECK-NEXT:    movi.n a2, 32
; CHECK-NEXT:  .LBB10_3: # %cond.end
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_i32:
; NSA:       # %bb.0:
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i32 @llvm.cttz.i32(i32 %a, i1 0)
  ret i32 %ctz
}

define i32 @cttz_zundef_i32(i32 %a) {
; CHECK-LABEL: cttz_zundef_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __ctzsi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_zundef_i32:
; NSA:       # %bb.0:
; NSA-NEXT:    addi.n a3, a2, -1
; NSA-NEXT:    and a2, a3, a2
; NSA-NEXT:    xor a2, a2, a3
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    movi.n a3, 32
; NSA-NEXT:    sub a2, a3, a2
; NSA-NEXT:    ret.n
  %ctz = call i32 @llvm.cttz.i32(i32 %a, i1 1)
  ret i32 %ctz
}

define i64 @ctlz_i64(i64 %a) {
; CHECK-LABEL: ctlz_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; CHECK-NEXT:    s32i.n a13, a1, 4 # 4-byte Spill
; CHECK-NEXT:    mov.n a12, a2
; CHECK-NEXT:    mov.n a13, a3
; CHECK-NEXT:    call0 __clzdi2
; CHECK-NEXT:    or a3, a12, a13
; CHECK-NEXT:    movi.n a4, 64
; CHECK-NEXT:    l32i.n a13, a1, 4 # 4-byte Reload
; CHECK-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_i64:
; NSA:       # %bb.0:
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a4, a2, 32
; NSA-NEXT:    nsau a2, a3
; NSA-NEXT:    moveqz a2, a4, a3
; NSA-NEXT:    movi.n a3, 0
; NSA-NEXT:    ret.n
  %ctz = call i64 @llvm.ctlz.i64(i64 %a, i1 0)
  ret i64 %ctz
}

define i64 @ctlz_zundef_i64(i64 %a) {
; CHECK-LABEL: ctlz_zundef_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __clzdi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: ctlz_zundef_i64:
; NSA:       # %bb.0:
; NSA-NEXT:    nsau a2, a2
; NSA-NEXT:    addi a4, a2, 32
; NSA-NEXT:    nsau a2, a3
; NSA-NEXT:    moveqz a2, a4, a3
; NSA-NEXT:    movi.n a3, 0
; NSA-NEXT:    ret.n
  %ctz = call i64 @llvm.ctlz.i64(i64 %a, i1 1)
  ret i64 %ctz
}

define i64 @cttz_i64(i64 %a) {
; CHECK-LABEL: cttz_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; CHECK-NEXT:    s32i.n a13, a1, 4 # 4-byte Spill
; CHECK-NEXT:    mov.n a12, a2
; CHECK-NEXT:    mov.n a13, a3
; CHECK-NEXT:    call0 __ctzdi2
; CHECK-NEXT:    or a3, a12, a13
; CHECK-NEXT:    movi.n a4, 64
; CHECK-NEXT:    l32i.n a13, a1, 4 # 4-byte Reload
; CHECK-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    moveqz a2, a4, a3
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_i64:
; NSA:       # %bb.0:
; NSA-NEXT:    addi a1, a1, -16
; NSA-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; NSA-NEXT:    s32i.n a12, a1, 8 # 4-byte Spill
; NSA-NEXT:    s32i.n a13, a1, 4 # 4-byte Spill
; NSA-NEXT:    mov.n a12, a2
; NSA-NEXT:    mov.n a13, a3
; NSA-NEXT:    call0 __ctzdi2
; NSA-NEXT:    or a3, a12, a13
; NSA-NEXT:    movi.n a4, 64
; NSA-NEXT:    l32i.n a13, a1, 4 # 4-byte Reload
; NSA-NEXT:    l32i.n a12, a1, 8 # 4-byte Reload
; NSA-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; NSA-NEXT:    moveqz a2, a4, a3
; NSA-NEXT:    movi.n a3, 0
; NSA-NEXT:    addi a1, a1, 16
; NSA-NEXT:    ret.n
  %ctz = call i64 @llvm.cttz.i64(i64 %a, i1 0)
  ret i64 %ctz
}

define i64 @cttz_zundef_i64(i64 %a) {
; CHECK-LABEL: cttz_zundef_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi a1, a1, -16
; CHECK-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; CHECK-NEXT:    call0 __ctzdi2
; CHECK-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; CHECK-NEXT:    movi.n a3, 0
; CHECK-NEXT:    addi a1, a1, 16
; CHECK-NEXT:    ret.n
;
; NSA-LABEL: cttz_zundef_i64:
; NSA:       # %bb.0:
; NSA-NEXT:    addi a1, a1, -16
; NSA-NEXT:    s32i.n a0, a1, 12 # 4-byte Spill
; NSA-NEXT:    call0 __ctzdi2
; NSA-NEXT:    l32i.n a0, a1, 12 # 4-byte Reload
; NSA-NEXT:    movi.n a3, 0
; NSA-NEXT:    addi a1, a1, 16
; NSA-NEXT:    ret.n
  %ctz = call i64 @llvm.cttz.i64(i64 %a, i1 1)
  ret i64 %ctz
}
