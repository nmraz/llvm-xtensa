; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-OPT
; RUN: llc -O0 < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-UNOPT

declare i8 @llvm.fshl.i8(i8 %a, i8 %b, i8 %c)
declare i16 @llvm.fshl.i16(i16 %a, i16 %b, i16 %c)
declare i32 @llvm.fshl.i32(i32 %a, i32 %b, i32 %c)
declare i64 @llvm.fshl.i64(i64 %a, i64 %b, i64 %c)
declare i8 @llvm.fshr.i8(i8 %a, i8 %b, i8 %c)
declare i16 @llvm.fshr.i16(i16 %a, i16 %b, i16 %c)
declare i32 @llvm.fshr.i32(i32 %a, i32 %b, i32 %c)
declare i64 @llvm.fshr.i64(i64 %a, i64 %b, i64 %c)

define i8 @fshl_i8(i8 %a, i8 %b, i8 %c) {
; OPT-LABEL: fshl_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a5, a4, 0, 3
; OPT-NEXT:    movi.n a6, -1
; OPT-NEXT:    xor a4, a4, a6
; OPT-NEXT:    extui a4, a4, 0, 3
; OPT-NEXT:    ssl a5
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    extui a3, a3, 0, 8
; OPT-NEXT:    srli a3, a3, 1
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a3, a3
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshl_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a5, a4, 0, 3
; UNOPT-NEXT:    movi.n a6, -1
; UNOPT-NEXT:    xor a4, a4, a6
; UNOPT-NEXT:    extui a4, a4, 0, 3
; UNOPT-NEXT:    extui a5, a5, 0, 8
; UNOPT-NEXT:    ssl a5
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    extui a3, a3, 0, 8
; UNOPT-NEXT:    extui a4, a4, 0, 8
; UNOPT-NEXT:    extui a3, a3, 1, 8
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshl_i8:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a5, a4, 0, 3
; LX7-OPT-NEXT:    movi.n a6, -1
; LX7-OPT-NEXT:    xor a4, a4, a6
; LX7-OPT-NEXT:    extui a4, a4, 0, 3
; LX7-OPT-NEXT:    ssl a5
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    extui a3, a3, 0, 8
; LX7-OPT-NEXT:    srli a3, a3, 1
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a3, a3
; LX7-OPT-NEXT:    or a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshl_i8:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    extui a5, a4, 0, 3
; LX7-UNOPT-NEXT:    movi.n a6, -1
; LX7-UNOPT-NEXT:    xor a4, a4, a6
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 3
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 8
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a2
; LX7-UNOPT-NEXT:    extui a3, a3, 0, 8
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 8
; LX7-UNOPT-NEXT:    extui a3, a3, 1, 8
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a3, a3
; LX7-UNOPT-NEXT:    or a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshl = call i8 @llvm.fshl.i8(i8 %a, i8 %b, i8 %c)
    ret i8 %fshl
}

define i16 @fshl_i16(i16 %a, i16 %b, i16 %c) {
; OPT-LABEL: fshl_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a5, a4, 0, 4
; OPT-NEXT:    movi.n a6, -1
; OPT-NEXT:    xor a4, a4, a6
; OPT-NEXT:    extui a4, a4, 0, 4
; OPT-NEXT:    ssl a5
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    extui a3, a3, 0, 16
; OPT-NEXT:    srli a3, a3, 1
; OPT-NEXT:    ssr a4
; OPT-NEXT:    srl a3, a3
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshl_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    extui a5, a4, 0, 4
; UNOPT-NEXT:    movi.n a6, -1
; UNOPT-NEXT:    xor a4, a4, a6
; UNOPT-NEXT:    extui a4, a4, 0, 4
; UNOPT-NEXT:    extui a5, a5, 0, 16
; UNOPT-NEXT:    ssl a5
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    extui a3, a3, 0, 16
; UNOPT-NEXT:    extui a4, a4, 0, 16
; UNOPT-NEXT:    extui a3, a3, 1, 16
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshl_i16:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a5, a4, 0, 4
; LX7-OPT-NEXT:    movi.n a6, -1
; LX7-OPT-NEXT:    xor a4, a4, a6
; LX7-OPT-NEXT:    extui a4, a4, 0, 4
; LX7-OPT-NEXT:    ssl a5
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    extui a3, a3, 0, 16
; LX7-OPT-NEXT:    srli a3, a3, 1
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    srl a3, a3
; LX7-OPT-NEXT:    or a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshl_i16:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    extui a5, a4, 0, 4
; LX7-UNOPT-NEXT:    movi.n a6, -1
; LX7-UNOPT-NEXT:    xor a4, a4, a6
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 4
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 16
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a2
; LX7-UNOPT-NEXT:    extui a3, a3, 0, 16
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 16
; LX7-UNOPT-NEXT:    extui a3, a3, 1, 16
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a3, a3
; LX7-UNOPT-NEXT:    or a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshl = call i16 @llvm.fshl.i16(i16 %a, i16 %b, i16 %c)
    ret i16 %fshl
}

define i32 @fshl_i32(i32 %a, i32 %b, i32 %c) {
; OPT-LABEL: fshl_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    ssl a4
; OPT-NEXT:    src a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshl_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    ssl a4
; UNOPT-NEXT:    src a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshl_i32:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    src a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshl_i32:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    ssl a4
; LX7-UNOPT-NEXT:    src a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshl = call i32 @llvm.fshl.i32(i32 %a, i32 %b, i32 %c)
    ret i32 %fshl
}

define i64 @fshl_i64(i64 %a, i64 %b, i64 %c) {
; OPT-LABEL: fshl_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a7, a6, 0, 6
; OPT-NEXT:    movi.n a8, -1
; OPT-NEXT:    xor a8, a6, a8
; OPT-NEXT:    extui a9, a8, 0, 6
; OPT-NEXT:    srli a7, a7, 5
; OPT-NEXT:    ssl a6
; OPT-NEXT:    src a3, a3, a2
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    movi.n a6, 0
; OPT-NEXT:    moveqz a6, a2, a7
; OPT-NEXT:    mov.n a10, a2
; OPT-NEXT:    moveqz a10, a3, a7
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    ssai 1
; OPT-NEXT:    src a2, a5, a4
; OPT-NEXT:    srli a4, a5, 1
; OPT-NEXT:    srli a5, a9, 5
; OPT-NEXT:    ssr a8
; OPT-NEXT:    src a2, a4, a2
; OPT-NEXT:    srl a4, a4
; OPT-NEXT:    moveqz a3, a4, a5
; OPT-NEXT:    moveqz a4, a2, a5
; OPT-NEXT:    or a2, a6, a4
; OPT-NEXT:    or a3, a10, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshl_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    extui a9, a6, 0, 6
; UNOPT-NEXT:    movi.n a7, -1
; UNOPT-NEXT:    xor a6, a6, a7
; UNOPT-NEXT:    extui a8, a6, 0, 6
; UNOPT-NEXT:    extui a7, a9, 5, 1
; UNOPT-NEXT:    extui a6, a9, 0, 5
; UNOPT-NEXT:    ssl a9
; UNOPT-NEXT:    src a2, a2, a3
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    sll a6, a3
; UNOPT-NEXT:    mov.n a3, a6
; UNOPT-NEXT:    moveqz a3, a2, a7
; UNOPT-NEXT:    movi.n a2, 0
; UNOPT-NEXT:    moveqz a2, a6, a7
; UNOPT-NEXT:    srli a4, a4, 1
; UNOPT-NEXT:    slli a6, a5, 31
; UNOPT-NEXT:    or a4, a4, a6
; UNOPT-NEXT:    srli a5, a5, 1
; UNOPT-NEXT:    extui a7, a8, 5, 1
; UNOPT-NEXT:    extui a6, a8, 0, 5
; UNOPT-NEXT:    ssr a8
; UNOPT-NEXT:    src a4, a5, a4
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    srl a6, a5
; UNOPT-NEXT:    mov.n a5, a6
; UNOPT-NEXT:    moveqz a5, a4, a7
; UNOPT-NEXT:    movi.n a4, 0
; UNOPT-NEXT:    moveqz a4, a6, a7
; UNOPT-NEXT:    or a2, a2, a5
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshl_i64:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a7, a6, 0, 6
; LX7-OPT-NEXT:    movi.n a8, -1
; LX7-OPT-NEXT:    xor a8, a6, a8
; LX7-OPT-NEXT:    extui a9, a8, 0, 6
; LX7-OPT-NEXT:    srli a7, a7, 5
; LX7-OPT-NEXT:    ssl a6
; LX7-OPT-NEXT:    src a3, a3, a2
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    movi.n a6, 0
; LX7-OPT-NEXT:    moveqz a6, a2, a7
; LX7-OPT-NEXT:    mov.n a10, a2
; LX7-OPT-NEXT:    moveqz a10, a3, a7
; LX7-OPT-NEXT:    movi.n a3, 0
; LX7-OPT-NEXT:    ssai 1
; LX7-OPT-NEXT:    src a2, a5, a4
; LX7-OPT-NEXT:    srli a4, a5, 1
; LX7-OPT-NEXT:    srli a5, a9, 5
; LX7-OPT-NEXT:    ssr a8
; LX7-OPT-NEXT:    src a2, a4, a2
; LX7-OPT-NEXT:    srl a4, a4
; LX7-OPT-NEXT:    moveqz a3, a4, a5
; LX7-OPT-NEXT:    moveqz a4, a2, a5
; LX7-OPT-NEXT:    or a2, a6, a4
; LX7-OPT-NEXT:    or a3, a10, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshl_i64:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    l32i.n a3, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    extui a9, a6, 0, 6
; LX7-UNOPT-NEXT:    movi.n a7, -1
; LX7-UNOPT-NEXT:    xor a6, a6, a7
; LX7-UNOPT-NEXT:    extui a8, a6, 0, 6
; LX7-UNOPT-NEXT:    extui a7, a9, 5, 1
; LX7-UNOPT-NEXT:    extui a6, a9, 0, 5
; LX7-UNOPT-NEXT:    ssl a9
; LX7-UNOPT-NEXT:    src a2, a2, a3
; LX7-UNOPT-NEXT:    ssl a6
; LX7-UNOPT-NEXT:    sll a6, a3
; LX7-UNOPT-NEXT:    mov.n a3, a6
; LX7-UNOPT-NEXT:    moveqz a3, a2, a7
; LX7-UNOPT-NEXT:    movi.n a2, 0
; LX7-UNOPT-NEXT:    moveqz a2, a6, a7
; LX7-UNOPT-NEXT:    srli a4, a4, 1
; LX7-UNOPT-NEXT:    slli a6, a5, 31
; LX7-UNOPT-NEXT:    or a4, a4, a6
; LX7-UNOPT-NEXT:    srli a5, a5, 1
; LX7-UNOPT-NEXT:    extui a7, a8, 5, 1
; LX7-UNOPT-NEXT:    extui a6, a8, 0, 5
; LX7-UNOPT-NEXT:    ssr a8
; LX7-UNOPT-NEXT:    src a4, a5, a4
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a6, a5
; LX7-UNOPT-NEXT:    mov.n a5, a6
; LX7-UNOPT-NEXT:    moveqz a5, a4, a7
; LX7-UNOPT-NEXT:    movi.n a4, 0
; LX7-UNOPT-NEXT:    moveqz a4, a6, a7
; LX7-UNOPT-NEXT:    or a2, a2, a5
; LX7-UNOPT-NEXT:    or a3, a3, a4
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
    %fshl = call i64 @llvm.fshl.i64(i64 %a, i64 %b, i64 %c)
    ret i64 %fshl
}

define i8 @fshr_i8(i8 %a, i8 %b, i8 %c) {
; OPT-LABEL: fshr_i8:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a5, a4, 0, 3
; OPT-NEXT:    movi.n a6, -1
; OPT-NEXT:    xor a4, a4, a6
; OPT-NEXT:    extui a4, a4, 0, 3
; OPT-NEXT:    slli a2, a2, 1
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    extui a3, a3, 0, 8
; OPT-NEXT:    ssr a5
; OPT-NEXT:    srl a3, a3
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshr_i8:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a5, a4
; UNOPT-NEXT:    extui a4, a5, 0, 3
; UNOPT-NEXT:    movi.n a6, -1
; UNOPT-NEXT:    xor a5, a5, a6
; UNOPT-NEXT:    extui a5, a5, 0, 3
; UNOPT-NEXT:    slli a2, a2, 1
; UNOPT-NEXT:    extui a5, a5, 0, 8
; UNOPT-NEXT:    ssl a5
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    extui a4, a4, 0, 8
; UNOPT-NEXT:    extui a3, a3, 0, 8
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshr_i8:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a5, a4, 0, 3
; LX7-OPT-NEXT:    movi.n a6, -1
; LX7-OPT-NEXT:    xor a4, a4, a6
; LX7-OPT-NEXT:    extui a4, a4, 0, 3
; LX7-OPT-NEXT:    slli a2, a2, 1
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    extui a3, a3, 0, 8
; LX7-OPT-NEXT:    ssr a5
; LX7-OPT-NEXT:    srl a3, a3
; LX7-OPT-NEXT:    or a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshr_i8:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    mov.n a5, a4
; LX7-UNOPT-NEXT:    extui a4, a5, 0, 3
; LX7-UNOPT-NEXT:    movi.n a6, -1
; LX7-UNOPT-NEXT:    xor a5, a5, a6
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 3
; LX7-UNOPT-NEXT:    slli a2, a2, 1
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 8
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a2
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 8
; LX7-UNOPT-NEXT:    extui a3, a3, 0, 8
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a3, a3
; LX7-UNOPT-NEXT:    or a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshr = call i8 @llvm.fshr.i8(i8 %a, i8 %b, i8 %c)
    ret i8 %fshr
}

define i16 @fshr_i16(i16 %a, i16 %b, i16 %c) {
; OPT-LABEL: fshr_i16:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a5, a4, 0, 4
; OPT-NEXT:    movi.n a6, -1
; OPT-NEXT:    xor a4, a4, a6
; OPT-NEXT:    extui a4, a4, 0, 4
; OPT-NEXT:    slli a2, a2, 1
; OPT-NEXT:    ssl a4
; OPT-NEXT:    sll a2, a2
; OPT-NEXT:    extui a3, a3, 0, 16
; OPT-NEXT:    ssr a5
; OPT-NEXT:    srl a3, a3
; OPT-NEXT:    or a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshr_i16:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    mov.n a5, a4
; UNOPT-NEXT:    extui a4, a5, 0, 4
; UNOPT-NEXT:    movi.n a6, -1
; UNOPT-NEXT:    xor a5, a5, a6
; UNOPT-NEXT:    extui a5, a5, 0, 4
; UNOPT-NEXT:    slli a2, a2, 1
; UNOPT-NEXT:    extui a5, a5, 0, 16
; UNOPT-NEXT:    ssl a5
; UNOPT-NEXT:    sll a2, a2
; UNOPT-NEXT:    extui a4, a4, 0, 16
; UNOPT-NEXT:    extui a3, a3, 0, 16
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    srl a3, a3
; UNOPT-NEXT:    or a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshr_i16:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a5, a4, 0, 4
; LX7-OPT-NEXT:    movi.n a6, -1
; LX7-OPT-NEXT:    xor a4, a4, a6
; LX7-OPT-NEXT:    extui a4, a4, 0, 4
; LX7-OPT-NEXT:    slli a2, a2, 1
; LX7-OPT-NEXT:    ssl a4
; LX7-OPT-NEXT:    sll a2, a2
; LX7-OPT-NEXT:    extui a3, a3, 0, 16
; LX7-OPT-NEXT:    ssr a5
; LX7-OPT-NEXT:    srl a3, a3
; LX7-OPT-NEXT:    or a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshr_i16:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    mov.n a5, a4
; LX7-UNOPT-NEXT:    extui a4, a5, 0, 4
; LX7-UNOPT-NEXT:    movi.n a6, -1
; LX7-UNOPT-NEXT:    xor a5, a5, a6
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 4
; LX7-UNOPT-NEXT:    slli a2, a2, 1
; LX7-UNOPT-NEXT:    extui a5, a5, 0, 16
; LX7-UNOPT-NEXT:    ssl a5
; LX7-UNOPT-NEXT:    sll a2, a2
; LX7-UNOPT-NEXT:    extui a4, a4, 0, 16
; LX7-UNOPT-NEXT:    extui a3, a3, 0, 16
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    srl a3, a3
; LX7-UNOPT-NEXT:    or a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshr = call i16 @llvm.fshr.i16(i16 %a, i16 %b, i16 %c)
    ret i16 %fshr
}

define i32 @fshr_i32(i32 %a, i32 %b, i32 %c) {
; OPT-LABEL: fshr_i32:
; OPT:       # %bb.0:
; OPT-NEXT:    ssr a4
; OPT-NEXT:    src a2, a2, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshr_i32:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    ssr a4
; UNOPT-NEXT:    src a2, a2, a3
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshr_i32:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    ssr a4
; LX7-OPT-NEXT:    src a2, a2, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshr_i32:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    ssr a4
; LX7-UNOPT-NEXT:    src a2, a2, a3
; LX7-UNOPT-NEXT:    ret.n
    %fshr = call i32 @llvm.fshr.i32(i32 %a, i32 %b, i32 %c)
    ret i32 %fshr
}

define i64 @fshr_i64(i64 %a, i64 %b, i64 %c) {
; OPT-LABEL: fshr_i64:
; OPT:       # %bb.0:
; OPT-NEXT:    extui a7, a6, 0, 6
; OPT-NEXT:    movi.n a8, -1
; OPT-NEXT:    xor a8, a6, a8
; OPT-NEXT:    extui a9, a8, 0, 6
; OPT-NEXT:    slli a10, a2, 1
; OPT-NEXT:    ssai 31
; OPT-NEXT:    src a2, a3, a2
; OPT-NEXT:    srli a3, a9, 5
; OPT-NEXT:    ssl a8
; OPT-NEXT:    src a2, a2, a10
; OPT-NEXT:    sll a8, a10
; OPT-NEXT:    movi.n a9, 0
; OPT-NEXT:    moveqz a9, a8, a3
; OPT-NEXT:    moveqz a8, a2, a3
; OPT-NEXT:    movi.n a3, 0
; OPT-NEXT:    srli a2, a7, 5
; OPT-NEXT:    ssr a6
; OPT-NEXT:    src a4, a5, a4
; OPT-NEXT:    srl a5, a5
; OPT-NEXT:    moveqz a3, a5, a2
; OPT-NEXT:    moveqz a5, a4, a2
; OPT-NEXT:    or a2, a9, a5
; OPT-NEXT:    or a3, a8, a3
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: fshr_i64:
; UNOPT:       # %bb.1:
; UNOPT-NEXT:    addi a1, a1, -16
; UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    mov.n a2, a3
; UNOPT-NEXT:    mov.n a3, a6
; UNOPT-NEXT:    l32i.n a6, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    extui a8, a3, 0, 6
; UNOPT-NEXT:    movi.n a7, -1
; UNOPT-NEXT:    xor a3, a3, a7
; UNOPT-NEXT:    extui a9, a3, 0, 6
; UNOPT-NEXT:    slli a3, a6, 1
; UNOPT-NEXT:    slli a2, a2, 1
; UNOPT-NEXT:    extui a6, a6, 31, 1
; UNOPT-NEXT:    or a2, a2, a6
; UNOPT-NEXT:    extui a7, a9, 5, 1
; UNOPT-NEXT:    extui a6, a9, 0, 5
; UNOPT-NEXT:    ssl a9
; UNOPT-NEXT:    src a2, a2, a3
; UNOPT-NEXT:    ssl a6
; UNOPT-NEXT:    sll a6, a3
; UNOPT-NEXT:    mov.n a3, a6
; UNOPT-NEXT:    moveqz a3, a2, a7
; UNOPT-NEXT:    movi.n a2, 0
; UNOPT-NEXT:    moveqz a2, a6, a7
; UNOPT-NEXT:    extui a7, a8, 5, 1
; UNOPT-NEXT:    extui a6, a8, 0, 5
; UNOPT-NEXT:    ssr a8
; UNOPT-NEXT:    src a4, a5, a4
; UNOPT-NEXT:    ssr a6
; UNOPT-NEXT:    srl a6, a5
; UNOPT-NEXT:    mov.n a5, a6
; UNOPT-NEXT:    moveqz a5, a4, a7
; UNOPT-NEXT:    movi.n a4, 0
; UNOPT-NEXT:    moveqz a4, a6, a7
; UNOPT-NEXT:    or a2, a2, a5
; UNOPT-NEXT:    or a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 16
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: fshr_i64:
; LX7-OPT:       # %bb.0:
; LX7-OPT-NEXT:    extui a7, a6, 0, 6
; LX7-OPT-NEXT:    movi.n a8, -1
; LX7-OPT-NEXT:    xor a8, a6, a8
; LX7-OPT-NEXT:    extui a9, a8, 0, 6
; LX7-OPT-NEXT:    slli a10, a2, 1
; LX7-OPT-NEXT:    ssai 31
; LX7-OPT-NEXT:    src a2, a3, a2
; LX7-OPT-NEXT:    srli a3, a9, 5
; LX7-OPT-NEXT:    ssl a8
; LX7-OPT-NEXT:    src a2, a2, a10
; LX7-OPT-NEXT:    sll a8, a10
; LX7-OPT-NEXT:    movi.n a9, 0
; LX7-OPT-NEXT:    moveqz a9, a8, a3
; LX7-OPT-NEXT:    moveqz a8, a2, a3
; LX7-OPT-NEXT:    movi.n a3, 0
; LX7-OPT-NEXT:    srli a2, a7, 5
; LX7-OPT-NEXT:    ssr a6
; LX7-OPT-NEXT:    src a4, a5, a4
; LX7-OPT-NEXT:    srl a5, a5
; LX7-OPT-NEXT:    moveqz a3, a5, a2
; LX7-OPT-NEXT:    moveqz a5, a4, a2
; LX7-OPT-NEXT:    or a2, a9, a5
; LX7-OPT-NEXT:    or a3, a8, a3
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: fshr_i64:
; LX7-UNOPT:       # %bb.1:
; LX7-UNOPT-NEXT:    addi a1, a1, -16
; LX7-UNOPT-NEXT:    s32i.n a2, a1, 12 # 4-byte Spill
; LX7-UNOPT-NEXT:    mov.n a2, a3
; LX7-UNOPT-NEXT:    mov.n a3, a6
; LX7-UNOPT-NEXT:    l32i.n a6, a1, 12 # 4-byte Reload
; LX7-UNOPT-NEXT:    extui a8, a3, 0, 6
; LX7-UNOPT-NEXT:    movi.n a7, -1
; LX7-UNOPT-NEXT:    xor a3, a3, a7
; LX7-UNOPT-NEXT:    extui a9, a3, 0, 6
; LX7-UNOPT-NEXT:    slli a3, a6, 1
; LX7-UNOPT-NEXT:    slli a2, a2, 1
; LX7-UNOPT-NEXT:    extui a6, a6, 31, 1
; LX7-UNOPT-NEXT:    or a2, a2, a6
; LX7-UNOPT-NEXT:    extui a7, a9, 5, 1
; LX7-UNOPT-NEXT:    extui a6, a9, 0, 5
; LX7-UNOPT-NEXT:    ssl a9
; LX7-UNOPT-NEXT:    src a2, a2, a3
; LX7-UNOPT-NEXT:    ssl a6
; LX7-UNOPT-NEXT:    sll a6, a3
; LX7-UNOPT-NEXT:    mov.n a3, a6
; LX7-UNOPT-NEXT:    moveqz a3, a2, a7
; LX7-UNOPT-NEXT:    movi.n a2, 0
; LX7-UNOPT-NEXT:    moveqz a2, a6, a7
; LX7-UNOPT-NEXT:    extui a7, a8, 5, 1
; LX7-UNOPT-NEXT:    extui a6, a8, 0, 5
; LX7-UNOPT-NEXT:    ssr a8
; LX7-UNOPT-NEXT:    src a4, a5, a4
; LX7-UNOPT-NEXT:    ssr a6
; LX7-UNOPT-NEXT:    srl a6, a5
; LX7-UNOPT-NEXT:    mov.n a5, a6
; LX7-UNOPT-NEXT:    moveqz a5, a4, a7
; LX7-UNOPT-NEXT:    movi.n a4, 0
; LX7-UNOPT-NEXT:    moveqz a4, a6, a7
; LX7-UNOPT-NEXT:    or a2, a2, a5
; LX7-UNOPT-NEXT:    or a3, a3, a4
; LX7-UNOPT-NEXT:    addi a1, a1, 16
; LX7-UNOPT-NEXT:    ret.n
    %fshr = call i64 @llvm.fshr.i64(i64 %a, i64 %b, i64 %c)
    ret i64 %fshr
}
