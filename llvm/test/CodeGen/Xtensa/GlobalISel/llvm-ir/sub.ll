; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=xtensa | FileCheck %s --check-prefix=OPT
; RUN: llc -O0 < %s -mtriple=xtensa | FileCheck %s --check-prefix=UNOPT
; RUN: llc < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-OPT
; RUN: llc -O0 < %s -mtriple=xtensa -mcpu=lx7 | FileCheck %s --check-prefix=LX7-UNOPT

define i1 @sub_i1(i1 %a, i1 %b) {
; OPT-LABEL: sub_i1:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    sub a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i1:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    sub a2, a3, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i1:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a2, a3, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i1:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    sub a2, a3, a2
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i1 %b, %a
  ret i1 %sub
}

define i8 @sub_i8(i8 %a, i8 %b) {
; OPT-LABEL: sub_i8:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    sub a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i8:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    sub a2, a3, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i8:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a2, a3, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i8:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    sub a2, a3, a2
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i8 %b, %a
  ret i8 %sub
}

define i16 @sub_i16(i16 %a, i16 %b) {
; OPT-LABEL: sub_i16:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    sub a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i16:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    sub a2, a3, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i16:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a2, a3, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i16:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    sub a2, a3, a2
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i16 %b, %a
  ret i16 %sub
}

define i32 @sub_i32(i32 %a, i32 %b) {
; OPT-LABEL: sub_i32:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    sub a2, a3, a2
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i32:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    sub a2, a3, a2
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i32:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a2, a3, a2
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i32:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    sub a2, a3, a2
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i32 %b, %a
  ret i32 %sub
}

define i33 @sub_i33(i33 %a, i33 %b) {
; OPT-LABEL: sub_i33:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a6, a2
; OPT-NEXT:    sub a2, a4, a2
; OPT-NEXT:    sub a3, a5, a3
; OPT-NEXT:    bgeu a4, a6, .LBB4_2
; OPT-NEXT:  # %bb.1:
; OPT-NEXT:    addi.n a3, a3, -1
; OPT-NEXT:  .LBB4_2: # %entry
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i33:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -32
; UNOPT-NEXT:    s32i.n a3, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a5, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    sub a3, a4, a2
; UNOPT-NEXT:    s32i.n a3, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    s32i.n a3, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 1
; UNOPT-NEXT:    s32i.n a3, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB4_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:  .LBB4_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    sub a3, a3, a5
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 32
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i33:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a6, a4, a2
; LX7-OPT-NEXT:    saltu a2, a4, a2
; LX7-OPT-NEXT:    sub a3, a5, a3
; LX7-OPT-NEXT:    sub a3, a3, a2
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i33:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    sub a2, a4, a6
; LX7-UNOPT-NEXT:    saltu a4, a4, a6
; LX7-UNOPT-NEXT:    sub a3, a5, a3
; LX7-UNOPT-NEXT:    sub a3, a3, a4
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i33 %b, %a
  ret i33 %sub
}

define i64 @sub_i64(i64 %a, i64 %b) {
; OPT-LABEL: sub_i64:
; OPT:       # %bb.0: # %entry
; OPT-NEXT:    mov.n a6, a2
; OPT-NEXT:    sub a2, a4, a2
; OPT-NEXT:    sub a3, a5, a3
; OPT-NEXT:    bgeu a4, a6, .LBB5_2
; OPT-NEXT:  # %bb.1:
; OPT-NEXT:    addi.n a3, a3, -1
; OPT-NEXT:  .LBB5_2: # %entry
; OPT-NEXT:    ret.n
;
; UNOPT-LABEL: sub_i64:
; UNOPT:       # %bb.1: # %entry
; UNOPT-NEXT:    addi a1, a1, -32
; UNOPT-NEXT:    s32i.n a3, a1, 12 # 4-byte Spill
; UNOPT-NEXT:    s32i.n a5, a1, 16 # 4-byte Spill
; UNOPT-NEXT:    sub a3, a4, a2
; UNOPT-NEXT:    s32i.n a3, a1, 20 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 0
; UNOPT-NEXT:    s32i.n a3, a1, 24 # 4-byte Spill
; UNOPT-NEXT:    movi.n a3, 1
; UNOPT-NEXT:    s32i.n a3, a1, 28 # 4-byte Spill
; UNOPT-NEXT:    bltu a4, a2, .LBB5_3
; UNOPT-NEXT:  # %bb.2: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 24 # 4-byte Reload
; UNOPT-NEXT:    s32i.n a2, a1, 28 # 4-byte Spill
; UNOPT-NEXT:  .LBB5_3: # %entry
; UNOPT-NEXT:    l32i.n a2, a1, 20 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a3, a1, 16 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a5, a1, 12 # 4-byte Reload
; UNOPT-NEXT:    l32i.n a4, a1, 28 # 4-byte Reload
; UNOPT-NEXT:    sub a3, a3, a5
; UNOPT-NEXT:    sub a3, a3, a4
; UNOPT-NEXT:    addi a1, a1, 32
; UNOPT-NEXT:    ret.n
;
; LX7-OPT-LABEL: sub_i64:
; LX7-OPT:       # %bb.0: # %entry
; LX7-OPT-NEXT:    sub a6, a4, a2
; LX7-OPT-NEXT:    saltu a2, a4, a2
; LX7-OPT-NEXT:    sub a3, a5, a3
; LX7-OPT-NEXT:    sub a3, a3, a2
; LX7-OPT-NEXT:    mov.n a2, a6
; LX7-OPT-NEXT:    ret.n
;
; LX7-UNOPT-LABEL: sub_i64:
; LX7-UNOPT:       # %bb.1: # %entry
; LX7-UNOPT-NEXT:    mov.n a6, a2
; LX7-UNOPT-NEXT:    sub a2, a4, a6
; LX7-UNOPT-NEXT:    saltu a4, a4, a6
; LX7-UNOPT-NEXT:    sub a3, a5, a3
; LX7-UNOPT-NEXT:    sub a3, a3, a4
; LX7-UNOPT-NEXT:    ret.n
entry:
  %sub = sub i64 %b, %a
  ret i64 %sub
}
