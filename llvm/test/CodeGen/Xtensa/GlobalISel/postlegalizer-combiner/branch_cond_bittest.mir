# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=xtensa-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'branch_cond_bittest.ll'
  source_filename = "branch_cond_bittest.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare void @func(...)

  define void @branch_set_0(i32 %a) {
  entry:
    %and = and i32 %a, 1
    %cmp = icmp ne i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_clear_0(i32 %a) {
  entry:
    %and = and i32 %a, 1
    %cmp = icmp eq i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_set_5(i32 %a) {
  entry:
    %and = and i32 %a, 32
    %cmp = icmp ne i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_clear_5(i32 %a) {
  entry:
    %and = and i32 %a, 32
    %cmp = icmp eq i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_set_31(i32 %a) {
  entry:
    %and = and i32 %a, -2147483648
    %cmp = icmp ne i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_clear_31(i32 %a) {
  entry:
    %and = and i32 %a, -2147483648
    %cmp = icmp eq i32 %and, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

...
---
name:            branch_set_0
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_set_0
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[XOR:%[0-9]+]]:_(s32) = G_XOR [[AND]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[XOR]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(ne), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_clear_0
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_clear_0
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 1
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(eq), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_set_5
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_set_5
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
  ; CHECK-NEXT:   [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C1]](s32)
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[LSHR]], [[C]]
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[XOR:%[0-9]+]]:_(s32) = G_XOR [[AND]], [[C2]]
  ; CHECK-NEXT:   G_BRCOND [[XOR]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 32
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(ne), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_clear_5
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_clear_5
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
  ; CHECK-NEXT:   [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C1]](s32)
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s32) = G_AND [[LSHR]], [[C]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 32
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(eq), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_set_31
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_set_31
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
  ; CHECK-NEXT:   [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C]](s32)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[XOR:%[0-9]+]]:_(s32) = G_XOR [[LSHR]], [[C1]]
  ; CHECK-NEXT:   G_BRCOND [[XOR]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 -2147483648
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(ne), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_clear_31
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_clear_31
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
  ; CHECK-NEXT:   [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C]](s32)
  ; CHECK-NEXT:   G_BRCOND [[LSHR]](s32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:_(s32) = COPY $a2
    %1:_(s32) = G_CONSTANT i32 -2147483648
    %3:_(s32) = G_CONSTANT i32 0
    %2:_(s32) = G_AND %0, %1
    %6:_(s32) = G_ICMP intpred(eq), %2(s32), %3
    %7:_(s32) = G_CONSTANT i32 1
    %5:_(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
