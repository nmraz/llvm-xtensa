; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -O0 -mtriple=xtensa -stop-after=irtranslator -verify-machineinstrs %s -o - | FileCheck %s

define void @reg_args_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) {
  ; CHECK-LABEL: name: reg_args_i32
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @reg_arg_i1(i1 %arg1) {
  ; CHECK-LABEL: name: reg_arg_i1
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @reg_arg_i8(i8 %arg1) {
  ; CHECK-LABEL: name: reg_arg_i8
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @reg_arg_i16(i16 %arg1) {
  ; CHECK-LABEL: name: reg_arg_i16
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @stack_arg_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) {
  ; CHECK-LABEL: name: stack_arg_i32
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0, align 16)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @stack_arg_i1(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7) {
  ; CHECK-LABEL: name: stack_arg_i1
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0, align 16)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @stack_arg_i8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i8 %arg7) {
  ; CHECK-LABEL: name: stack_arg_i8
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0, align 16)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

define void @stack_arg_i16(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7) {
  ; CHECK-LABEL: name: stack_arg_i16
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   liveins: $a2, $a3, $a4, $a5, $a6, $a7
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s32) = COPY $a3
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a4
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:_(s32) = COPY $a5
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:_(s32) = COPY $a6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:_(s32) = COPY $a7
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0, align 16)
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD]](s32)
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  ret void
}

