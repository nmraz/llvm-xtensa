; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -O0 -mtriple=xtensa -stop-after=irtranslator -verify-machineinstrs %s -o - | FileCheck %s

%byte2 = type { i8, i8 }

define i8 @func(ptr byval(%byte2) %p1, ptr byval(%byte2) %p2) {
  ; CHECK-LABEL: name: func
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY [[FRAME_INDEX]](p0)
  ; CHECK-NEXT:   [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY [[FRAME_INDEX1]](p0)
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s8) = G_LOAD [[COPY]](p0) :: (dereferenceable load (s8) from %ir.p1)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:_(s8) = G_LOAD [[PTR_ADD]](p0) :: (dereferenceable load (s8) from %ir.pb1)
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:_(s8) = G_LOAD [[COPY1]](p0) :: (dereferenceable load (s8) from %ir.p2)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C1]](s32)
  ; CHECK-NEXT:   [[LOAD3:%[0-9]+]]:_(s8) = G_LOAD [[PTR_ADD1]](p0) :: (dereferenceable load (s8) from %ir.pb2)
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:_(s8) = G_ADD [[LOAD]], [[LOAD1]]
  ; CHECK-NEXT:   [[ADD1:%[0-9]+]]:_(s8) = G_ADD [[LOAD2]], [[LOAD3]]
  ; CHECK-NEXT:   [[ADD2:%[0-9]+]]:_(s8) = G_ADD [[ADD]], [[ADD1]]
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD2]](s8)
  ; CHECK-NEXT:   $a2 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   RETN implicit $a0, implicit $a2
  %a1 = load i8, ptr %p1
  %pb1 = getelementptr %byte2, ptr %p1, i32 0, i32 1
  %b1 = load i8, ptr %pb1
  %a2 = load i8, ptr %p2
  %pb2 = getelementptr %byte2, ptr %p2, i32 0, i32 1
  %b2 = load i8, ptr %pb2
  %add1 = add i8 %a1, %b1
  %add2 = add i8 %a2, %b2
  %add = add i8 %add1, %add2
  ret i8 %add
}

@s1 = private constant %byte2 { i8 1, i8 2 }
@s2 = private constant %byte2 { i8 3, i8 4 }

define void @caller() {
  ; CHECK-LABEL: name: caller
  ; CHECK: bb.1 (%ir-block.0):
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @s1
  ; CHECK-NEXT:   [[GV1:%[0-9]+]]:_(p0) = G_GLOBAL_VALUE @s2
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 8, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $a1
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   G_MEMCPY [[PTR_ADD]](p0), [[GV]](p0), [[C1]](s32), 0 :: (dereferenceable store (s16) into stack, align 16), (dereferenceable load (s16) from @s1, align 8)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(p0) = COPY $a1
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY1]], [[C2]](s32)
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   G_MEMCPY [[PTR_ADD1]](p0), [[GV1]](p0), [[C3]](s32), 0 :: (dereferenceable store (s16) into stack + 4, align 4), (dereferenceable load (s16) from @s2, align 8)
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY2]](s32)
  ; CHECK-NEXT:   ADJCALLSTACKUP 8, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   RETN implicit $a0
  call i8 @func(ptr byval(%byte2) @s1, ptr byval(%byte2) @s2)
  ret void
}
