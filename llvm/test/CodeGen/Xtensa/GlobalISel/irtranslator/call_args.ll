; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -O0 -mtriple=xtensa -stop-after=irtranslator -verify-machineinstrs %s -o - | FileCheck %s

declare void @reg_args_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6)
declare void @reg_arg_i1(i1 %arg1)
declare void @reg_arg_i8(i8 %arg1)
declare void @reg_arg_i16(i16 %arg1)
declare void @reg_arg_i64(i64 %arg1)
declare void @reg_arg_i64_packed(i32 %arg1, i32 %arg2, i64 %arg3)
declare void @reg_arg_i64_aligned(i32 %arg1, i64 %arg2)
declare void @mixed_reg_args(i32 %arg1, i1 %arg2, i64 %arg3, i8 %arg4, i16 %arg5)
declare void @stack_arg_i32(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
declare void @stack_arg_i1(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i1 %arg7)
declare void @stack_arg_i8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i8 %arg7)
declare void @stack_arg_i16(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7)
declare void @stack_arg_i64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i64 %arg7)
declare void @stack_arg_i64_reg_unaligned(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i64 %arg6)
declare void @stack_arg_i64_aligned(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i64 %arg8)
declare void @mixed_reg_stack_args(i32 %arg1, i1 %arg2, i8 %arg3, i64 %arg4, i16 %arg5)
declare void @mixed_stack_args(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i16 %arg7, i8 %arg8, i64 %arg9)

define void @call_simple_reg_args() {
  ; CHECK-LABEL: name: call_simple_reg_args
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
  ; CHECK-NEXT:   [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
  ; CHECK-NEXT:   [[C6:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
  ; CHECK-NEXT:   [[C7:%[0-9]+]]:_(s8) = G_CONSTANT i8 1
  ; CHECK-NEXT:   [[C8:%[0-9]+]]:_(s16) = G_CONSTANT i16 1
  ; CHECK-NEXT:   $a2 = COPY [[C]](s32)
  ; CHECK-NEXT:   $a3 = COPY [[C1]](s32)
  ; CHECK-NEXT:   $a4 = COPY [[C2]](s32)
  ; CHECK-NEXT:   $a5 = COPY [[C3]](s32)
  ; CHECK-NEXT:   $a6 = COPY [[C4]](s32)
  ; CHECK-NEXT:   $a7 = COPY [[C5]](s32)
  ; CHECK-NEXT:   CALL0 @reg_args_i32, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C6]](s1)
  ; CHECK-NEXT:   $a2 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i1, implicit-def $a0, implicit $a2
  ; CHECK-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[C7]](s8)
  ; CHECK-NEXT:   $a2 = COPY [[ANYEXT1]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i8, implicit-def $a0, implicit $a2
  ; CHECK-NEXT:   [[ANYEXT2:%[0-9]+]]:_(s32) = G_ANYEXT [[C8]](s16)
  ; CHECK-NEXT:   $a2 = COPY [[ANYEXT2]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i16, implicit-def $a0, implicit $a2
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  call void @reg_args_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6)
  call void @reg_arg_i1(i1 1)
  call void @reg_arg_i8(i8 1)
  call void @reg_arg_i16(i16 1)
  ret void
}

define void @call_reg_i64() {
  ; CHECK-LABEL: name: call_reg_i64
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 3
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 2
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
  ; CHECK-NEXT:   $a2 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $a3 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i64, implicit-def $a0, implicit $a2, implicit $a3
  ; CHECK-NEXT:   [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C3]](s64)
  ; CHECK-NEXT:   $a2 = COPY [[C1]](s32)
  ; CHECK-NEXT:   $a3 = COPY [[C2]](s32)
  ; CHECK-NEXT:   $a4 = COPY [[UV2]](s32)
  ; CHECK-NEXT:   $a5 = COPY [[UV3]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i64_packed, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5
  ; CHECK-NEXT:   [[UV4:%[0-9]+]]:_(s32), [[UV5:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C4]](s64)
  ; CHECK-NEXT:   $a2 = COPY [[C1]](s32)
  ; CHECK-NEXT:   $a4 = COPY [[UV4]](s32)
  ; CHECK-NEXT:   $a5 = COPY [[UV5]](s32)
  ; CHECK-NEXT:   CALL0 @reg_arg_i64_aligned, implicit-def $a0, implicit $a2, implicit $a4, implicit $a5
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  call void @reg_arg_i64(i64 1)
  call void @reg_arg_i64_packed(i32 1, i32 2, i64 3)
  call void @reg_arg_i64_aligned(i32 1, i64 2)
  ret void
}

define void @call_mixed_reg_args() {
  ; CHECK-LABEL: name: call_mixed_reg_args
  ; CHECK: bb.1.entry:
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s1) = G_CONSTANT i1 true
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 3
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:_(s8) = G_CONSTANT i8 4
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:_(s16) = G_CONSTANT i16 5
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[C1]](s1)
  ; CHECK-NEXT:   [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C2]](s64)
  ; CHECK-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[C3]](s8)
  ; CHECK-NEXT:   [[ANYEXT2:%[0-9]+]]:_(s32) = G_ANYEXT [[C4]](s16)
  ; CHECK-NEXT:   $a2 = COPY [[C]](s32)
  ; CHECK-NEXT:   $a3 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   $a4 = COPY [[UV]](s32)
  ; CHECK-NEXT:   $a5 = COPY [[UV1]](s32)
  ; CHECK-NEXT:   $a6 = COPY [[ANYEXT1]](s32)
  ; CHECK-NEXT:   $a7 = COPY [[ANYEXT2]](s32)
  ; CHECK-NEXT:   CALL0 @mixed_reg_args, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
  ; CHECK-NEXT:   RETN implicit $a0
entry:
  call void @mixed_reg_args(i32 1, i1 1, i64 3, i8 4, i16 5)
  ret void
}

define void @call_stack() {
entry:
  call void @stack_arg_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7)
  call void @stack_arg_i1(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i1 7)
  call void @stack_arg_i8(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i8 7)
  call void @stack_arg_i16(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i16 7)
  ret void
}
