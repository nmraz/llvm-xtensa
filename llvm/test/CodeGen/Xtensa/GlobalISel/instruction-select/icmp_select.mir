# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
# RUN: llc -O0 -mtriple=xtensa -mcpu=lx7 -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=LX7
--- |
  ; ModuleID = 'icmp_select.ll'
  source_filename = "icmp_select.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i32 @select_icmp_eq_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp = icmp eq i32 %a, %b
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_ne_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp.not = icmp eq i32 %a, %b
    %cond = select i1 %cmp.not, i32 %d, i32 %c
    ret i32 %cond
  }

  define i32 @select_icmp_lt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp = icmp slt i32 %a, %b
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_lte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp.not = icmp sgt i32 %a, %b
    %cond = select i1 %cmp.not, i32 %d, i32 %c
    ret i32 %cond
  }

  define i32 @select_icmp_gt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp = icmp sgt i32 %a, %b
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_gte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp.not = icmp slt i32 %a, %b
    %cond = select i1 %cmp.not, i32 %d, i32 %c
    ret i32 %cond
  }

  define i32 @select_icmp_ltz_i32(i32 %a, i32 %c, i32 %d) {
  entry:
    %cmp = icmp slt i32 %a, 0
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_ltez_i32(i32 %a, i32 %c, i32 %d) {
  entry:
    %cmp = icmp slt i32 %a, 1
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_gtz_i32(i32 %a, i32 %c, i32 %d) {
  entry:
    %cmp = icmp sgt i32 %a, 0
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_gtez_i32(i32 %a, i32 %c, i32 %d) {
  entry:
    %cmp1 = icmp slt i32 %a, 0
    %cond = select i1 %cmp1, i32 %d, i32 %c
    ret i32 %cond
  }

  define i32 @select_icmp_ult_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp = icmp ult i32 %a, %b
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_ulte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp.not = icmp ugt i32 %a, %b
    %cond = select i1 %cmp.not, i32 %d, i32 %c
    ret i32 %cond
  }

  define i32 @select_icmp_ugt_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp = icmp ugt i32 %a, %b
    %cond = select i1 %cmp, i32 %c, i32 %d
    ret i32 %cond
  }

  define i32 @select_icmp_ugte_i32(i32 %a, i32 %b, i32 %c, i32 %d) {
  entry:
    %cmp.not = icmp ult i32 %a, %b
    %cond = select i1 %cmp.not, i32 %d, i32 %c
    ret i32 %cond
  }

...
---
name:            select_icmp_eq_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_eq_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY3]], [[COPY2]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVEQZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_eq_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY3]], [[COPY2]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(eq), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %2, %3
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ne_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_ne_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY2]], [[COPY3]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVEQZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ne_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY2]], [[COPY3]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(eq), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %3, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_lt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_lt_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY3]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_lt_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY3]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(slt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %2, %3
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_lte_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_lte_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY1]], [[COPY]]
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY3]], [[COPY2]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_lte_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY1]], [[COPY]]
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY3]], [[COPY2]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(sgt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %3, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_gt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_gt_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY1]], [[COPY]]
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY3]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_gt_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY1]], [[COPY]]
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY3]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(sgt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %2, %3
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_gte_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_gte_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY3]], [[COPY2]], [[SUB]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_gte_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY3]], [[COPY2]], [[SUB]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(slt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %3, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ltz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: select_icmp_ltz_i32
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[COPY]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ltz_i32
    ; LX7: liveins: $a2, $a3, $a4
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[COPY]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = G_CONSTANT i32 0
    %7:gprb(s32) = G_ICMP intpred(slt), %0(s32), %3
    %5:gprb(s32) = G_SELECT %7(s32), %1, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ltez_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: select_icmp_ltez_i32
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], -1
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[ADDI]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ltez_i32
    ; LX7: liveins: $a2, $a3, $a4
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], -1
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[ADDI]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_ICMP intpred(slt), %0(s32), %3
    %5:gprb(s32) = G_SELECT %7(s32), %1, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_gtz_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: select_icmp_gtz_i32
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[NEG:%[0-9]+]]:gpr = NEG [[COPY]]
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[NEG]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_gtz_i32
    ; LX7: liveins: $a2, $a3, $a4
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[NEG:%[0-9]+]]:gpr = NEG [[COPY]]
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY1]], [[COPY2]], [[NEG]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = G_CONSTANT i32 0
    %7:gprb(s32) = G_ICMP intpred(sgt), %0(s32), %3
    %5:gprb(s32) = G_SELECT %7(s32), %1, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_gtez_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: select_icmp_gtez_i32
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY1]], [[COPY]]
    ; CHECK-NEXT: $a2 = COPY [[MOVGEZ]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_gtez_i32
    ; LX7: liveins: $a2, $a3, $a4
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[MOVGEZ:%[0-9]+]]:gpr = MOVGEZ [[COPY2]], [[COPY1]], [[COPY]]
    ; LX7-NEXT: $a2 = COPY [[MOVGEZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = G_CONSTANT i32 0
    %7:gprb(s32) = G_ICMP intpred(slt), %0(s32), %3
    %5:gprb(s32) = G_SELECT %7(s32), %2, %1
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ult_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_ult_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SELECT_LTU:%[0-9]+]]:gpr = SELECT_LTU [[COPY]], [[COPY1]], [[COPY2]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT_LTU]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ult_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SALTU:%[0-9]+]]:gpr = SALTU [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY2]], [[COPY3]], [[SALTU]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(ult), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %2, %3
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ulte_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_ulte_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SELECT_LTU:%[0-9]+]]:gpr = SELECT_LTU [[COPY1]], [[COPY]], [[COPY3]], [[COPY2]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT_LTU]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ulte_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SALTU:%[0-9]+]]:gpr = SALTU [[COPY1]], [[COPY]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY3]], [[COPY2]], [[SALTU]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(ugt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %3, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ugt_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_ugt_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SELECT_LTU:%[0-9]+]]:gpr = SELECT_LTU [[COPY1]], [[COPY]], [[COPY2]], [[COPY3]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT_LTU]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ugt_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SALTU:%[0-9]+]]:gpr = SALTU [[COPY1]], [[COPY]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY2]], [[COPY3]], [[SALTU]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(ugt), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %2, %3
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            select_icmp_ugte_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: select_icmp_ugte_i32
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[SELECT_LTU:%[0-9]+]]:gpr = SELECT_LTU [[COPY]], [[COPY1]], [[COPY3]], [[COPY2]]
    ; CHECK-NEXT: $a2 = COPY [[SELECT_LTU]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    ; LX7-LABEL: name: select_icmp_ugte_i32
    ; LX7: liveins: $a2, $a3, $a4, $a5
    ; LX7-NEXT: {{  $}}
    ; LX7-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; LX7-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; LX7-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; LX7-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; LX7-NEXT: [[SALTU:%[0-9]+]]:gpr = SALTU [[COPY]], [[COPY1]]
    ; LX7-NEXT: [[MOVEQZ:%[0-9]+]]:gpr = MOVEQZ [[COPY3]], [[COPY2]], [[SALTU]]
    ; LX7-NEXT: $a2 = COPY [[MOVEQZ]]
    ; LX7-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %7:gprb(s32) = G_ICMP intpred(ult), %0(s32), %1
    %5:gprb(s32) = G_SELECT %7(s32), %3, %2
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
