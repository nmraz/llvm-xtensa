# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'global_value.ll'
  source_filename = "global_value.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  @global = global i32 0, align 4

  define void @set(i32 %val) {
    store i32 %val, ptr @global, align 4
    ret void
  }

  define i32 @get() {
    %1 = load i32, ptr @global, align 4
    ret i32 %1
  }

...
---
name:            set
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: set
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[L32R:%[0-9]+]]:gpr = L32R %const.0 :: (load (s32) from constant-pool)
    ; CHECK-NEXT: S32I [[COPY]], [[L32R]], 0 :: (store (s32) into @global)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_GLOBAL_VALUE @global
    G_STORE %0(s32), %1(p0) :: (store (s32) into @global)
    RETN implicit $a0

...
---
name:            get
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: get
    ; CHECK: [[L32R:%[0-9]+]]:gpr = L32R %const.0 :: (load (s32) from constant-pool)
    ; CHECK-NEXT: [[L32I:%[0-9]+]]:gpr = L32I [[L32R]], 0 :: (dereferenceable load (s32) from @global)
    ; CHECK-NEXT: $a2 = COPY [[L32I]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %1:gprb(p0) = G_GLOBAL_VALUE @global
    %0:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from @global)
    $a2 = COPY %0(s32)
    RETN implicit $a0, implicit $a2

...
