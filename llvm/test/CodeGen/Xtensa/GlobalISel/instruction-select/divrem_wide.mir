# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'llvm/test/CodeGen/Xtensa/GlobalISel/regbankselect/divrem.mir'
  source_filename = "divrem.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i64 @sdiv_i64(i64 %a, i64 %b) {
  entry:
    %sdiv = sdiv i64 %a, %b
    ret i64 %sdiv
  }

  define i64 @udiv_i64(i64 %a, i64 %b) {
  entry:
    %udiv = udiv i64 %a, %b
    ret i64 %udiv
  }

  define i64 @srem_i64(i64 %a, i64 %b) {
  entry:
    %srem = srem i64 %a, %b
    ret i64 %srem
  }

  define i64 @urem_i64(i64 %a, i64 %b) {
  entry:
    %urem = urem i64 %a, %b
    ret i64 %urem
  }

...
---
name:            sdiv_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: sdiv_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]]
    ; CHECK-NEXT: $a3 = COPY [[COPY1]]
    ; CHECK-NEXT: $a4 = COPY [[COPY2]]
    ; CHECK-NEXT: $a5 = COPY [[COPY3]]
    ; CHECK-NEXT: CALL0 &__divdi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY4]]
    ; CHECK-NEXT: $a3 = COPY [[COPY5]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:gprb(s32) = COPY $a2
    %3:gprb(s32) = COPY $a3
    %4:gprb(s32) = COPY $a4
    %5:gprb(s32) = COPY $a5
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %2(s32)
    $a3 = COPY %3(s32)
    $a4 = COPY %4(s32)
    $a5 = COPY %5(s32)
    CALL0 &__divdi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    %13:gprb(s32) = COPY $a2
    %14:gprb(s32) = COPY $a3
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %13(s32)
    $a3 = COPY %14(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            udiv_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: udiv_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]]
    ; CHECK-NEXT: $a3 = COPY [[COPY1]]
    ; CHECK-NEXT: $a4 = COPY [[COPY2]]
    ; CHECK-NEXT: $a5 = COPY [[COPY3]]
    ; CHECK-NEXT: CALL0 &__udivdi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY4]]
    ; CHECK-NEXT: $a3 = COPY [[COPY5]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:gprb(s32) = COPY $a2
    %3:gprb(s32) = COPY $a3
    %4:gprb(s32) = COPY $a4
    %5:gprb(s32) = COPY $a5
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %2(s32)
    $a3 = COPY %3(s32)
    $a4 = COPY %4(s32)
    $a5 = COPY %5(s32)
    CALL0 &__udivdi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    %13:gprb(s32) = COPY $a2
    %14:gprb(s32) = COPY $a3
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %13(s32)
    $a3 = COPY %14(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            srem_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: srem_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]]
    ; CHECK-NEXT: $a3 = COPY [[COPY1]]
    ; CHECK-NEXT: $a4 = COPY [[COPY2]]
    ; CHECK-NEXT: $a5 = COPY [[COPY3]]
    ; CHECK-NEXT: CALL0 &__moddi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY4]]
    ; CHECK-NEXT: $a3 = COPY [[COPY5]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:gprb(s32) = COPY $a2
    %3:gprb(s32) = COPY $a3
    %4:gprb(s32) = COPY $a4
    %5:gprb(s32) = COPY $a5
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %2(s32)
    $a3 = COPY %3(s32)
    $a4 = COPY %4(s32)
    $a5 = COPY %5(s32)
    CALL0 &__moddi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    %13:gprb(s32) = COPY $a2
    %14:gprb(s32) = COPY $a3
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %13(s32)
    $a3 = COPY %14(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
---
name:            urem_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: _, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    liveins: $a2, $a3, $a4, $a5

    ; CHECK-LABEL: name: urem_i64
    ; CHECK: liveins: $a2, $a3, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY]]
    ; CHECK-NEXT: $a3 = COPY [[COPY1]]
    ; CHECK-NEXT: $a4 = COPY [[COPY2]]
    ; CHECK-NEXT: $a5 = COPY [[COPY3]]
    ; CHECK-NEXT: CALL0 &__umoddi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[COPY4]]
    ; CHECK-NEXT: $a3 = COPY [[COPY5]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2, implicit $a3
    %2:gprb(s32) = COPY $a2
    %3:gprb(s32) = COPY $a3
    %4:gprb(s32) = COPY $a4
    %5:gprb(s32) = COPY $a5
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %2(s32)
    $a3 = COPY %3(s32)
    $a4 = COPY %4(s32)
    $a5 = COPY %5(s32)
    CALL0 &__umoddi3, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit-def $a2, implicit-def $a3
    %13:gprb(s32) = COPY $a2
    %14:gprb(s32) = COPY $a3
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %13(s32)
    $a3 = COPY %14(s32)
    RETN implicit $a0, implicit $a2, implicit $a3

...
