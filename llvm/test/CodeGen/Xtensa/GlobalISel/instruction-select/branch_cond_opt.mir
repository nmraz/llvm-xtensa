# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'branch_cond_opt.ll'
  source_filename = "branch_cond_opt.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define void @branch_eq(i32 %a, i32 %b) {
  entry:
    %cmp = icmp eq i32 %a, %b
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  declare void @func(...)

  define void @branch_ne(i32 %a, i32 %b) {
  entry:
    %cmp.not = icmp eq i32 %a, %b
    br i1 %cmp.not, label %if.end, label %if.then

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_eqz(i32 %a) {
  entry:
    %cmp = icmp eq i32 %a, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_nez(i32 %a) {
  entry:
    %cmp.not = icmp eq i32 %a, 0
    br i1 %cmp.not, label %if.end, label %if.then

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_lt(i32 %a, i32 %b) {
  entry:
    %cmp = icmp slt i32 %a, %b
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_lte(i32 %a, i32 %b) {
  entry:
    %cmp.not = icmp sgt i32 %a, %b
    br i1 %cmp.not, label %if.end, label %if.then

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_gt(i32 %a, i32 %b) {
  entry:
    %cmp = icmp sgt i32 %a, %b
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_gte(i32 %a, i32 %b) {
  entry:
    %cmp.not = icmp slt i32 %a, %b
    br i1 %cmp.not, label %if.end, label %if.then

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_ltz(i32 %a) {
  entry:
    %cmp = icmp slt i32 %a, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_ltez(i32 %a) {
  entry:
    %cmp = icmp slt i32 %a, 1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_gtz(i32 %a) {
  entry:
    %cmp = icmp sgt i32 %a, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_gtez(i32 %a) {
  entry:
    %cmp = icmp sgt i32 %a, -1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    tail call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

...
---
name:            branch_eq
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_eq
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BNE [[COPY]], [[COPY1]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(ne), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ne
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ne
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BEQ [[COPY]], [[COPY1]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(eq), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_eqz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_eqz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   BNEZ [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x30000000), %bb.3(0x50000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 0
    %4:gprb(s32) = G_ICMP intpred(ne), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_nez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_nez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x30000000), %bb.1(0x50000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   BEQZ [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.3(0x30000000), %bb.2(0x50000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 0
    %4:gprb(s32) = G_ICMP intpred(eq), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_lt
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_lt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BGE [[COPY]], [[COPY1]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(sge), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_lte
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_lte
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BLT [[COPY1]], [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(sgt), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_gt
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_gt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BGE [[COPY1]], [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(sle), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_gte
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_gte
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.1(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   BLT [[COPY]], [[COPY1]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %4:gprb(s32) = G_ICMP intpred(slt), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ltz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ltz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI 0
  ; CHECK-NEXT:   BGE [[COPY]], [[MOVI]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x30000000), %bb.3(0x50000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 0
    %4:gprb(s32) = G_ICMP intpred(sge), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ltez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ltez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI 1
  ; CHECK-NEXT:   BGE [[COPY]], [[MOVI]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x30000000), %bb.3(0x50000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 1
    %4:gprb(s32) = G_ICMP intpred(sge), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_gtz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_gtz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI 0
  ; CHECK-NEXT:   BGE [[MOVI]], [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x50000000), %bb.3(0x30000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 0
    %4:gprb(s32) = G_ICMP intpred(sle), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_gtez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: _, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_gtez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x50000000), %bb.2(0x30000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI -1
  ; CHECK-NEXT:   BGE [[MOVI]], [[COPY]], %bb.2
  ; CHECK-NEXT:   J %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x50000000), %bb.3(0x30000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 -1
    %4:gprb(s32) = G_ICMP intpred(sle), %0(s32), %1
    G_BRCOND %4(s32), %bb.3
    G_BR %bb.2

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1

  bb.3.if.end:
    RETN implicit $a0

...
