# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'store.ll'
  source_filename = "store.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define void @store_i8(ptr %p, i8 %val) {
  entry:
    store i8 %val, ptr %p, align 1
    ret void
  }

  define void @store_i16(ptr %p, i16 %val) {
  entry:
    store i16 %val, ptr %p, align 2
    ret void
  }

  define void @store_i16_unaligned_1(ptr %p, i16 %val) {
  entry:
    store i16 %val, ptr %p, align 1
    ret void
  }

  define void @store_i32(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 4
    ret void
  }

  define void @store_i32_unaligned_1(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 1
    ret void
  }

  define void @store_i32_unaligned_2(ptr %p, i32 %val) {
  entry:
    store i32 %val, ptr %p, align 2
    ret void
  }

  define void @store_i64(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 8
    ret void
  }

  define void @store_i64_unaligned_1(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 1
    ret void
  }

  define void @store_i64_unaligned_2(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 2
    ret void
  }

  define void @store_i64_unaligned_4(ptr %p, i64 %val) {
  entry:
    store i64 %val, ptr %p, align 4
    ret void
  }

...
---
name:            store_i8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i8
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: S8I [[COPY1]], [[COPY]], 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a3
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i16
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: S16I [[COPY1]], [[COPY]], 0 :: (store (s16) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a3
    G_STORE %2(s32), %0(p0) :: (store (s16) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i16_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: _, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: _, preferred-register: '' }
  - { id: 11, class: gprb, preferred-register: '' }
  - { id: 12, class: gprb, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: gprb, preferred-register: '' }
  - { id: 16, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i16_unaligned_1
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY1]], 0, 16
    ; CHECK-NEXT: [[SRLI:%[0-9]+]]:gpr = SRLI [[EXTUI]], 8
    ; CHECK-NEXT: S8I [[COPY1]], [[COPY]], 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: S8I [[SRLI]], [[COPY]], 1 :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a3
    %11:gprb(s32) = G_CONSTANT i32 8
    %15:gprb(s32) = G_CONSTANT i32 65535
    %12:gprb(s32) = G_AND %2, %15
    %13:gprb(s32) = G_LSHR %12, %11(s32)
    %7:gprb(s32) = G_CONSTANT i32 1
    %8:gprb(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %13(s32), %8(p0) :: (store (s8) into %ir.p + 1)
    RETN implicit $a0

...
---
name:            store_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: S32I [[COPY1]], [[COPY]], 0 :: (store (s32) into %ir.p)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %1:gprb(s32) = COPY $a3
    G_STORE %1(s32), %0(p0) :: (store (s32) into %ir.p)
    RETN implicit $a0

...
---
name:            store_i32_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: _, preferred-register: '' }
  - { id: 8, class: _, preferred-register: '' }
  - { id: 9, class: _, preferred-register: '' }
  - { id: 10, class: gprb, preferred-register: '' }
  - { id: 11, class: gprb, preferred-register: '' }
  - { id: 12, class: _, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
  - { id: 15, class: gprb, preferred-register: '' }
  - { id: 16, class: gprb, preferred-register: '' }
  - { id: 17, class: _, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: _, preferred-register: '' }
  - { id: 21, class: gprb, preferred-register: '' }
  - { id: 22, class: gprb, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: gprb, preferred-register: '' }
  - { id: 26, class: gprb, preferred-register: '' }
  - { id: 27, class: gprb, preferred-register: '' }
  - { id: 28, class: _, preferred-register: '' }
  - { id: 29, class: gprb, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: gprb, preferred-register: '' }
  - { id: 32, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32_unaligned_1
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], 2
    ; CHECK-NEXT: [[EXTUI1:%[0-9]+]]:gpr = EXTUI [[COPY1]], 0, 16
    ; CHECK-NEXT: [[SRLI:%[0-9]+]]:gpr = SRLI [[EXTUI1]], 8
    ; CHECK-NEXT: S8I [[COPY1]], [[COPY]], 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: S8I [[SRLI]], [[COPY]], 1 :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: [[EXTUI2:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: [[SRLI1:%[0-9]+]]:gpr = SRLI [[EXTUI2]], 8
    ; CHECK-NEXT: S8I [[EXTUI]], [[COPY]], 2 :: (store (s8) into %ir.p + 2)
    ; CHECK-NEXT: S8I [[SRLI1]], [[ADDI]], 1 :: (store (s8) into %ir.p + 3)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY %1(s32)
    %3:gprb(s32) = G_CONSTANT i32 16
    %4:gprb(s32) = G_LSHR %2, %3(s32)
    %5:gprb(s32) = G_CONSTANT i32 2
    %6:gprb(p0) = G_PTR_ADD %0, %5(s32)
    %25:gprb(s32) = G_CONSTANT i32 8
    %29:gprb(s32) = G_CONSTANT i32 65535
    %26:gprb(s32) = G_AND %2, %29
    %27:gprb(s32) = G_LSHR %26, %25(s32)
    %21:gprb(s32) = G_CONSTANT i32 1
    %22:gprb(p0) = G_PTR_ADD %0, %21(s32)
    G_STORE %2(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %27(s32), %22(p0) :: (store (s8) into %ir.p + 1)
    %14:gprb(s32) = G_CONSTANT i32 8
    %31:gprb(s32) = G_CONSTANT i32 65535
    %15:gprb(s32) = G_AND %4, %31
    %16:gprb(s32) = G_LSHR %15, %14(s32)
    %10:gprb(s32) = G_CONSTANT i32 1
    %11:gprb(p0) = G_PTR_ADD %6, %10(s32)
    G_STORE %4(s32), %6(p0) :: (store (s8) into %ir.p + 2)
    G_STORE %16(s32), %11(p0) :: (store (s8) into %ir.p + 3)
    RETN implicit $a0

...
---
name:            store_i32_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a3

    ; CHECK-LABEL: name: store_i32_unaligned_2
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: S16I [[COPY1]], [[COPY]], 0 :: (store (s16) into %ir.p)
    ; CHECK-NEXT: S16I [[EXTUI]], [[COPY]], 2 :: (store (s16) into %ir.p + 2)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = COPY %1(s32)
    %3:gprb(s32) = G_CONSTANT i32 16
    %4:gprb(s32) = G_LSHR %2, %3(s32)
    %5:gprb(s32) = G_CONSTANT i32 2
    %6:gprb(p0) = G_PTR_ADD %0, %5(s32)
    G_STORE %2(s32), %0(p0) :: (store (s16) into %ir.p)
    G_STORE %4(s32), %6(p0) :: (store (s16) into %ir.p + 2)
    RETN implicit $a0

...
---
name:            store_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: S32I [[COPY1]], [[COPY]], 0 :: (store (s32) into %ir.p, align 8)
    ; CHECK-NEXT: S32I [[COPY2]], [[COPY]], 4 :: (store (s32) into %ir.p + 4, basealign 8)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    G_STORE %2(s32), %0(p0) :: (store (s32) into %ir.p, align 8)
    %7:gprb(s32) = G_CONSTANT i32 4
    %6:gprb(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %3(s32), %6(p0) :: (store (s32) into %ir.p + 4, basealign 8)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
  - { id: 10, class: gprb, preferred-register: '' }
  - { id: 11, class: gprb, preferred-register: '' }
  - { id: 12, class: gprb, preferred-register: '' }
  - { id: 13, class: _, preferred-register: '' }
  - { id: 14, class: _, preferred-register: '' }
  - { id: 15, class: _, preferred-register: '' }
  - { id: 16, class: gprb, preferred-register: '' }
  - { id: 17, class: gprb, preferred-register: '' }
  - { id: 18, class: _, preferred-register: '' }
  - { id: 19, class: _, preferred-register: '' }
  - { id: 20, class: gprb, preferred-register: '' }
  - { id: 21, class: gprb, preferred-register: '' }
  - { id: 22, class: gprb, preferred-register: '' }
  - { id: 23, class: _, preferred-register: '' }
  - { id: 24, class: _, preferred-register: '' }
  - { id: 25, class: _, preferred-register: '' }
  - { id: 26, class: _, preferred-register: '' }
  - { id: 27, class: gprb, preferred-register: '' }
  - { id: 28, class: gprb, preferred-register: '' }
  - { id: 29, class: _, preferred-register: '' }
  - { id: 30, class: _, preferred-register: '' }
  - { id: 31, class: gprb, preferred-register: '' }
  - { id: 32, class: gprb, preferred-register: '' }
  - { id: 33, class: gprb, preferred-register: '' }
  - { id: 34, class: _, preferred-register: '' }
  - { id: 35, class: gprb, preferred-register: '' }
  - { id: 36, class: gprb, preferred-register: '' }
  - { id: 37, class: gprb, preferred-register: '' }
  - { id: 38, class: gprb, preferred-register: '' }
  - { id: 39, class: gprb, preferred-register: '' }
  - { id: 40, class: _, preferred-register: '' }
  - { id: 41, class: _, preferred-register: '' }
  - { id: 42, class: _, preferred-register: '' }
  - { id: 43, class: gprb, preferred-register: '' }
  - { id: 44, class: gprb, preferred-register: '' }
  - { id: 45, class: _, preferred-register: '' }
  - { id: 46, class: _, preferred-register: '' }
  - { id: 47, class: gprb, preferred-register: '' }
  - { id: 48, class: gprb, preferred-register: '' }
  - { id: 49, class: gprb, preferred-register: '' }
  - { id: 50, class: _, preferred-register: '' }
  - { id: 51, class: _, preferred-register: '' }
  - { id: 52, class: _, preferred-register: '' }
  - { id: 53, class: _, preferred-register: '' }
  - { id: 54, class: gprb, preferred-register: '' }
  - { id: 55, class: gprb, preferred-register: '' }
  - { id: 56, class: _, preferred-register: '' }
  - { id: 57, class: _, preferred-register: '' }
  - { id: 58, class: gprb, preferred-register: '' }
  - { id: 59, class: gprb, preferred-register: '' }
  - { id: 60, class: gprb, preferred-register: '' }
  - { id: 61, class: _, preferred-register: '' }
  - { id: 62, class: gprb, preferred-register: '' }
  - { id: 63, class: _, preferred-register: '' }
  - { id: 64, class: gprb, preferred-register: '' }
  - { id: 65, class: _, preferred-register: '' }
  - { id: 66, class: gprb, preferred-register: '' }
  - { id: 67, class: _, preferred-register: '' }
  - { id: 68, class: gprb, preferred-register: '' }
  - { id: 69, class: _, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_1
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], 2
    ; CHECK-NEXT: [[EXTUI1:%[0-9]+]]:gpr = EXTUI [[COPY1]], 0, 16
    ; CHECK-NEXT: [[SRLI:%[0-9]+]]:gpr = SRLI [[EXTUI1]], 8
    ; CHECK-NEXT: S8I [[COPY1]], [[COPY]], 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: S8I [[SRLI]], [[COPY]], 1 :: (store (s8) into %ir.p + 1)
    ; CHECK-NEXT: [[EXTUI2:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: [[SRLI1:%[0-9]+]]:gpr = SRLI [[EXTUI2]], 8
    ; CHECK-NEXT: S8I [[EXTUI]], [[COPY]], 2 :: (store (s8) into %ir.p + 2)
    ; CHECK-NEXT: S8I [[SRLI1]], [[ADDI]], 1 :: (store (s8) into %ir.p + 3)
    ; CHECK-NEXT: [[ADDI1:%[0-9]+]]:gpr = ADDI [[COPY]], 4
    ; CHECK-NEXT: [[EXTUI3:%[0-9]+]]:gpr = EXTUI [[COPY2]], 16, 16
    ; CHECK-NEXT: [[ADDI2:%[0-9]+]]:gpr = ADDI [[ADDI1]], 2
    ; CHECK-NEXT: [[EXTUI4:%[0-9]+]]:gpr = EXTUI [[COPY2]], 0, 16
    ; CHECK-NEXT: [[SRLI2:%[0-9]+]]:gpr = SRLI [[EXTUI4]], 8
    ; CHECK-NEXT: S8I [[COPY2]], [[COPY]], 4 :: (store (s8) into %ir.p + 4)
    ; CHECK-NEXT: S8I [[SRLI2]], [[ADDI1]], 1 :: (store (s8) into %ir.p + 5)
    ; CHECK-NEXT: [[EXTUI5:%[0-9]+]]:gpr = EXTUI [[COPY2]], 16, 16
    ; CHECK-NEXT: [[SRLI3:%[0-9]+]]:gpr = SRLI [[EXTUI5]], 8
    ; CHECK-NEXT: S8I [[EXTUI3]], [[ADDI1]], 2 :: (store (s8) into %ir.p + 6)
    ; CHECK-NEXT: S8I [[SRLI3]], [[ADDI2]], 1 :: (store (s8) into %ir.p + 7)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %35:gprb(s32) = COPY %2(s32)
    %36:gprb(s32) = G_CONSTANT i32 16
    %37:gprb(s32) = G_LSHR %35, %36(s32)
    %38:gprb(s32) = G_CONSTANT i32 2
    %39:gprb(p0) = G_PTR_ADD %0, %38(s32)
    %58:gprb(s32) = G_CONSTANT i32 8
    %62:gprb(s32) = G_CONSTANT i32 65535
    %59:gprb(s32) = G_AND %35, %62
    %60:gprb(s32) = G_LSHR %59, %58(s32)
    %54:gprb(s32) = G_CONSTANT i32 1
    %55:gprb(p0) = G_PTR_ADD %0, %54(s32)
    G_STORE %35(s32), %0(p0) :: (store (s8) into %ir.p)
    G_STORE %60(s32), %55(p0) :: (store (s8) into %ir.p + 1)
    %47:gprb(s32) = G_CONSTANT i32 8
    %64:gprb(s32) = G_CONSTANT i32 65535
    %48:gprb(s32) = G_AND %37, %64
    %49:gprb(s32) = G_LSHR %48, %47(s32)
    %43:gprb(s32) = G_CONSTANT i32 1
    %44:gprb(p0) = G_PTR_ADD %39, %43(s32)
    G_STORE %37(s32), %39(p0) :: (store (s8) into %ir.p + 2)
    G_STORE %49(s32), %44(p0) :: (store (s8) into %ir.p + 3)
    %7:gprb(s32) = G_CONSTANT i32 4
    %6:gprb(p0) = G_PTR_ADD %0, %7(s32)
    %8:gprb(s32) = COPY %3(s32)
    %9:gprb(s32) = G_CONSTANT i32 16
    %10:gprb(s32) = G_LSHR %8, %9(s32)
    %11:gprb(s32) = G_CONSTANT i32 2
    %12:gprb(p0) = G_PTR_ADD %6, %11(s32)
    %31:gprb(s32) = G_CONSTANT i32 8
    %66:gprb(s32) = G_CONSTANT i32 65535
    %32:gprb(s32) = G_AND %8, %66
    %33:gprb(s32) = G_LSHR %32, %31(s32)
    %27:gprb(s32) = G_CONSTANT i32 1
    %28:gprb(p0) = G_PTR_ADD %6, %27(s32)
    G_STORE %8(s32), %6(p0) :: (store (s8) into %ir.p + 4)
    G_STORE %33(s32), %28(p0) :: (store (s8) into %ir.p + 5)
    %20:gprb(s32) = G_CONSTANT i32 8
    %68:gprb(s32) = G_CONSTANT i32 65535
    %21:gprb(s32) = G_AND %10, %68
    %22:gprb(s32) = G_LSHR %21, %20(s32)
    %16:gprb(s32) = G_CONSTANT i32 1
    %17:gprb(p0) = G_PTR_ADD %12, %16(s32)
    G_STORE %10(s32), %12(p0) :: (store (s8) into %ir.p + 6)
    G_STORE %22(s32), %17(p0) :: (store (s8) into %ir.p + 7)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
  - { id: 10, class: gprb, preferred-register: '' }
  - { id: 11, class: gprb, preferred-register: '' }
  - { id: 12, class: gprb, preferred-register: '' }
  - { id: 13, class: gprb, preferred-register: '' }
  - { id: 14, class: gprb, preferred-register: '' }
  - { id: 15, class: gprb, preferred-register: '' }
  - { id: 16, class: gprb, preferred-register: '' }
  - { id: 17, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_2
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY1]], 16, 16
    ; CHECK-NEXT: S16I [[COPY1]], [[COPY]], 0 :: (store (s16) into %ir.p)
    ; CHECK-NEXT: S16I [[EXTUI]], [[COPY]], 2 :: (store (s16) into %ir.p + 2)
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], 4
    ; CHECK-NEXT: [[EXTUI1:%[0-9]+]]:gpr = EXTUI [[COPY2]], 16, 16
    ; CHECK-NEXT: S16I [[COPY2]], [[COPY]], 4 :: (store (s16) into %ir.p + 4)
    ; CHECK-NEXT: S16I [[EXTUI1]], [[ADDI]], 2 :: (store (s16) into %ir.p + 6)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    %13:gprb(s32) = COPY %2(s32)
    %14:gprb(s32) = G_CONSTANT i32 16
    %15:gprb(s32) = G_LSHR %13, %14(s32)
    %16:gprb(s32) = G_CONSTANT i32 2
    %17:gprb(p0) = G_PTR_ADD %0, %16(s32)
    G_STORE %13(s32), %0(p0) :: (store (s16) into %ir.p)
    G_STORE %15(s32), %17(p0) :: (store (s16) into %ir.p + 2)
    %7:gprb(s32) = G_CONSTANT i32 4
    %6:gprb(p0) = G_PTR_ADD %0, %7(s32)
    %8:gprb(s32) = COPY %3(s32)
    %9:gprb(s32) = G_CONSTANT i32 16
    %10:gprb(s32) = G_LSHR %8, %9(s32)
    %11:gprb(s32) = G_CONSTANT i32 2
    %12:gprb(p0) = G_PTR_ADD %6, %11(s32)
    G_STORE %8(s32), %6(p0) :: (store (s16) into %ir.p + 4)
    G_STORE %10(s32), %12(p0) :: (store (s16) into %ir.p + 6)
    RETN implicit $a0

...
---
name:            store_i64_unaligned_4
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: _, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: _, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2, $a4, $a5

    ; CHECK-LABEL: name: store_i64_unaligned_4
    ; CHECK: liveins: $a2, $a4, $a5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a4
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $a5
    ; CHECK-NEXT: S32I [[COPY1]], [[COPY]], 0 :: (store (s32) into %ir.p)
    ; CHECK-NEXT: S32I [[COPY2]], [[COPY]], 4 :: (store (s32) into %ir.p + 4)
    ; CHECK-NEXT: RETN implicit $a0
    %0:gprb(p0) = COPY $a2
    %2:gprb(s32) = COPY $a4
    %3:gprb(s32) = COPY $a5
    G_STORE %2(s32), %0(p0) :: (store (s32) into %ir.p)
    %7:gprb(s32) = G_CONSTANT i32 4
    %6:gprb(p0) = G_PTR_ADD %0, %7(s32)
    G_STORE %3(s32), %6(p0) :: (store (s32) into %ir.p + 4)
    RETN implicit $a0

...
