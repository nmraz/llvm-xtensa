# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'extui.ll'
  source_filename = "extui.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i32 @extui_1bit(i32 %val) {
  entry:
    %ext = and i32 %val, 1
    ret i32 %ext
  }

  define i32 @extui_2bit(i32 %val) {
  entry:
    %ext = and i32 %val, 3
    ret i32 %ext
  }

  define i32 @extui_3bit(i32 %val) {
  entry:
    %ext = and i32 %val, 7
    ret i32 %ext
  }

  define i32 @extui_4bit(i32 %val) {
  entry:
    %ext = and i32 %val, 15
    ret i32 %ext
  }

  define i32 @extui_5bit(i32 %val) {
  entry:
    %ext = and i32 %val, 31
    ret i32 %ext
  }

  define i32 @extui_8bit(i32 %val) {
  entry:
    %ext = and i32 %val, 255
    ret i32 %ext
  }

  define i32 @extui_16bit(i32 %val) {
  entry:
    %ext = and i32 %val, 65535
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr1(i32 %val) {
  entry:
    %shr = lshr i32 %val, 1
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr2(i32 %val) {
  entry:
    %shr = lshr i32 %val, 2
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr3(i32 %val) {
  entry:
    %shr = lshr i32 %val, 3
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr4(i32 %val) {
  entry:
    %shr = lshr i32 %val, 4
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr8(i32 %val) {
  entry:
    %shr = lshr i32 %val, 8
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_lshr16(i32 %val) {
  entry:
    %shr = lshr i32 %val, 16
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_1bit_lshr31(i32 %val) {
  entry:
    %shr = lshr i32 %val, 31
    %ext = and i32 %shr, 1
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr1(i32 %val) {
  entry:
    %shr = ashr i32 %val, 1
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr2(i32 %val) {
  entry:
    %shr = ashr i32 %val, 2
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr3(i32 %val) {
  entry:
    %shr = ashr i32 %val, 3
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr4(i32 %val) {
  entry:
    %shr = ashr i32 %val, 4
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr8(i32 %val) {
  entry:
    %shr = ashr i32 %val, 8
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_2bit_ashr16(i32 %val) {
  entry:
    %shr = ashr i32 %val, 16
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @extui_1bit_ashr31(i32 %val) {
  entry:
    %shr = ashr i32 %val, 31
    %ext = and i32 %shr, 1
    ret i32 %ext
  }

  define i32 @not_extui_17bit(i32 %val) {
  entry:
    %ext = and i32 %val, 131071
    ret i32 %ext
  }

  define i32 @not_extui_2bit_lshr31(i32 %val) {
  entry:
    %shr = lshr i32 %val, 31
    %ext = and i32 %shr, 3
    ret i32 %ext
  }

  define i32 @not_extui_16bit_lshr17(i32 %val) {
  entry:
    %shr = lshr i32 %val, 17
    %ext = and i32 %shr, 65535
    ret i32 %ext
  }

  define i32 @not_extui_non_mask(i32 %val) {
  entry:
    %ext = and i32 %val, 5
    ret i32 %ext
  }

...
---
name:            extui_1bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_1bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 1
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 1
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_3bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_3bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 3
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 7
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_4bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_4bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 4
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 15
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_5bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_5bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 5
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 31
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_8bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_8bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 8
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 255
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_16bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_16bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 0, 16
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 65535
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr1
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 1, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 1
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr2
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 2, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 2
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr3
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr3
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 3, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %3:gprb(s32) = G_AND %2, %1
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr4
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr4
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 4, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 4
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 8, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 8
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_lshr16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_lshr16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 16, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 16
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_1bit_lshr31
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_1bit_lshr31
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 31, 1
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 31
    %3:gprb(s32) = G_CONSTANT i32 1
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr1
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr1
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 1, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 1
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr2
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr2
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 2, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 2
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr3
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr3
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 3, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %3:gprb(s32) = G_AND %2, %1
    $a2 = COPY %3(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr4
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr4
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 4, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 4
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 8, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 8
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_2bit_ashr16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_2bit_ashr16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 16, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 16
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            extui_1bit_ashr31
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: extui_1bit_ashr31
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 31, 1
    ; CHECK-NEXT: $a2 = COPY [[EXTUI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 31
    %3:gprb(s32) = G_CONSTANT i32 1
    %2:gprb(s32) = G_ASHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            not_extui_17bit
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: not_extui_17bit
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[L32R:%[0-9]+]]:gpr = L32R %const.0
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gpr = AND [[COPY]], [[L32R]]
    ; CHECK-NEXT: $a2 = COPY [[AND]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 131071
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            not_extui_2bit_lshr31
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: not_extui_2bit_lshr31
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 31, 1
    ; CHECK-NEXT: [[EXTUI1:%[0-9]+]]:gpr = EXTUI [[EXTUI]], 0, 2
    ; CHECK-NEXT: $a2 = COPY [[EXTUI1]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 31
    %3:gprb(s32) = G_CONSTANT i32 3
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            not_extui_16bit_lshr17
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: not_extui_16bit_lshr17
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[EXTUI:%[0-9]+]]:gpr = EXTUI [[COPY]], 17, 15
    ; CHECK-NEXT: [[EXTUI1:%[0-9]+]]:gpr = EXTUI [[EXTUI]], 0, 16
    ; CHECK-NEXT: $a2 = COPY [[EXTUI1]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 17
    %3:gprb(s32) = G_CONSTANT i32 65535
    %2:gprb(s32) = G_LSHR %0, %1(s32)
    %4:gprb(s32) = G_AND %2, %3
    $a2 = COPY %4(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            not_extui_non_mask
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1.entry:
    liveins: $a2

    ; CHECK-LABEL: name: not_extui_non_mask
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[MOVIN:%[0-9]+]]:gpr = MOVIN 5
    ; CHECK-NEXT: [[AND:%[0-9]+]]:gpr = AND [[COPY]], [[MOVIN]]
    ; CHECK-NEXT: $a2 = COPY [[AND]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 5
    %2:gprb(s32) = G_AND %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
