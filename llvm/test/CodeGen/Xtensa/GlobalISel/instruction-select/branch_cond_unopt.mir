# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'branch_cond_unopt.ll'
  source_filename = "branch_cond_unopt.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define void @branch_eq(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp eq i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  declare void @func(...)

  define void @branch_ne(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp ne i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_eqz(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp eq i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_nez(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp ne i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_slt(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp slt i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sle(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp sle i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sgt(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp sgt i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sge(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp sge i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sltz(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp slt i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_slez(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp sle i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sgtz(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp sgt i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_sgez(i32 %a) {
  entry:
    %a.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %cmp = icmp sge i32 %0, 0
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_ult(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp ult i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_ule(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp ule i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_ugt(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp ugt i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

  define void @branch_uge(i32 %a, i32 %b) {
  entry:
    %a.addr = alloca i32, align 4
    %b.addr = alloca i32, align 4
    store i32 %a, ptr %a.addr, align 4
    store i32 %b, ptr %b.addr, align 4
    %0 = load i32, ptr %a.addr, align 4
    %1 = load i32, ptr %b.addr, align 4
    %cmp = icmp uge i32 %0, %1
    br i1 %cmp, label %if.then, label %if.end

  if.then:                                          ; preds = %entry
    call void @func()
    br label %if.end

  if.end:                                           ; preds = %if.then, %entry
    ret void
  }

...
---
name:            branch_eq
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_eq
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BEQ [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(eq), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ne
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ne
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BNE [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(ne), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_eqz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_eqz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   BEQZ [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(eq), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_nez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_nez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   BNEZ [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(ne), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_slt
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_slt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BLT [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(slt), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sle
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sle
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BGE [[L32I1]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(sle), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sgt
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sgt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BLT [[L32I1]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(sgt), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sge
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sge
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BGE [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(sge), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sltz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sltz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   BLTZ [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(slt), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_slez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_slez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI 0
  ; CHECK-NEXT:   BGE [[MOVI]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(sle), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sgtz
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sgtz
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[MOVI:%[0-9]+]]:gpr = MOVI 0
  ; CHECK-NEXT:   BLT [[MOVI]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(sgt), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_sgez
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: _, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: gprb, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_sgez
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   BGEZ [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2

    %0:gprb(s32) = COPY $a2
    %1:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %1(p0) :: (store (s32) into %ir.a.addr)
    %2:gprb(s32) = G_LOAD %1(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %3:gprb(s32) = G_CONSTANT i32 0
    %6:gprb(s32) = G_ICMP intpred(sge), %2(s32), %3
    %7:gprb(s32) = G_CONSTANT i32 1
    %5:gprb(s32) = G_AND %6, %7
    G_BRCOND %5(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ult
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ult
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BLTU [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(ult), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ule
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ule
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BGEU [[L32I1]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(ule), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_ugt
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_ugt
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BLTU [[L32I1]], [[L32I]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(ugt), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
---
name:            branch_uge
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
  - { id: 6, class: _, preferred-register: '' }
  - { id: 7, class: gprb, preferred-register: '' }
  - { id: 8, class: gprb, preferred-register: '' }
  - { id: 9, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: a.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: b.addr, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: branch_uge
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $a2, $a3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr = COPY $a2
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr = COPY $a3
  ; CHECK-NEXT:   S32I [[COPY]], %stack.0.a.addr, 0 :: (store (s32) into %ir.a.addr)
  ; CHECK-NEXT:   S32I [[COPY1]], %stack.1.b.addr, 0 :: (store (s32) into %ir.b.addr)
  ; CHECK-NEXT:   [[L32I:%[0-9]+]]:gpr = L32I %stack.0.a.addr, 0 :: (dereferenceable load (s32) from %ir.a.addr)
  ; CHECK-NEXT:   [[L32I1:%[0-9]+]]:gpr = L32I %stack.1.b.addr, 0 :: (dereferenceable load (s32) from %ir.b.addr)
  ; CHECK-NEXT:   BGEU [[L32I]], [[L32I1]], %bb.1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1.if.then:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   CALL0 @func, csr_xtensa_call0, implicit-def $a0
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
  ; CHECK-NEXT:   J %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2.if.end:
  ; CHECK-NEXT:   RETN implicit $a0
  bb.1.entry:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a2, $a3

    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(p0) = G_FRAME_INDEX %stack.0.a.addr
    G_STORE %0(s32), %2(p0) :: (store (s32) into %ir.a.addr)
    %3:gprb(p0) = G_FRAME_INDEX %stack.1.b.addr
    G_STORE %1(s32), %3(p0) :: (store (s32) into %ir.b.addr)
    %4:gprb(s32) = G_LOAD %2(p0) :: (dereferenceable load (s32) from %ir.a.addr)
    %5:gprb(s32) = G_LOAD %3(p0) :: (dereferenceable load (s32) from %ir.b.addr)
    %8:gprb(s32) = G_ICMP intpred(uge), %4(s32), %5
    %9:gprb(s32) = G_CONSTANT i32 1
    %7:gprb(s32) = G_AND %8, %9
    G_BRCOND %7(s32), %bb.2
    G_BR %bb.3

  bb.2.if.then:
    successors: %bb.3(0x80000000)

    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @func, csr_xtensa_call0, implicit-def $a0
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    G_BR %bb.3

  bb.3.if.end:
    RETN implicit $a0

...
