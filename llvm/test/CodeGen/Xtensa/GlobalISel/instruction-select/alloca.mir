# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = './llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/alloca.ll'
  source_filename = "./llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/alloca.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare void @f(ptr)

  define i32 @alloca_func() {
    %p = alloca i32, align 4
    call void @f(ptr %p)
    %retval = load i32, ptr %p, align 4
    ret i32 %retval
  }

...
---
name:            alloca_func
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    ; CHECK-LABEL: name: alloca_func
    ; CHECK: [[ADDI:%[0-9]+]]:gpr = ADDI %stack.0.p, 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ; CHECK-NEXT: [[L32IN:%[0-9]+]]:gpr = L32IN [[ADDI]], 0 :: (dereferenceable load (s32) from %ir.p)
    ; CHECK-NEXT: $a2 = COPY [[L32IN]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(p0) = G_FRAME_INDEX %stack.0.p
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = COPY %0(p0)
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    %1:gprb(s32) = G_LOAD %0(p0) :: (dereferenceable load (s32) from %ir.p)
    $a2 = COPY %1(s32)
    RETN implicit $a0, implicit $a2

...
