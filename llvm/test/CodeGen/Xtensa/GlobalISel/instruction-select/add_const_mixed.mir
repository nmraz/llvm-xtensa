# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'add_const_mixed.ll'
  source_filename = "add_const_mixed.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i32 @add_const_mixed(i32 %a) {
    %add = add i32 %a, 12806
    ret i32 %add
  }

  define i32 @add_const_mixed_neg_low(i32 %a) {
    %add = add i32 %a, 12934
    ret i32 %add
  }

  define i32 @add_const_mixed_comm(i32 %a) {
    %add = add i32 12806, %a
    ret i32 %add
  }

  define i32 @add_const_mixed_neg_low_comm(i32 %a) {
    %add = add i32 12934, %a
    ret i32 %add
  }

  define i32 @add_small_low_const_twice(i32 %a, i32 %b) {
    %add1 = add i32 %a, 55
    %add2 = add i32 %b, 55
    %or = or i32 %add1, %add2
    ret i32 %or
  }

  define i32 @add_small_high_const_twice(i32 %a, i32 %b) {
    %add1 = add i32 %a, 256
    %add2 = add i32 %b, 256
    %or = or i32 %add1, %add2
    ret i32 %or
  }

  define i32 @add_big_const_twice(i32 %a, i32 %b) {
    %add1 = add i32 %a, 12806
    %add2 = add i32 %b, 12806
    %or = or i32 %add1, %add2
    ret i32 %or
  }

  define i32 @sub_const_mixed(i32 %a) {
    %sub = sub i32 %a, 12806
    ret i32 %sub
  }

  define i32 @sub_const_mixed_pos_low(i32 %a) {
    %sub = sub i32 %a, 12934
    ret i32 %sub
  }

  define i32 @sub_const_mixed_not_comm(i32 %a) {
    %sub = sub i32 12806, %a
    ret i32 %sub
  }

  define i32 @sub_const_mixed_pos_low_not_comm(i32 %a) {
    %sub = sub i32 12934, %a
    ret i32 %sub
  }

...
---
name:            add_const_mixed
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: add_const_mixed
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], 12800
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], 6
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12806
    %2:gprb(s32) = G_ADD %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_const_mixed_neg_low
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: add_const_mixed_neg_low
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], 13056
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], -122
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12934
    %2:gprb(s32) = G_ADD %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_const_mixed_comm
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: add_const_mixed_comm
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], 12800
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], 6
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12806
    %2:gprb(s32) = G_ADD %1, %0
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_const_mixed_neg_low_comm
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: add_const_mixed_neg_low_comm
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], 13056
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], -122
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12934
    %2:gprb(s32) = G_ADD %1, %0
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_small_low_const_twice
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: add_small_low_const_twice
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[COPY]], 55
    ; CHECK-NEXT: [[ADDI1:%[0-9]+]]:gpr = ADDI [[COPY1]], 55
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gpr = OR [[ADDI]], [[ADDI1]]
    ; CHECK-NEXT: $a2 = COPY [[OR]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = G_CONSTANT i32 55
    %3:gprb(s32) = G_ADD %0, %2
    %4:gprb(s32) = G_ADD %1, %2
    %5:gprb(s32) = G_OR %3, %4
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_small_high_const_twice
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: add_small_high_const_twice
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], 256
    ; CHECK-NEXT: [[ADDMI1:%[0-9]+]]:gpr = ADDMI [[COPY1]], 256
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gpr = OR [[ADDMI]], [[ADDMI1]]
    ; CHECK-NEXT: $a2 = COPY [[OR]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = G_CONSTANT i32 256
    %3:gprb(s32) = G_ADD %0, %2
    %4:gprb(s32) = G_ADD %1, %2
    %5:gprb(s32) = G_OR %3, %4
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            add_big_const_twice
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
  - { id: 3, class: gprb, preferred-register: '' }
  - { id: 4, class: gprb, preferred-register: '' }
  - { id: 5, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: add_big_const_twice
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $a3
    ; CHECK-NEXT: [[L32R:%[0-9]+]]:gpr = L32R %const.0
    ; CHECK-NEXT: [[ADDN:%[0-9]+]]:gpr = ADDN [[COPY]], [[L32R]]
    ; CHECK-NEXT: [[ADDN1:%[0-9]+]]:gpr = ADDN [[COPY1]], [[L32R]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:gpr = OR [[ADDN]], [[ADDN1]]
    ; CHECK-NEXT: $a2 = COPY [[OR]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = COPY $a3
    %2:gprb(s32) = G_CONSTANT i32 12806
    %3:gprb(s32) = G_ADD %0, %2
    %4:gprb(s32) = G_ADD %1, %2
    %5:gprb(s32) = G_OR %3, %4
    $a2 = COPY %5(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            sub_const_mixed
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: sub_const_mixed
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], -12800
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], -6
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12806
    %2:gprb(s32) = G_SUB %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            sub_const_mixed_pos_low
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: sub_const_mixed_pos_low
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[ADDMI:%[0-9]+]]:gpr = ADDMI [[COPY]], -13056
    ; CHECK-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI [[ADDMI]], 122
    ; CHECK-NEXT: $a2 = COPY [[ADDI]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12934
    %2:gprb(s32) = G_SUB %0, %1
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            sub_const_mixed_not_comm
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: sub_const_mixed_not_comm
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[L32R:%[0-9]+]]:gpr = L32R %const.0
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[L32R]], [[COPY]]
    ; CHECK-NEXT: $a2 = COPY [[SUB]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12806
    %2:gprb(s32) = G_SUB %1, %0
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
---
name:            sub_const_mixed_pos_low_not_comm
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gprb, preferred-register: '' }
  - { id: 1, class: gprb, preferred-register: '' }
  - { id: 2, class: gprb, preferred-register: '' }
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: sub_const_mixed_pos_low_not_comm
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $a2
    ; CHECK-NEXT: [[L32R:%[0-9]+]]:gpr = L32R %const.0
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:gpr = SUB [[L32R]], [[COPY]]
    ; CHECK-NEXT: $a2 = COPY [[SUB]]
    ; CHECK-NEXT: RETN implicit $a0, implicit $a2
    %0:gprb(s32) = COPY $a2
    %1:gprb(s32) = G_CONSTANT i32 12934
    %2:gprb(s32) = G_SUB %1, %0
    $a2 = COPY %2(s32)
    RETN implicit $a0, implicit $a2

...
