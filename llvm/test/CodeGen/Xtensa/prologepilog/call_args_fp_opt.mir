# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = './llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/call_args_fp.ll'
  source_filename = "./llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/call_args_fp.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare void @reg_args_i32(i32, i32, i32, i32, i32, i32)

  declare void @reg_arg_i1(i1)

  declare void @reg_arg_i8(i8)

  declare void @reg_arg_i16(i16)

  declare void @reg_arg_i64(i64)

  declare void @reg_arg_i64_packed(i32, i32, i64)

  declare void @reg_arg_i64_aligned(i32, i64)

  declare void @mixed_reg_args(i32, i1, i64, i8, i16)

  declare void @stack_arg_i32(i32, i32, i32, i32, i32, i32, i32)

  declare void @stack_arg_i1(i32, i32, i32, i32, i32, i32, i1)

  declare void @stack_arg_i8(i32, i32, i32, i32, i32, i32, i8)

  declare void @stack_arg_i16(i32, i32, i32, i32, i32, i32, i16)

  declare void @stack_arg_i64(i32, i32, i32, i32, i32, i32, i64)

  declare void @stack_arg_i64_reg_unaligned(i32, i32, i32, i32, i32, i64)

  declare void @stack_arg_i64_aligned(i32, i32, i32, i32, i32, i32, i32, i64)

  declare void @mixed_reg_stack_args(i32, i1, i8, i64, i16)

  declare void @mixed_stack_args(i32, i32, i32, i32, i32, i32, i16, i8, i64)

  define void @call_simple_reg_args() #0 {
  entry:
    call void @reg_args_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6)
    call void @reg_arg_i1(i1 true)
    call void @reg_arg_i8(i8 1)
    call void @reg_arg_i16(i16 1)
    ret void
  }

  define void @call_reg_i64() #0 {
  entry:
    call void @reg_arg_i64(i64 1)
    call void @reg_arg_i64_packed(i32 1, i32 2, i64 3)
    call void @reg_arg_i64_aligned(i32 1, i64 2)
    ret void
  }

  define void @call_mixed_reg_args() #0 {
  entry:
    call void @mixed_reg_args(i32 1, i1 true, i64 3, i8 4, i16 5)
    ret void
  }

  define void @call_stack() #0 {
  entry:
    call void @stack_arg_i32(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7)
    call void @stack_arg_i1(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i1 true)
    call void @stack_arg_i8(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i8 7)
    call void @stack_arg_i16(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i16 7)
    ret void
  }

  define void @call_stack_i64() #0 {
  entry:
    call void @stack_arg_i64(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i64 7)
    call void @stack_arg_i64_reg_unaligned(i32 1, i32 2, i32 3, i32 4, i32 5, i64 6)
    call void @stack_arg_i64_aligned(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i64 8)
    ret void
  }

  attributes #0 = { "frame-pointer"="all" }

...
---
name:            call_simple_reg_args
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: call_simple_reg_args
    ; CHECK: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a15, $a1, 8 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: S32I killed $a0, $a1, 12 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @reg_args_i32, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: CALL0 @reg_arg_i1, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: CALL0 @reg_arg_i8, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: CALL0 @reg_arg_i16, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ; CHECK-NEXT: $a0 = L32I $a1, 12 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 8 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @reg_args_i32, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    CALL0 @reg_arg_i1, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    CALL0 @reg_arg_i8, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    CALL0 @reg_arg_i16, csr_xtensa_call0, implicit-def $a0, implicit killed $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            call_reg_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: call_reg_i64
    ; CHECK: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a15, $a1, 8 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: S32I killed $a0, $a1, 12 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: CALL0 @reg_arg_i64, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: CALL0 @reg_arg_i64_packed, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a4 = MOVI 2
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: CALL0 @reg_arg_i64_aligned, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a4, implicit killed $a5
    ; CHECK-NEXT: $a0 = L32I $a1, 12 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 8 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    $a3 = MOVI 0
    CALL0 @reg_arg_i64, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 0
    CALL0 @reg_arg_i64_packed, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    $a4 = MOVI 2
    $a5 = MOVI 0
    CALL0 @reg_arg_i64_aligned, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a4, implicit killed $a5
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            call_mixed_reg_args
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: call_mixed_reg_args
    ; CHECK: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a15, $a1, 8 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: S32I killed $a0, $a1, 12 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 1
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 4
    ; CHECK-NEXT: $a7 = MOVI 5
    ; CHECK-NEXT: CALL0 @mixed_reg_args, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a0 = L32I $a1, 12 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 8 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    $a2 = MOVI 1
    $a3 = MOVI 1
    $a4 = MOVI 3
    $a5 = MOVI 0
    $a6 = MOVI 4
    $a7 = MOVI 5
    CALL0 @mixed_reg_args, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: call_stack
    ; CHECK: liveins: $a12, $a13
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -32
    ; CHECK-NEXT: S32I killed $a15, $a1, 16 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: S32I killed $a0, $a1, 28 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a12, $a1, 24 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: S32I killed $a13, $a1, 20 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: renamable $a12 = MOVI 7
    ; CHECK-NEXT: S32I renamable $a12, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: renamable $a13 = MOVI 1
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i32, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: S32I killed renamable $a13, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i1, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: S32I renamable $a12, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i8, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: S32I killed renamable $a12, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i16, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a13 = L32I $a1, 20 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a12 = L32I $a1, 24 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a0 = L32I $a1, 28 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 16 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 32
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    renamable $a12 = MOVI 7
    S32I renamable $a12, $a1, 0 :: (store (s32) into stack)
    renamable $a13 = MOVI 1
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @stack_arg_i32, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a13, $a1, 0 :: (store (s32) into stack)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @stack_arg_i1, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I renamable $a12, $a1, 0 :: (store (s32) into stack)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @stack_arg_i8, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a12, $a1, 0 :: (store (s32) into stack)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @stack_arg_i16, csr_xtensa_call0, implicit-def $a0, implicit killed $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            call_stack_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: call_stack_i64
    ; CHECK: liveins: $a12, $a13, $a14
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -48
    ; CHECK-NEXT: S32I killed $a15, $a1, 28 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: S32I killed $a0, $a1, 44 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a12, $a1, 40 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: S32I killed $a13, $a1, 36 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: S32I killed $a14, $a1, 32 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: renamable $a13 = MOVI 7
    ; CHECK-NEXT: S32I renamable $a13, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: renamable $a12 = MOVI 0
    ; CHECK-NEXT: S32I renamable $a12, $a1, 4 :: (store (s32) into stack + 4)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: renamable $a14 = MOVI 6
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i64, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: S32I killed renamable $a14, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: S32I renamable $a12, $a1, 4 :: (store (s32) into stack + 4)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: CALL0 @stack_arg_i64_reg_unaligned, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6
    ; CHECK-NEXT: S32I killed renamable $a13, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: renamable $a2 = MOVI 8
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 8 :: (store (s32) into stack + 8)
    ; CHECK-NEXT: S32I killed renamable $a12, $a1, 12 :: (store (s32) into stack + 12)
    ; CHECK-NEXT: $a2 = MOVI 1
    ; CHECK-NEXT: $a3 = MOVI 2
    ; CHECK-NEXT: $a4 = MOVI 3
    ; CHECK-NEXT: $a5 = MOVI 4
    ; CHECK-NEXT: $a6 = MOVI 5
    ; CHECK-NEXT: $a7 = MOVI 6
    ; CHECK-NEXT: CALL0 @stack_arg_i64_aligned, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a14 = L32I $a1, 32 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a13 = L32I $a1, 36 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a12 = L32I $a1, 40 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a0 = L32I $a1, 44 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 28 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 48
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 8, 0, implicit-def $a1, implicit $a1
    renamable $a13 = MOVI 7
    S32I renamable $a13, $a1, 0 :: (store (s32) into stack)
    renamable $a12 = MOVI 0
    S32I renamable $a12, $a1, 4 :: (store (s32) into stack + 4)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    renamable $a14 = MOVI 6
    $a7 = MOVI 6
    CALL0 @stack_arg_i64, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 8, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 8, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a14, $a1, 0 :: (store (s32) into stack)
    S32I renamable $a12, $a1, 4 :: (store (s32) into stack + 4)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    CALL0 @stack_arg_i64_reg_unaligned, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6
    ADJCALLSTACKUP 8, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 16, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a13, $a1, 0 :: (store (s32) into stack)
    renamable $a2 = MOVI 8
    S32I killed renamable $a2, $a1, 8 :: (store (s32) into stack + 8)
    S32I killed renamable $a12, $a1, 12 :: (store (s32) into stack + 12)
    $a2 = MOVI 1
    $a3 = MOVI 2
    $a4 = MOVI 3
    $a5 = MOVI 4
    $a6 = MOVI 5
    $a7 = MOVI 6
    CALL0 @stack_arg_i64_aligned, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 16, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
