# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'preserve_a15.ll'
  source_filename = "preserve_a15.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare dso_local i32 @g(...)

  declare dso_local void @h(i32, i32, i32, i32, i32, i32, i32, i32)

  define void @f() {
    %call = tail call i32 @g()
    %call1 = tail call i32 @g()
    %call2 = tail call i32 @g()
    %call3 = tail call i32 @g()
    %call4 = tail call i32 @g()
    %call5 = tail call i32 @g()
    %call6 = tail call i32 @g()
    %call7 = tail call i32 @g()
    tail call void @h(i32 %call, i32 %call1, i32 %call2, i32 %call3, i32 %call4, i32 %call5, i32 %call6, i32 %call7)
    ret void
  }

...
---
name:            f
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    ; CHECK-LABEL: name: f
    ; CHECK: liveins: $a12, $a13, $a14, $a15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -48
    ; CHECK-NEXT: S32I killed $a0, $a1, 44 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a12, $a1, 40 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: S32I killed $a13, $a1, 36 :: (store (s32) into %stack.4)
    ; CHECK-NEXT: S32I killed $a14, $a1, 32 :: (store (s32) into %stack.5)
    ; CHECK-NEXT: S32I killed $a15, $a1, 28 :: (store (s32) into %stack.6)
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: S32I $a2, $a1, 24 :: (store (s32) into %stack.0)
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: S32I $a2, $a1, 20 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: S32I $a2, $a1, 16 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: renamable $a15 = COPY $a2
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: renamable $a12 = COPY $a2
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: renamable $a13 = COPY $a2
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: renamable $a14 = COPY $a2
    ; CHECK-NEXT: CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ; CHECK-NEXT: S32I killed renamable $a14, $a1, 0 :: (store (s32) into stack)
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 4 :: (store (s32) into stack + 4)
    ; CHECK-NEXT: $a2 = L32I $a1, 24 :: (load (s32) from %stack.0)
    ; CHECK-NEXT: $a3 = L32I $a1, 20 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a4 = L32I $a1, 16 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a5 = COPY killed renamable $a15
    ; CHECK-NEXT: $a6 = COPY killed renamable $a12
    ; CHECK-NEXT: $a7 = COPY killed renamable $a13
    ; CHECK-NEXT: CALL0 @h, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a15 = L32I $a1, 28 :: (load (s32) from %stack.6)
    ; CHECK-NEXT: $a14 = L32I $a1, 32 :: (load (s32) from %stack.5)
    ; CHECK-NEXT: $a13 = L32I $a1, 36 :: (load (s32) from %stack.4)
    ; CHECK-NEXT: $a12 = L32I $a1, 40 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a0 = L32I $a1, 44 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 48
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    S32I $a2, %stack.0, 0 :: (store (s32) into %stack.0)
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    S32I $a2, %stack.1, 0 :: (store (s32) into %stack.1)
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    S32I $a2, %stack.2, 0 :: (store (s32) into %stack.2)
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    renamable $a15 = COPY $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    renamable $a12 = COPY $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    renamable $a13 = COPY $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    renamable $a14 = COPY $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @g, csr_xtensa_call0, implicit-def $a0, implicit-def $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    ADJCALLSTACKDOWN 8, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a14, $a1, 0 :: (store (s32) into stack)
    S32I killed renamable $a2, $a1, 4 :: (store (s32) into stack + 4)
    $a2 = L32I %stack.0, 0 :: (load (s32) from %stack.0)
    $a3 = L32I %stack.1, 0 :: (load (s32) from %stack.1)
    $a4 = L32I %stack.2, 0 :: (load (s32) from %stack.2)
    $a5 = COPY killed renamable $a15
    $a6 = COPY killed renamable $a12
    $a7 = COPY killed renamable $a13
    CALL0 @h, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 8, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
