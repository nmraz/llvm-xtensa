# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = 'alloca_dyn.ll'
  source_filename = "alloca_dyn.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  declare void @f(ptr)

  declare void @f2(i32, i32, i32, i32, i32, i32, ptr)

  define void @alloca_variable(i32 %size, i8 %x) {
    %p = alloca i8, i32 %size, align 1
    store i8 %x, ptr %p, align 1
    ret void
  }

  define void @alloca_variable_int(i32 %size, i32 %x) {
    %p = alloca i32, i32 %size, align 4
    store i32 %x, ptr %p, align 4
    ret void
  }

  define void @alloca_variable_call(i32 %size) {
    %p = alloca i8, i32 %size, align 1
    call void @f(ptr %p)
    ret void
  }

  define void @alloca_variable_call_stack(i32 %size) {
    %p = alloca i8, i32 %size, align 1
    call void @f2(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p)
    ret void
  }

  define void @alloca_overaligned(i8 %x) {
    %p = alloca i8, i32 32, align 32
    store i8 %x, ptr %p, align 1
    ret void
  }

  define void @alloca_overaligned_call(i8 %x) {
    %p = alloca i8, i32 32, align 32
    call void @f(ptr %p)
    ret void
  }

  define void @alloca_overaligned_call_stack(i8 %x) {
    %p = alloca i8, i32 32, align 32
    call void @f2(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p)
    ret void
  }

  define void @alloca_variable_overaligned(i32 %size, i8 %x) {
    %p = alloca i8, i32 %size, align 32
    store i8 %x, ptr %p, align 1
    ret void
  }

  define void @alloca_variable_overaligned_call(i32 %size) {
    %p = alloca i8, i32 %size, align 32
    call void @f(ptr %p)
    ret void
  }

  define void @alloca_variable_overaligned_call_stack(i32 %size) {
    %p = alloca i8, i32 %size, align 32
    call void @f2(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p)
    ret void
  }

  define void @alloca_variable_and_overaligned(i32 %size, i8 %x1, i8 %x2) {
    %p1 = alloca i8, i32 %size, align 1
    %p2 = alloca i8, i32 32, align 32
    store i8 %x1, ptr %p1, align 1
    store i8 %x2, ptr %p2, align 1
    ret void
  }

  define void @alloca_variable_and_overaligned_call(i32 %size, i8 %x1, i8 %x2) {
    %p1 = alloca i8, i32 %size, align 1
    %p2 = alloca i8, i32 32, align 32
    store i8 %x1, ptr %p1, align 1
    store i8 %x2, ptr %p2, align 1
    call void @f(ptr %p1)
    ret void
  }

  define void @alloca_variable_and_overaligned_call_stack(i32 %size, i8 %x1, i8 %x2) {
    %p1 = alloca i8, i32 %size, align 1
    %p2 = alloca i8, i32 32, align 32
    store i8 %x1, ptr %p1, align 1
    store i8 %x2, ptr %p2, align 1
    call void @f2(i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p1)
    ret void
  }

  define void @alloca_variable_and_overaligned_call_stack_formal_stack_arg(i32 %size, i8 %x1, i8 %x2, i32 %a4, i32 %a5, i32 %a6, i32 %a7) {
    %p1 = alloca i8, i32 %size, align 1
    %p2 = alloca i8, i32 32, align 32
    store i8 %x1, ptr %p1, align 1
    store i8 %x2, ptr %p2, align 1
    call void @f2(i32 %a7, i32 0, i32 0, i32 0, i32 0, i32 0, ptr %p1)
    ret void
  }

...
---
name:            alloca_variable
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_variable
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a15, $a1, 12 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a4 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a4
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 12 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a4 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a4
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_variable_int
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_variable_int
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a15, $a1, 12 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = SLLI killed renamable $a2, 2
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a4 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a4
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S32I killed renamable $a3, killed renamable $a2, 0 :: (store (s32) into %ir.p)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 12 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = SLLI killed renamable $a2, 2
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a4 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a4
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S32I killed renamable $a3, killed renamable $a2, 0 :: (store (s32) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_variable_call
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_call
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a0, $a1, 12 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a15, $a1, 8 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a3 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 8 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 12 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a3 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_call_stack
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed $a0, $a1, 12 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a15, $a1, 8 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a3 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = MOVI 0
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: $a4 = MOVI 0
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 0
    ; CHECK-NEXT: $a7 = MOVI 0
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 8 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 12 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a3 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    $a2 = MOVI 0
    $a3 = MOVI 0
    $a4 = MOVI 0
    $a5 = MOVI 0
    $a6 = MOVI 0
    $a7 = MOVI 0
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_overaligned
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_overaligned
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a15, $a1, 60 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a3 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a3
    ; CHECK-NEXT: S8I killed renamable $a2, $a1, 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 60 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    S8I killed renamable $a2, %stack.0.p, 0 :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_overaligned_call
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_overaligned_call
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a0, $a1, 60 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a15, $a1, 56 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a2 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a2
    ; CHECK-NEXT: $a2 = MOVN $a1
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 56 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 60 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    renamable $a2 = ADDI %stack.0.p, 0
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_overaligned_call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_overaligned_call_stack
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -96
    ; CHECK-NEXT: S32I killed $a0, $a1, 92 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a15, $a1, 88 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a2 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a2
    ; CHECK-NEXT: $a2 = ADDI $a1, 32
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = MOVI 0
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: $a4 = MOVI 0
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 0
    ; CHECK-NEXT: $a7 = MOVI 0
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 88 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 92 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 96
    ; CHECK-NEXT: RETN implicit $a0
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    renamable $a2 = ADDI %stack.0.p, 0
    S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    $a2 = MOVI 0
    $a3 = MOVI 0
    $a4 = MOVI 0
    $a5 = MOVI 0
    $a6 = MOVI 0
    $a7 = MOVI 0
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit killed $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_overaligned
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 32, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_variable_overaligned
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -32
    ; CHECK-NEXT: S32I killed $a14, $a1, 28 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: S32I killed $a15, $a1, 24 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a4 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a4
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a4 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a4
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: renamable $a4 = MOVI -32
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a4
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 24 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a14 = L32I $a1, 28 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 32
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a4 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a4
    renamable $a2 = SUB $a1, killed renamable $a2
    renamable $a4 = MOVI -32
    renamable $a2 = AND killed renamable $a2, killed renamable $a4
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p)
    RETN implicit $a0

...
---
name:            alloca_variable_overaligned_call
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 32, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_overaligned_call
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -32
    ; CHECK-NEXT: S32I killed $a0, $a1, 28 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a14, $a1, 24 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: S32I killed $a15, $a1, 20 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a3 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a3
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a3 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: renamable $a3 = MOVI -32
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 20 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a14 = L32I $a1, 24 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 28 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 32
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a3 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    renamable $a2 = SUB $a1, killed renamable $a2
    renamable $a3 = MOVI -32
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    $a1 = COPY renamable $a2
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_overaligned_call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: variable-sized, offset: 0, alignment: 32, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_variable_overaligned_call_stack
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -32
    ; CHECK-NEXT: S32I killed $a0, $a1, 28 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a14, $a1, 24 :: (store (s32) into %stack.1)
    ; CHECK-NEXT: S32I killed $a15, $a1, 20 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a3 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a3
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a3 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: renamable $a3 = MOVI -32
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a3
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = MOVI 0
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: $a4 = MOVI 0
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 0
    ; CHECK-NEXT: $a7 = MOVI 0
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 20 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a14 = L32I $a1, 24 :: (load (s32) from %stack.1)
    ; CHECK-NEXT: $a0 = L32I $a1, 28 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 32
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a3 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    renamable $a2 = SUB $a1, killed renamable $a2
    renamable $a3 = MOVI -32
    renamable $a2 = AND killed renamable $a2, killed renamable $a3
    $a1 = COPY renamable $a2
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    $a2 = MOVI 0
    $a3 = MOVI 0
    $a4 = MOVI 0
    $a5 = MOVI 0
    $a6 = MOVI 0
    $a7 = MOVI 0
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit killed $a4, implicit killed $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_and_overaligned
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p1, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: p2, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: alloca_variable_and_overaligned
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a14, $a1, 60 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: S32I killed $a15, $a1, 56 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a5 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a5
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a5 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a5
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p1)
    ; CHECK-NEXT: S8I killed renamable $a4, $a14, 0 :: (store (s8) into %ir.p2)
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 56 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a14 = L32I $a1, 60 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a5 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a5
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, killed renamable $a2, 0 :: (store (s8) into %ir.p1)
    S8I killed renamable $a4, %stack.1.p2, 0 :: (store (s8) into %ir.p2)
    RETN implicit $a0

...
---
name:            alloca_variable_and_overaligned_call
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p1, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: p2, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: alloca_variable_and_overaligned_call
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a0, $a1, 60 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a14, $a1, 56 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: S32I killed $a15, $a1, 52 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a5 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a5
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a5 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a5
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    ; CHECK-NEXT: S8I killed renamable $a4, $a14, 0 :: (store (s8) into %ir.p2)
    ; CHECK-NEXT: CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 52 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a14 = L32I $a1, 56 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a0 = L32I $a1, 60 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a5 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a5
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    S8I killed renamable $a4, %stack.1.p2, 0 :: (store (s8) into %ir.p2)
    ADJCALLSTACKDOWN 0, 0, implicit-def $a1, implicit $a1
    CALL0 @f, csr_xtensa_call0, implicit-def $a0, implicit $a2
    ADJCALLSTACKUP 0, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_and_overaligned_call_stack
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p1, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: p2, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3, $a4

    ; CHECK-LABEL: name: alloca_variable_and_overaligned_call_stack
    ; CHECK: liveins: $a2, $a3, $a4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a0, $a1, 60 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a14, $a1, 56 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: S32I killed $a15, $a1, 52 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a5 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a5
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a5 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a5
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    ; CHECK-NEXT: S8I killed renamable $a4, $a14, 0 :: (store (s8) into %ir.p2)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = MOVI 0
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: $a4 = MOVI 0
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 0
    ; CHECK-NEXT: $a7 = MOVI 0
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit killed $a6, implicit killed $a7
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 52 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a14 = L32I $a1, 56 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a0 = L32I $a1, 60 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a5 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a5
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    S8I killed renamable $a4, %stack.1.p2, 0 :: (store (s8) into %ir.p2)
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    $a2 = MOVI 0
    $a3 = MOVI 0
    $a4 = MOVI 0
    $a5 = MOVI 0
    $a6 = MOVI 0
    $a7 = MOVI 0
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit killed $a6, implicit killed $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
---
name:            alloca_variable_and_overaligned_call_stack_formal_stack_arg
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: true
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
  - { reg: '$a4', virtual-reg: '' }
  - { reg: '$a5', virtual-reg: '' }
  - { reg: '$a6', virtual-reg: '' }
  - { reg: '$a7', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    32
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: p1, type: variable-sized, offset: 0, alignment: 1, stack-id: default,
      callee-saved-register: '', callee-saved-restored: true, debug-info-variable: '',
      debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: p2, type: default, offset: 0, size: 32, alignment: 32,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0 (%ir-block.0):
    liveins: $a2, $a3, $a4, $a5, $a6, $a7

    ; CHECK-LABEL: name: alloca_variable_and_overaligned_call_stack_formal_stack_arg
    ; CHECK: liveins: $a2, $a3, $a4, $a5, $a6, $a7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -64
    ; CHECK-NEXT: S32I killed $a0, $a1, 60 :: (store (s32) into %fixed-stack.0)
    ; CHECK-NEXT: S32I killed $a14, $a1, 56 :: (store (s32) into %stack.2)
    ; CHECK-NEXT: S32I killed $a15, $a1, 52 :: (store (s32) into %stack.3)
    ; CHECK-NEXT: $a15 = MOVN $a1
    ; CHECK-NEXT: $a5 = MOVI -32
    ; CHECK-NEXT: $a1 = AND killed $a1, killed $a5
    ; CHECK-NEXT: $a14 = MOVN $a1
    ; CHECK-NEXT: renamable $a5 = L32I $a15, 64 :: (load (s32) from %fixed-stack.1, align 16)
    ; CHECK-NEXT: renamable $a2 = ADDI killed renamable $a2, 15
    ; CHECK-NEXT: renamable $a6 = MOVI -16
    ; CHECK-NEXT: renamable $a2 = AND killed renamable $a2, killed renamable $a6
    ; CHECK-NEXT: renamable $a2 = SUB $a1, killed renamable $a2
    ; CHECK-NEXT: $a1 = COPY renamable $a2
    ; CHECK-NEXT: S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    ; CHECK-NEXT: S8I killed renamable $a4, $a14, 0 :: (store (s8) into %ir.p2)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    ; CHECK-NEXT: $a2 = COPY killed renamable $a5
    ; CHECK-NEXT: $a3 = MOVI 0
    ; CHECK-NEXT: $a4 = MOVI 0
    ; CHECK-NEXT: $a5 = MOVI 0
    ; CHECK-NEXT: $a6 = MOVI 0
    ; CHECK-NEXT: $a7 = MOVI 0
    ; CHECK-NEXT: CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: $a1 = MOVN killed $a15
    ; CHECK-NEXT: $a15 = L32I $a1, 52 :: (load (s32) from %stack.3)
    ; CHECK-NEXT: $a14 = L32I $a1, 56 :: (load (s32) from %stack.2)
    ; CHECK-NEXT: $a0 = L32I $a1, 60 :: (load (s32) from %fixed-stack.0)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 64
    ; CHECK-NEXT: RETN implicit $a0
    renamable $a5 = L32I %fixed-stack.0, 0 :: (load (s32) from %fixed-stack.0, align 16)
    renamable $a2 = ADDI killed renamable $a2, 15
    renamable $a6 = MOVI -16
    renamable $a2 = AND killed renamable $a2, killed renamable $a6
    renamable $a2 = SUB $a1, killed renamable $a2
    $a1 = COPY renamable $a2
    S8I killed renamable $a3, renamable $a2, 0 :: (store (s8) into %ir.p1)
    S8I killed renamable $a4, %stack.1.p2, 0 :: (store (s8) into %ir.p2)
    ADJCALLSTACKDOWN 4, 0, implicit-def $a1, implicit $a1
    S32I killed renamable $a2, $a1, 0 :: (store (p0) into stack)
    $a2 = COPY killed renamable $a5
    $a3 = MOVI 0
    $a4 = MOVI 0
    $a5 = MOVI 0
    $a6 = MOVI 0
    $a7 = MOVI 0
    CALL0 @f2, csr_xtensa_call0, implicit-def $a0, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7
    ADJCALLSTACKUP 4, 0, implicit-def $a1, implicit $a1
    RETN implicit $a0

...
