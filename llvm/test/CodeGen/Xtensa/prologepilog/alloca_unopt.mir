# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=xtensa -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s
--- |
  ; ModuleID = './llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/alloca.ll'
  source_filename = "./llvm/test/CodeGen/Xtensa/GlobalISel/llvm-ir/alloca.ll"
  target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
  target triple = "xtensa"

  define i8 @alloca_i8(i8 %val) {
    %p = alloca i8, align 1
    store i8 %val, ptr %p, align 1
    %retval = load i8, ptr %p, align 1
    ret i8 %retval
  }

  define i16 @alloca_i16(i16 %val) {
    %p = alloca i16, align 2
    store i16 %val, ptr %p, align 2
    %retval = load i16, ptr %p, align 2
    ret i16 %retval
  }

  define i32 @alloca_i32(i32 %val) {
    %p = alloca i32, align 4
    store i32 %val, ptr %p, align 4
    %retval = load i32, ptr %p, align 4
    ret i32 %retval
  }

  define i64 @alloca_i64(i64 %val) {
    %p = alloca i64, align 8
    store i64 %val, ptr %p, align 8
    %retval = load i64, ptr %p, align 8
    ret i64 %retval
  }

...
---
name:            alloca_i8
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 1, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_i8
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S8I killed renamable $a2, $a1, 15 :: (store (s8) into %ir.p)
    ; CHECK-NEXT: renamable $a2 = L8UI $a1, 15 :: (dereferenceable load (s8) from %ir.p)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0, implicit killed $a2
    S8I killed renamable $a2, %stack.0.p, 0 :: (store (s8) into %ir.p)
    renamable $a2 = L8UI %stack.0.p, 0 :: (dereferenceable load (s8) from %ir.p)
    RETN implicit $a0, implicit killed $a2

...
---
name:            alloca_i16
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 2, alignment: 2,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_i16
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S16I killed renamable $a2, $a1, 14 :: (store (s16) into %ir.p)
    ; CHECK-NEXT: renamable $a2 = L16UI $a1, 14 :: (dereferenceable load (s16) from %ir.p)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0, implicit killed $a2
    S16I killed renamable $a2, %stack.0.p, 0 :: (store (s16) into %ir.p)
    renamable $a2 = L16UI %stack.0.p, 0 :: (dereferenceable load (s16) from %ir.p)
    RETN implicit $a0, implicit killed $a2

...
---
name:            alloca_i32
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2

    ; CHECK-LABEL: name: alloca_i32
    ; CHECK: liveins: $a2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 12 :: (store (s32) into %ir.p)
    ; CHECK-NEXT: renamable $a2 = L32I $a1, 12 :: (dereferenceable load (s32) from %ir.p)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0, implicit killed $a2
    S32I killed renamable $a2, %stack.0.p, 0 :: (store (s32) into %ir.p)
    renamable $a2 = L32I %stack.0.p, 0 :: (dereferenceable load (s32) from %ir.p)
    RETN implicit $a0, implicit killed $a2

...
---
name:            alloca_i64
alignment:       4
exposesReturnsTwice: false
legalized:       true
regBankSelected: true
selected:        true
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:
  - { reg: '$a2', virtual-reg: '' }
  - { reg: '$a3', virtual-reg: '' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: p, type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.1 (%ir-block.0):
    liveins: $a2, $a3

    ; CHECK-LABEL: name: alloca_i64
    ; CHECK: liveins: $a2, $a3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $a1 = ADDI killed $a1, -16
    ; CHECK-NEXT: S32I killed renamable $a2, $a1, 8 :: (store (s32) into %ir.p, align 8)
    ; CHECK-NEXT: S32I killed renamable $a3, $a1, 12 :: (store (s32) into %ir.p + 4, basealign 8)
    ; CHECK-NEXT: renamable $a2 = L32I $a1, 8 :: (dereferenceable load (s32) from %ir.p, align 8)
    ; CHECK-NEXT: renamable $a3 = L32I $a1, 12 :: (dereferenceable load (s32) from %ir.p + 4, basealign 8)
    ; CHECK-NEXT: $a1 = ADDI killed $a1, 16
    ; CHECK-NEXT: RETN implicit $a0, implicit killed $a2, implicit killed $a3
    S32I killed renamable $a2, %stack.0.p, 0 :: (store (s32) into %ir.p, align 8)
    S32I killed renamable $a3, %stack.0.p, 4 :: (store (s32) into %ir.p + 4, basealign 8)
    renamable $a2 = L32I %stack.0.p, 0 :: (dereferenceable load (s32) from %ir.p, align 8)
    renamable $a3 = L32I %stack.0.p, 4 :: (dereferenceable load (s32) from %ir.p + 4, basealign 8)
    RETN implicit $a0, implicit killed $a2, implicit killed $a3

...
