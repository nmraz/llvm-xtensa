//===-- XtensaInstPrinter.h - Convert Xtensa MCInst to assembly syntax ----===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints an Xtensa MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_XTENSA_MCTARGETDESC_XTENSAINSTPRINTER_H
#define LLVM_LIB_TARGET_XTENSA_MCTARGETDESC_XTENSAINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"
#include "llvm/Support/raw_ostream.h"
#include <cstdint>

namespace llvm {

class MCOperand;

class XtensaInstPrinter : public MCInstPrinter {
public:
  XtensaInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                    const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  // Hand-implemented

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;

  void printOperand(const MCInst *MI, int OpNum, raw_ostream &OS);

  void printBranchOperand(const MCInst *MI, uint64_t Address, int OpNum,
                          raw_ostream &O);
  void printL32ROperand(const MCInst *MI, uint64_t Address, int OpNum,
                        raw_ostream &O);
  void printCallOperand(const MCInst *MI, uint64_t Address, int OpNum,
                        raw_ostream &O);

  // Autogenerated by tablegen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

private:
  template <uint64_t (*Evaluate)(uint64_t Addr, int64_t Imm)>
  void printPCRelOperand(const MCInst *MI, uint64_t Address, int OpNum,
                         raw_ostream &O);
};
} // end namespace llvm

#endif
